
Barcov2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080084c0  080084c0  000094c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008748  08008748  0000a0c8  2**0
                  CONTENTS
  4 .ARM          00000008  08008748  08008748  00009748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008750  08008750  0000a0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008750  08008750  00009750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008754  08008754  00009754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08008758  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa0  200000c8  08008820  0000a0c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  08008820  0000ab68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001312c  00000000  00000000  0000a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d08  00000000  00000000  0001d224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0001ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfa  00000000  00000000  00021100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002418d  00000000  00000000  00021efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d2f  00000000  00000000  00046087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5241  00000000  00000000  0005ddb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132ff7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  0013303c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001386c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084a4 	.word	0x080084a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	080084a4 	.word	0x080084a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HMC5883L_initialize+0x28>)
 8000f7e:	221e      	movs	r2, #30
 8000f80:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <HMC5883L_initialize+0x28>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2270      	movs	r2, #112	@ 0x70
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f8c4 	bl	8001118 <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 f807 	bl	8000fa4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 f818 	bl	8000fcc <HMC5883L_setMode>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000e4 	.word	0x200000e4

08000fa4 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HMC5883L_setGain+0x24>)
 8000fb0:	7818      	ldrb	r0, [r3, #0]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	015b      	lsls	r3, r3, #5
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2101      	movs	r1, #1
 8000fbc:	f000 f8ac 	bl	8001118 <I2Cdev_writeByte>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000e4 	.word	0x200000e4

08000fcc <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <HMC5883L_setMode+0x28>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f89a 	bl	8001118 <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HMC5883L_setMode+0x2c>)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	7013      	strb	r3, [r2, #0]
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000e4 	.word	0x200000e4
 8000ff8:	200000ee 	.word	0x200000ee

08000ffc <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t *x, int16_t *y, int16_t *z) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
    I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer, 0);
 8001008:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <HMC5883L_getHeading+0x80>)
 800100a:	7818      	ldrb	r0, [r3, #0]
 800100c:	2300      	movs	r3, #0
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001012:	2206      	movs	r2, #6
 8001014:	2103      	movs	r1, #3
 8001016:	f000 f847 	bl	80010a8 <I2Cdev_readBytes>
    if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <HMC5883L_getHeading+0x88>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d106      	bne.n	8001030 <HMC5883L_getHeading+0x34>
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HMC5883L_getHeading+0x80>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2201      	movs	r2, #1
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f874 	bl	8001118 <I2Cdev_writeByte>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <HMC5883L_getHeading+0x84>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001050:	795b      	ldrb	r3, [r3, #5]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HMC5883L_getHeading+0x84>)
 800105e:	789b      	ldrb	r3, [r3, #2]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001066:	78db      	ldrb	r3, [r3, #3]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	801a      	strh	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000e4 	.word	0x200000e4
 8001080:	200000e8 	.word	0x200000e8
 8001084:	200000ee 	.word	0x200000ee

08001088 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <I2Cdev_init+0x1c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200000f0 	.word	0x200000f0

080010a8 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	460b      	mov	r3, r1
 80010b6:	71bb      	strb	r3, [r7, #6]
 80010b8:	4613      	mov	r3, r2
 80010ba:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80010bc:	8b3b      	ldrh	r3, [r7, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <I2Cdev_readBytes+0x1e>
 80010c2:	8b3b      	ldrh	r3, [r7, #24]
 80010c4:	e001      	b.n	80010ca <I2Cdev_readBytes+0x22>
 80010c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ca:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <I2Cdev_readBytes+0x6c>)
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	b299      	uxth	r1, r3
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	1dba      	adds	r2, r7, #6
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	f002 fac8 	bl	8003674 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <I2Cdev_readBytes+0x6c>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	b299      	uxth	r1, r3
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	4613      	mov	r3, r2
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f002 fbb8 	bl	8003870 <HAL_I2C_Master_Receive>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <I2Cdev_readBytes+0x62>
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	e000      	b.n	800110c <I2Cdev_readBytes+0x64>
    return -1;
 800110a:	23ff      	movs	r3, #255	@ 0xff
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200000f0 	.word	0x200000f0

08001118 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	460b      	mov	r3, r1
 8001124:	71bb      	strb	r3, [r7, #6]
 8001126:	4613      	mov	r3, r2
 8001128:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 800112a:	1d7b      	adds	r3, r7, #5
 800112c:	79b9      	ldrb	r1, [r7, #6]
 800112e:	79f8      	ldrb	r0, [r7, #7]
 8001130:	2201      	movs	r2, #1
 8001132:	f000 f805 	bl	8001140 <I2Cdev_writeBytes>
 8001136:	4603      	mov	r3, r0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af04      	add	r7, sp, #16
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	460b      	mov	r3, r1
 800114e:	71bb      	strb	r3, [r7, #6]
 8001150:	4613      	mov	r3, r2
 8001152:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <I2Cdev_writeBytes+0x54>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	b29b      	uxth	r3, r3
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	b299      	uxth	r1, r3
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	b29a      	uxth	r2, r3
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	b29b      	uxth	r3, r3
 8001168:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800116c:	9402      	str	r4, [sp, #8]
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	f002 fdad 	bl	8003cd4 <HAL_I2C_Mem_Write>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	200000f0 	.word	0x200000f0

08001198 <BLE_SendInstruction>:

void BLE_Init(UART_HandleTypeDef* huart){
	huart_ble = huart;
}

void BLE_SendInstruction (AtInstruction_t instruction, char* parameter, UART_HandleTypeDef* huart) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	73fb      	strb	r3, [r7, #15]
	char *instructionPrefix = atInstructions[instruction];
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <BLE_SendInstruction+0x54>)
 80011aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ae:	617b      	str	r3, [r7, #20]
	char *completeInstruction = (char*) malloc(30 * sizeof(char));
 80011b0:	201e      	movs	r0, #30
 80011b2:	f005 f9f5 	bl	80065a0 <malloc>
 80011b6:	4603      	mov	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]
	sprintf(completeInstruction, "%s%s\r\n", instructionPrefix, parameter);
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <BLE_SendInstruction+0x58>)
 80011c0:	6938      	ldr	r0, [r7, #16]
 80011c2:	f005 fb2f 	bl	8006824 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t *) completeInstruction, strlen(completeInstruction), HAL_MAX_DELAY);
 80011c6:	6938      	ldr	r0, [r7, #16]
 80011c8:	f7ff f822 	bl	8000210 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	6939      	ldr	r1, [r7, #16]
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f004 fd8c 	bl	8005cf4 <HAL_UART_Transmit>
	free(completeInstruction);
 80011dc:	6938      	ldr	r0, [r7, #16]
 80011de:	f005 f9e7 	bl	80065b0 <free>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000
 80011f0:	08008504 	.word	0x08008504

080011f4 <BLE_ScanDevices>:

void BLE_ScanDevices(UART_HandleTypeDef* huart){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
//	char *allText = (char *) malloc(1000 * sizeof(char));
//	buffer = allText;
	uint32_t start_time = HAL_GetTick();
 80011fc:	f001 fe32 	bl	8002e64 <HAL_GetTick>
 8001200:	60f8      	str	r0, [r7, #12]
	BLE_SendInstruction(SCAN_SLAVES, "", huart);
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	491e      	ldr	r1, [pc, #120]	@ (8001280 <BLE_ScanDevices+0x8c>)
 8001206:	2005      	movs	r0, #5
 8001208:	f7ff ffc6 	bl	8001198 <BLE_SendInstruction>
	memset(uartBuffer, 0, sizeof(uartBuffer));
 800120c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001210:	2100      	movs	r1, #0
 8001212:	481c      	ldr	r0, [pc, #112]	@ (8001284 <BLE_ScanDevices+0x90>)
 8001214:	f005 fb26 	bl	8006864 <memset>
	while(!((strstr(uartBuffer, "STOP:SCAN") != NULL))) {
 8001218:	e01a      	b.n	8001250 <BLE_ScanDevices+0x5c>
		if (HAL_GetTick() - start_time >= 500) {
 800121a:	f001 fe23 	bl	8002e64 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001228:	d21a      	bcs.n	8001260 <BLE_ScanDevices+0x6c>
			break;
		}
		HAL_UART_Receive(huart, (uint8_t *) inputBuffer, 1, 500);
 800122a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800122e:	2201      	movs	r2, #1
 8001230:	4915      	ldr	r1, [pc, #84]	@ (8001288 <BLE_ScanDevices+0x94>)
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f004 fde9 	bl	8005e0a <HAL_UART_Receive>
//		strcat(allText, inputBuffer);
		if (strlen(uartBuffer) + 1 < MAX_SIZE_UART_BUFFER) {
 8001238:	4812      	ldr	r0, [pc, #72]	@ (8001284 <BLE_ScanDevices+0x90>)
 800123a:	f7fe ffe9 	bl	8000210 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	3301      	adds	r3, #1
 8001242:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001246:	d203      	bcs.n	8001250 <BLE_ScanDevices+0x5c>
		    strcat(uartBuffer, inputBuffer);
 8001248:	490f      	ldr	r1, [pc, #60]	@ (8001288 <BLE_ScanDevices+0x94>)
 800124a:	480e      	ldr	r0, [pc, #56]	@ (8001284 <BLE_ScanDevices+0x90>)
 800124c:	f005 fb12 	bl	8006874 <strcat>
	while(!((strstr(uartBuffer, "STOP:SCAN") != NULL))) {
 8001250:	490e      	ldr	r1, [pc, #56]	@ (800128c <BLE_ScanDevices+0x98>)
 8001252:	480c      	ldr	r0, [pc, #48]	@ (8001284 <BLE_ScanDevices+0x90>)
 8001254:	f005 fb3d 	bl	80068d2 <strstr>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0dd      	beq.n	800121a <BLE_ScanDevices+0x26>
 800125e:	e000      	b.n	8001262 <BLE_ScanDevices+0x6e>
			break;
 8001260:	bf00      	nop
		}
	}
//	strcpy(lendo,allText);
	JDY18Driver_ParseScanResponse(uartBuffer, &scannedDevices);
 8001262:	490b      	ldr	r1, [pc, #44]	@ (8001290 <BLE_ScanDevices+0x9c>)
 8001264:	4807      	ldr	r0, [pc, #28]	@ (8001284 <BLE_ScanDevices+0x90>)
 8001266:	f000 f8e9 	bl	800143c <JDY18Driver_ParseScanResponse>
	memset(uartBuffer, 0, sizeof(uartBuffer));
 800126a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800126e:	2100      	movs	r1, #0
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <BLE_ScanDevices+0x90>)
 8001272:	f005 faf7 	bl	8006864 <memset>
//	free(allText);
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	0800850c 	.word	0x0800850c
 8001284:	200003a4 	.word	0x200003a4
 8001288:	200000f4 	.word	0x200000f4
 800128c:	08008510 	.word	0x08008510
 8001290:	200000f8 	.word	0x200000f8

08001294 <JDY18Driver_LoadDeviceInfo>:

void JDY18Driver_LoadDeviceInfo(char* start, char* end, device_t* device)
{
 8001294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001298:	b091      	sub	sp, #68	@ 0x44
 800129a:	af00      	add	r7, sp, #0
 800129c:	6178      	str	r0, [r7, #20]
 800129e:	6139      	str	r1, [r7, #16]
 80012a0:	60fa      	str	r2, [r7, #12]
 80012a2:	466b      	mov	r3, sp
 80012a4:	60bb      	str	r3, [r7, #8]

    if (start == NULL || end == NULL || device == NULL) {
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80c0 	beq.w	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80bc 	beq.w	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80b8 	beq.w	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Protege contra ponteiros nulos
    }

    size_t size = end - start;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (size <= 7) { // Tamanho insuficiente para conter dados válidos
 80012c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	f240 80a7 	bls.w	800141c <JDY18Driver_LoadDeviceInfo+0x188>
        return;
    }

    char temp[size + 1]; // Buffer temporário
 80012ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d0:	1c5e      	adds	r6, r3, #1
 80012d2:	4633      	mov	r3, r6
 80012d4:	3b01      	subs	r3, #1
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012d8:	2300      	movs	r3, #0
 80012da:	603e      	str	r6, [r7, #0]
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	00cb      	lsls	r3, r1, #3
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012f0:	6839      	ldr	r1, [r7, #0]
 80012f2:	00ca      	lsls	r2, r1, #3
 80012f4:	2300      	movs	r3, #0
 80012f6:	46b2      	mov	sl, r6
 80012f8:	469b      	mov	fp, r3
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001306:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800130a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800130e:	1df3      	adds	r3, r6, #7
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	ebad 0d03 	sub.w	sp, sp, r3
 8001318:	466b      	mov	r3, sp
 800131a:	3300      	adds	r3, #0
 800131c:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(temp, start, size);
 800131e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001324:	f005 fb28 	bl	8006978 <memcpy>
    temp[size] = '\0'; // Garante que a string esteja terminada em nulo
 8001328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800132a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800132c:	4413      	add	r3, r2
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]

    char* macAddressPointer = temp + 7; // MAC começa após "+DEV:"
 8001332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001334:	3307      	adds	r3, #7
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
    if (macAddressPointer >= temp + size || macAddressPointer + MAC_ADDRESS_SIZE > temp + size) {
 8001338:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800133a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800133c:	4413      	add	r3, r2
 800133e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001340:	429a      	cmp	r2, r3
 8001342:	d26d      	bcs.n	8001420 <JDY18Driver_LoadDeviceInfo+0x18c>
 8001344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001346:	f103 020c 	add.w	r2, r3, #12
 800134a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800134c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800134e:	440b      	add	r3, r1
 8001350:	429a      	cmp	r2, r3
 8001352:	d865      	bhi.n	8001420 <JDY18Driver_LoadDeviceInfo+0x18c>
        return; // Verifica se o MAC está dentro dos limites
    }

    char* rssiPointer = macAddressPointer + MAC_ADDRESS_SIZE + 1; // RSSI após MAC
 8001354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001356:	330d      	adds	r3, #13
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (rssiPointer >= temp + size) {
 800135a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800135c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800135e:	4413      	add	r3, r2
 8001360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001362:	429a      	cmp	r2, r3
 8001364:	d25e      	bcs.n	8001424 <JDY18Driver_LoadDeviceInfo+0x190>
        return; // Verifica se o RSSI está dentro dos limites
    }

    char* namePointer = strstr(rssiPointer, ",");
 8001366:	212c      	movs	r1, #44	@ 0x2c
 8001368:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800136a:	f005 fa92 	bl	8006892 <strchr>
 800136e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (namePointer == NULL) {
 8001370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001372:	2b00      	cmp	r3, #0
 8001374:	d058      	beq.n	8001428 <JDY18Driver_LoadDeviceInfo+0x194>
        return; // Nome inválido ou delimitador ausente
    }
    namePointer += 1; // Salta a vírgula
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	3301      	adds	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Calcula o tamanho do RSSI
    size_t rssiSize = namePointer - rssiPointer - 1;
 800137c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800137e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
    if (rssiSize >= sizeof(temp)) {
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	429e      	cmp	r6, r3
 800138a:	d94f      	bls.n	800142c <JDY18Driver_LoadDeviceInfo+0x198>
        return; // Tamanho do RSSI fora dos limites
    }

    // Buffers temporários
    char rssiStr[rssiSize + 1];
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	1c59      	adds	r1, r3, #1
 8001390:	460b      	mov	r3, r1
 8001392:	3b01      	subs	r3, #1
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	2300      	movs	r3, #0
 8001398:	4688      	mov	r8, r1
 800139a:	4699      	mov	r9, r3
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013b0:	2300      	movs	r3, #0
 80013b2:	460c      	mov	r4, r1
 80013b4:	461d      	mov	r5, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	00eb      	lsls	r3, r5, #3
 80013c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013c4:	00e2      	lsls	r2, r4, #3
 80013c6:	1dcb      	adds	r3, r1, #7
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	ebad 0d03 	sub.w	sp, sp, r3
 80013d0:	466b      	mov	r3, sp
 80013d2:	3300      	adds	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    memcpy(rssiStr, rssiPointer, rssiSize);
 80013d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80013da:	69f8      	ldr	r0, [r7, #28]
 80013dc:	f005 facc 	bl	8006978 <memcpy>
    rssiStr[rssiSize] = '\0';
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	4413      	add	r3, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]

    // Copia os dados para o dispositivo
//    memset(device->mac, 0, MAC_ADDRESS_SIZE); // Limpa o MAC antes de copiar
//    memcpy(device->mac, macAddressPointer, MAC_ADDRESS_SIZE);

    memset(device->name, 0, MAX_DEVICE_NAME_SIZE); // Limpa o nome antes de copiar
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2232      	movs	r2, #50	@ 0x32
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 fa37 	bl	8006864 <memset>
    strncpy(device->name, namePointer, MAX_DEVICE_NAME_SIZE - 1);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2231      	movs	r2, #49	@ 0x31
 80013fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013fc:	4618      	mov	r0, r3
 80013fe:	f005 fa55 	bl	80068ac <strncpy>
    device->name[MAX_DEVICE_NAME_SIZE - 1] = '\0'; // Garante terminação nula
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    device->rssi = atoi(rssiStr); // Converte RSSI para inteiro
 800140a:	69f8      	ldr	r0, [r7, #28]
 800140c:	f005 f8c4 	bl	8006598 <atoi>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40
 8001416:	f8d7 d008 	ldr.w	sp, [r7, #8]
 800141a:	e00a      	b.n	8001432 <JDY18Driver_LoadDeviceInfo+0x19e>
        return;
 800141c:	bf00      	nop
 800141e:	e006      	b.n	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Verifica se o MAC está dentro dos limites
 8001420:	bf00      	nop
 8001422:	e004      	b.n	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Verifica se o RSSI está dentro dos limites
 8001424:	bf00      	nop
 8001426:	e002      	b.n	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Nome inválido ou delimitador ausente
 8001428:	bf00      	nop
 800142a:	e000      	b.n	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Tamanho do RSSI fora dos limites
 800142c:	bf00      	nop
        return; // Protege contra ponteiros nulos
 800142e:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8001432:	3744      	adds	r7, #68	@ 0x44
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800143c <JDY18Driver_ParseScanResponse>:

void JDY18Driver_ParseScanResponse(char* scanResponse, scan_t* scan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
//			scan->size++;
//		}
//	}

    char *start, *end;
    memset(scan, 0, sizeof(scan_t));
 8001446:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 800144a:	2100      	movs	r1, #0
 800144c:	6838      	ldr	r0, [r7, #0]
 800144e:	f005 fa09 	bl	8006864 <memset>
    scan->size = 0;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8

    if ((start = strstr(scanResponse, INIT_MODULE_RESPONSE_SCAN))) {
 800145a:	4926      	ldr	r1, [pc, #152]	@ (80014f4 <JDY18Driver_ParseScanResponse+0xb8>)
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f005 fa38 	bl	80068d2 <strstr>
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d040      	beq.n	80014ec <JDY18Driver_ParseScanResponse+0xb0>
        while ((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 800146a:	e016      	b.n	800149a <JDY18Driver_ParseScanResponse+0x5e>
            JDY18Driver_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f8d3 22a8 	ldr.w	r2, [r3, #680]	@ 0x2a8
 8001472:	4613      	mov	r3, r2
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	461a      	mov	r2, r3
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff ff06 	bl	8001294 <JDY18Driver_LoadDeviceInfo>
            start = end;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60fb      	str	r3, [r7, #12]
            scan->size++;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
        while ((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3301      	adds	r3, #1
 800149e:	4915      	ldr	r1, [pc, #84]	@ (80014f4 <JDY18Driver_ParseScanResponse+0xb8>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 fa16 	bl	80068d2 <strstr>
 80014a6:	60b8      	str	r0, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1de      	bne.n	800146c <JDY18Driver_ParseScanResponse+0x30>
        }
        // Verifica se o próximo caractere após o último marcador é nulo
        if (*(start + strlen(INIT_MODULE_RESPONSE_SCAN)) == '\0') {
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3305      	adds	r3, #5
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d119      	bne.n	80014ec <JDY18Driver_ParseScanResponse+0xb0>
            JDY18Driver_LoadDeviceInfo(start, start + strlen(start), &scan->devices[scan->size]);
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f7fe fea9 	bl	8000210 <strlen>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1899      	adds	r1, r3, r2
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f8d3 22a8 	ldr.w	r2, [r3, #680]	@ 0x2a8
 80014ca:	4613      	mov	r3, r2
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	461a      	mov	r2, r3
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff fedb 	bl	8001294 <JDY18Driver_LoadDeviceInfo>
            scan->size++;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
        }
    }
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	0800851c 	.word	0x0800851c

080014f8 <BLE_GetScannedDevices>:

void BLE_GetScannedDevices(scan_t* devices) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	*devices = scannedDevices;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a06      	ldr	r2, [pc, #24]	@ (800151c <BLE_GetScannedDevices+0x24>)
 8001504:	4618      	mov	r0, r3
 8001506:	4611      	mov	r1, r2
 8001508:	f44f 732b 	mov.w	r3, #684	@ 0x2ac
 800150c:	461a      	mov	r2, r3
 800150e:	f005 fa33 	bl	8006978 <memcpy>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200000f8 	.word	0x200000f8

08001520 <PID_Create>:
#include <math.h>
#include "PID.h"

void PID_Create(PID_Controller_t *controller, float kp, float ki, float kd,
		int periodMs) {
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6178      	str	r0, [r7, #20]
 8001528:	ed87 0a04 	vstr	s0, [r7, #16]
 800152c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001530:	ed87 1a02 	vstr	s2, [r7, #8]
 8001534:	6079      	str	r1, [r7, #4]
	controller->Kp = kp;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	601a      	str	r2, [r3, #0]
	controller->Ki = ki;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	605a      	str	r2, [r3, #4]
	controller->Kd = kd;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	609a      	str	r2, [r3, #8]

	controller->setpoint = 0;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
	controller->measured = 0;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	611a      	str	r2, [r3, #16]

	controller->errorIntegral = 0;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	@ 0x24
	controller->errorDerivative = 0;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28

	controller->errorArray[PID_CURRENT] = 0;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
	controller->errorArray[PID_LAST] = 0;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	621a      	str	r2, [r3, #32]

	controller->periodMs = periodMs;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	62da      	str	r2, [r3, #44]	@ 0x2c

	// no saturation limits by default
	controller->maxOutput = INFINITY;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001584:	615a      	str	r2, [r3, #20]
	controller->minOutput = -INFINITY;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <PID_Create+0x78>)
 800158a:	619a      	str	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	ff800000 	.word	0xff800000

0800159c <PID_SetSaturationLimits>:

void PID_SetSaturationLimits(PID_Controller_t *controller, float min, float max) {
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80015a8:	edc7 0a01 	vstr	s1, [r7, #4]
	controller->minOutput = min;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	619a      	str	r2, [r3, #24]
	controller->maxOutput = max;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	615a      	str	r2, [r3, #20]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <PID_SetSetpoint>:

void PID_SetSetpoint(PID_Controller_t *controller, float setpoint) {
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
	controller->setpoint = setpoint;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	60da      	str	r2, [r3, #12]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PID_ProcessInput>:

void PID_ProcessInput(PID_Controller_t *controller, float input) {
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	ed87 0a00 	vstr	s0, [r7]
	float error = controller->setpoint - input;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80015f4:	edd7 7a00 	vldr	s15, [r7]
 80015f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fc:	edc7 7a03 	vstr	s15, [r7, #12]

	controller->errorIntegral += (error * controller->periodMs)/2;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001612:	edd7 7a03 	vldr	s15, [r7, #12]
 8001616:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800161a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800161e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	controller->errorArray[PID_LAST] = controller->errorArray[PID_CURRENT];
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	621a      	str	r2, [r3, #32]
	controller->errorArray[PID_CURRENT] = error;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	61da      	str	r2, [r3, #28]

	controller->errorDerivative = (controller->errorArray[PID_CURRENT]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	ed93 7a07 	vldr	s14, [r3, #28]
			- controller->errorArray[PID_LAST]) / controller->periodMs;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edd3 7a08 	vldr	s15, [r3, #32]
 8001646:	ee77 6a67 	vsub.f32	s13, s14, s15
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
	controller->errorDerivative = (controller->errorArray[PID_CURRENT]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <PID_CalculateControlAction>:

float PID_CalculateControlAction(PID_Controller_t *controller) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	float P = controller->Kp * controller->errorArray[PID_CURRENT];
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001684:	edc7 7a05 	vstr	s15, [r7, #20]
	float I = controller->Ki * controller->errorIntegral;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	ed93 7a01 	vldr	s14, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	edc7 7a04 	vstr	s15, [r7, #16]
	float D = controller->Kd * controller->errorDerivative;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	ed93 7a02 	vldr	s14, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ac:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID = __PID_SaturateOutput(controller, P + I + D);
 80016b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80016b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	eeb0 0a67 	vmov.f32	s0, s15
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f80a 	bl	80016e2 <__PID_SaturateOutput>
 80016ce:	ed87 0a02 	vstr	s0, [r7, #8]

	return PID;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	ee07 3a90 	vmov	s15, r3
}
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <__PID_SaturateOutput>:

float __PID_SaturateOutput(PID_Controller_t *controller, float originalOutput) {
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	ed87 0a00 	vstr	s0, [r7]
	// limit integral error
	if (controller->errorIntegral * controller->Ki > controller->maxOutput)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80016fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	edd3 7a05 	vldr	s15, [r3, #20]
 8001704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	dd0a      	ble.n	8001724 <__PID_SaturateOutput+0x42>
		controller->errorIntegral = controller->maxOutput/controller->Ki;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	edd3 6a05 	vldr	s13, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	ed93 7a01 	vldr	s14, [r3, #4]
 800171a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (controller->errorIntegral * controller->Ki < controller->minOutput)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edd3 7a06 	vldr	s15, [r3, #24]
 800173a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	d50a      	bpl.n	800175a <__PID_SaturateOutput+0x78>
			controller->errorIntegral = controller->minOutput/controller->Ki;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 6a06 	vldr	s13, [r3, #24]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (originalOutput > controller->maxOutput)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001760:	ed97 7a00 	vldr	s14, [r7]
 8001764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176c:	dd02      	ble.n	8001774 <__PID_SaturateOutput+0x92>
		return controller->maxOutput;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	e00d      	b.n	8001790 <__PID_SaturateOutput+0xae>
	if (originalOutput < controller->minOutput)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	edd3 7a06 	vldr	s15, [r3, #24]
 800177a:	ed97 7a00 	vldr	s14, [r7]
 800177e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d502      	bpl.n	800178e <__PID_SaturateOutput+0xac>
		return controller->minOutput;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	e000      	b.n	8001790 <__PID_SaturateOutput+0xae>
	return originalOutput;
 800178e:	683b      	ldr	r3, [r7, #0]
}
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <readDirection>:
	    escY = (float) varX / varY;
	  }
}

// mostra o ângulo para o qual o barco está apontando, sendo 0º o Norte
int16_t readDirection(void) {
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
  int16_t x, y, z;
  int16_t PI = 3.14;
 80017aa:	2303      	movs	r3, #3
 80017ac:	827b      	strh	r3, [r7, #18]

  HMC5883L_getHeading(&x, &y, &z);
 80017ae:	1cba      	adds	r2, r7, #2
 80017b0:	1d39      	adds	r1, r7, #4
 80017b2:	1dbb      	adds	r3, r7, #6
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fc21 	bl	8000ffc <HMC5883L_getHeading>

  // Registra mínimo e máximo para a calibração
  if (x < xMin) {
 80017ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017be:	4b7a      	ldr	r3, [pc, #488]	@ (80019a8 <readDirection+0x204>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	da03      	bge.n	80017d0 <readDirection+0x2c>
    xMin = x;
 80017c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017cc:	4b76      	ldr	r3, [pc, #472]	@ (80019a8 <readDirection+0x204>)
 80017ce:	801a      	strh	r2, [r3, #0]
  }
  if (xMax < x) {
 80017d0:	4b76      	ldr	r3, [pc, #472]	@ (80019ac <readDirection+0x208>)
 80017d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017da:	429a      	cmp	r2, r3
 80017dc:	da03      	bge.n	80017e6 <readDirection+0x42>
    xMax = x;
 80017de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017e2:	4b72      	ldr	r3, [pc, #456]	@ (80019ac <readDirection+0x208>)
 80017e4:	801a      	strh	r2, [r3, #0]
  }
  if (y < yMin) {
 80017e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017ea:	4b71      	ldr	r3, [pc, #452]	@ (80019b0 <readDirection+0x20c>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	da03      	bge.n	80017fc <readDirection+0x58>
    yMin = y;
 80017f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017f8:	4b6d      	ldr	r3, [pc, #436]	@ (80019b0 <readDirection+0x20c>)
 80017fa:	801a      	strh	r2, [r3, #0]
  }
  if (yMax < y) {
 80017fc:	4b6d      	ldr	r3, [pc, #436]	@ (80019b4 <readDirection+0x210>)
 80017fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001802:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	da03      	bge.n	8001812 <readDirection+0x6e>
    yMax = y;
 800180a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800180e:	4b69      	ldr	r3, [pc, #420]	@ (80019b4 <readDirection+0x210>)
 8001810:	801a      	strh	r2, [r3, #0]
  }

  // corrige e calcula o angulo em radianos
  float xC = (x - offX) * escX;
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001816:	461a      	mov	r2, r3
 8001818:	4b67      	ldr	r3, [pc, #412]	@ (80019b8 <readDirection+0x214>)
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001828:	4b64      	ldr	r3, [pc, #400]	@ (80019bc <readDirection+0x218>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001832:	edc7 7a03 	vstr	s15, [r7, #12]
  float yC = (y - offY) * escY;
 8001836:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800183a:	461a      	mov	r2, r3
 800183c:	4b60      	ldr	r3, [pc, #384]	@ (80019c0 <readDirection+0x21c>)
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184c:	4b5d      	ldr	r3, [pc, #372]	@ (80019c4 <readDirection+0x220>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	edc7 7a02 	vstr	s15, [r7, #8]
  float angulo = atan2 (xC, yC) + declination;
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7fe fe94 	bl	8000588 <__aeabi_f2d>
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
 8001864:	68b8      	ldr	r0, [r7, #8]
 8001866:	f7fe fe8f 	bl	8000588 <__aeabi_f2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	ec43 2b11 	vmov	d1, r2, r3
 8001872:	ec45 4b10 	vmov	d0, r4, r5
 8001876:	f005 fc0d 	bl	8007094 <atan2>
 800187a:	ec55 4b10 	vmov	r4, r5, d0
 800187e:	4b52      	ldr	r3, [pc, #328]	@ (80019c8 <readDirection+0x224>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe80 	bl	8000588 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fd1c 	bl	80002cc <__adddf3>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f9a4 	bl	8000be8 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	617b      	str	r3, [r7, #20]

  // Garante que está entre 0 e 2*PI
  if (angulo < 0) {
 80018a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d51c      	bpl.n	80018ec <readDirection+0x148>
    angulo += 2.0 * PI;
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7fe fe68 	bl	8000588 <__aeabi_f2d>
 80018b8:	4604      	mov	r4, r0
 80018ba:	460d      	mov	r5, r1
 80018bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe4f 	bl	8000564 <__aeabi_i2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	f7fe fcff 	bl	80002cc <__adddf3>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7fe fcf9 	bl	80002cc <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f981 	bl	8000be8 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e029      	b.n	8001940 <readDirection+0x19c>
  } else if (angulo >= 2 * PI) {
 80018ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80018fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	db1b      	blt.n	8001940 <readDirection+0x19c>
    angulo -= 2.0 * PI;
 8001908:	6978      	ldr	r0, [r7, #20]
 800190a:	f7fe fe3d 	bl	8000588 <__aeabi_f2d>
 800190e:	4604      	mov	r4, r0
 8001910:	460d      	mov	r5, r1
 8001912:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe24 	bl	8000564 <__aeabi_i2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	f7fe fcd4 	bl	80002cc <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4620      	mov	r0, r4
 800192a:	4629      	mov	r1, r5
 800192c:	f7fe fccc 	bl	80002c8 <__aeabi_dsub>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f956 	bl	8000be8 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	617b      	str	r3, [r7, #20]
  }

  // Converte para graus
  return round (360 - ((angulo * 180.0) / PI));
 8001940:	6978      	ldr	r0, [r7, #20]
 8001942:	f7fe fe21 	bl	8000588 <__aeabi_f2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <readDirection+0x228>)
 800194c:	f7fe fe74 	bl	8000638 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4614      	mov	r4, r2
 8001956:	461d      	mov	r5, r3
 8001958:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fe01 	bl	8000564 <__aeabi_i2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe ff8f 	bl	800088c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	4916      	ldr	r1, [pc, #88]	@ (80019d0 <readDirection+0x22c>)
 8001978:	f7fe fca6 	bl	80002c8 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	ec43 2b17 	vmov	d7, r2, r3
 8001984:	eeb0 0a47 	vmov.f32	s0, s14
 8001988:	eef0 0a67 	vmov.f32	s1, s15
 800198c:	f005 fc00 	bl	8007190 <round>
 8001990:	ec53 2b10 	vmov	r2, r3, d0
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f8fe 	bl	8000b98 <__aeabi_d2iz>
 800199c:	4603      	mov	r3, r0
 800199e:	b21b      	sxth	r3, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	2000078c 	.word	0x2000078c
 80019ac:	20000790 	.word	0x20000790
 80019b0:	2000078e 	.word	0x2000078e
 80019b4:	20000792 	.word	0x20000792
 80019b8:	20000794 	.word	0x20000794
 80019bc:	20000020 	.word	0x20000020
 80019c0:	20000796 	.word	0x20000796
 80019c4:	20000024 	.word	0x20000024
 80019c8:	20000798 	.word	0x20000798
 80019cc:	40668000 	.word	0x40668000
 80019d0:	40768000 	.word	0x40768000

080019d4 <changeDCMotorDirection>:
    speed = 16800;
  __HAL_TIM_SET_COMPARE(&htim, TIM_CHANNEL_2, speed);
}

void changeDCMotorDirection(char d)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if (d == 'f')
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b66      	cmp	r3, #102	@ 0x66
 80019e2:	d13b      	bne.n	8001a5c <changeDCMotorDirection+0x88>
  {
    // Vetor dos bits a serem enviados
    uint8_t data_bits[] = {0, 1, 0, 1, 0, 1, 0, 1};
 80019e4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ae0 <changeDCMotorDirection+0x10c>)
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ee:	e883 0003 	stmia.w	r3, {r0, r1}

    // Ativar troca dos valores
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f8:	483a      	ldr	r0, [pc, #232]	@ (8001ae4 <changeDCMotorDirection+0x110>)
 80019fa:	f001 fcdd 	bl	80033b8 <HAL_GPIO_WritePin>

    // Loop para enviar os bits
    for (uint8_t i = 0; i < 8; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	77fb      	strb	r3, [r7, #31]
 8001a02:	e01a      	b.n	8001a3a <changeDCMotorDirection+0x66>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, data_bits[i]); // Configura o dado
 8001a04:	7ffb      	ldrb	r3, [r7, #31]
 8001a06:	3320      	adds	r3, #32
 8001a08:	443b      	add	r3, r7
 8001a0a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a14:	4833      	ldr	r0, [pc, #204]	@ (8001ae4 <changeDCMotorDirection+0x110>)
 8001a16:	f001 fccf 	bl	80033b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);            // Pulso de clock
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	4832      	ldr	r0, [pc, #200]	@ (8001ae8 <changeDCMotorDirection+0x114>)
 8001a20:	f001 fcca 	bl	80033b8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f001 fa29 	bl	8002e7c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // Finaliza o clock
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	482e      	ldr	r0, [pc, #184]	@ (8001ae8 <changeDCMotorDirection+0x114>)
 8001a30:	f001 fcc2 	bl	80033b8 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 8; i++)
 8001a34:	7ffb      	ldrb	r3, [r7, #31]
 8001a36:	3301      	adds	r3, #1
 8001a38:	77fb      	strb	r3, [r7, #31]
 8001a3a:	7ffb      	ldrb	r3, [r7, #31]
 8001a3c:	2b07      	cmp	r3, #7
 8001a3e:	d9e1      	bls.n	8001a04 <changeDCMotorDirection+0x30>
    }

    // Atualizar saída
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001a40:	2201      	movs	r2, #1
 8001a42:	2140      	movs	r1, #64	@ 0x40
 8001a44:	4827      	ldr	r0, [pc, #156]	@ (8001ae4 <changeDCMotorDirection+0x110>)
 8001a46:	f001 fcb7 	bl	80033b8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f001 fa16 	bl	8002e7c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2140      	movs	r1, #64	@ 0x40
 8001a54:	4823      	ldr	r0, [pc, #140]	@ (8001ae4 <changeDCMotorDirection+0x110>)
 8001a56:	f001 fcaf 	bl	80033b8 <HAL_GPIO_WritePin>
    // Atualizar saída
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
    HAL_Delay(1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
  }
}
 8001a5a:	e03d      	b.n	8001ad8 <changeDCMotorDirection+0x104>
  else if (d == 't')
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b74      	cmp	r3, #116	@ 0x74
 8001a60:	d13a      	bne.n	8001ad8 <changeDCMotorDirection+0x104>
    uint8_t data_bits[] = {1, 0, 1, 0, 1, 0, 1, 0};
 8001a62:	4a22      	ldr	r2, [pc, #136]	@ (8001aec <changeDCMotorDirection+0x118>)
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a6c:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a76:	481b      	ldr	r0, [pc, #108]	@ (8001ae4 <changeDCMotorDirection+0x110>)
 8001a78:	f001 fc9e 	bl	80033b8 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 8; i++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	77bb      	strb	r3, [r7, #30]
 8001a80:	e01a      	b.n	8001ab8 <changeDCMotorDirection+0xe4>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, data_bits[i]); // Configura o dado
 8001a82:	7fbb      	ldrb	r3, [r7, #30]
 8001a84:	3320      	adds	r3, #32
 8001a86:	443b      	add	r3, r7
 8001a88:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a92:	4814      	ldr	r0, [pc, #80]	@ (8001ae4 <changeDCMotorDirection+0x110>)
 8001a94:	f001 fc90 	bl	80033b8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);            // Pulso de clock
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	4812      	ldr	r0, [pc, #72]	@ (8001ae8 <changeDCMotorDirection+0x114>)
 8001a9e:	f001 fc8b 	bl	80033b8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f001 f9ea 	bl	8002e7c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // Finaliza o clock
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2120      	movs	r1, #32
 8001aac:	480e      	ldr	r0, [pc, #56]	@ (8001ae8 <changeDCMotorDirection+0x114>)
 8001aae:	f001 fc83 	bl	80033b8 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 8; i++)
 8001ab2:	7fbb      	ldrb	r3, [r7, #30]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	77bb      	strb	r3, [r7, #30]
 8001ab8:	7fbb      	ldrb	r3, [r7, #30]
 8001aba:	2b07      	cmp	r3, #7
 8001abc:	d9e1      	bls.n	8001a82 <changeDCMotorDirection+0xae>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2140      	movs	r1, #64	@ 0x40
 8001ac2:	4808      	ldr	r0, [pc, #32]	@ (8001ae4 <changeDCMotorDirection+0x110>)
 8001ac4:	f001 fc78 	bl	80033b8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f001 f9d7 	bl	8002e7c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2140      	movs	r1, #64	@ 0x40
 8001ad2:	4804      	ldr	r0, [pc, #16]	@ (8001ae4 <changeDCMotorDirection+0x110>)
 8001ad4:	f001 fc70 	bl	80033b8 <HAL_GPIO_WritePin>
}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	08008524 	.word	0x08008524
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	0800852c 	.word	0x0800852c

08001af0 <setPWM>:
 */

#include "boatServo.h"

void setPWM(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	@ 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	4611      	mov	r1, r2
 8001afc:	461a      	mov	r2, r3
 8001afe:	460b      	mov	r3, r1
 8001b00:	80fb      	strh	r3, [r7, #6]
 8001b02:	4613      	mov	r3, r2
 8001b04:	80bb      	strh	r3, [r7, #4]
  HAL_TIM_PWM_Stop(timer, channel); // stop generation of pwm
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f003 fc73 	bl	80053f4 <HAL_TIM_PWM_Stop>
  TIM_OC_InitTypeDef sConfigOC;
  timer->Init.Period = period; // set the period duration
 8001b0e:	88fa      	ldrh	r2, [r7, #6]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Init(timer);   // reinititialise with new period value
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f003 fb55 	bl	80051c4 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1a:	2360      	movs	r3, #96	@ 0x60
 8001b1c:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = pulse; // set the pulse duration
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	4619      	mov	r1, r3
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f003 fcce 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(timer, channel); // start pwm generation
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f003 fb92 	bl	8005264 <HAL_TIM_PWM_Start>
}
 8001b40:	bf00      	nop
 8001b42:	3730      	adds	r7, #48	@ 0x30
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <setServoPosition>:

void setServoPosition(uint16_t angle, TIM_HandleTypeDef* htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	80fb      	strh	r3, [r7, #6]
  // Define pulse and angle limits
  uint16_t pulseMin = 44;
 8001b54:	232c      	movs	r3, #44	@ 0x2c
 8001b56:	82fb      	strh	r3, [r7, #22]
  uint16_t pulseMax = 144;
 8001b58:	2390      	movs	r3, #144	@ 0x90
 8001b5a:	82bb      	strh	r3, [r7, #20]
  uint16_t angleMin = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	827b      	strh	r3, [r7, #18]
  uint16_t angleMax = 180;
 8001b60:	23b4      	movs	r3, #180	@ 0xb4
 8001b62:	823b      	strh	r3, [r7, #16]

  // Ensure the angle is within limits
  if (angle > angleMax)
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	8a3b      	ldrh	r3, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d901      	bls.n	8001b70 <setServoPosition+0x28>
  {
    angle = angleMax;
 8001b6c:	8a3b      	ldrh	r3, [r7, #16]
 8001b6e:	80fb      	strh	r3, [r7, #6]
  }

  if (angle < angleMin)
 8001b70:	88fa      	ldrh	r2, [r7, #6]
 8001b72:	8a7b      	ldrh	r3, [r7, #18]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d201      	bcs.n	8001b7c <setServoPosition+0x34>
  {
    angle = angleMin;
 8001b78:	8a7b      	ldrh	r3, [r7, #18]
 8001b7a:	80fb      	strh	r3, [r7, #6]
  }

  // Convert the angle to pulse value
  uint16_t pulse = pulseMin + ((pulseMax - pulseMin) * angle) / (angleMax - angleMin);
 8001b7c:	8aba      	ldrh	r2, [r7, #20]
 8001b7e:	8afb      	ldrh	r3, [r7, #22]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	88fa      	ldrh	r2, [r7, #6]
 8001b84:	fb03 f202 	mul.w	r2, r3, r2
 8001b88:	8a39      	ldrh	r1, [r7, #16]
 8001b8a:	8a7b      	ldrh	r3, [r7, #18]
 8001b8c:	1acb      	subs	r3, r1, r3
 8001b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	8afb      	ldrh	r3, [r7, #22]
 8001b96:	4413      	add	r3, r2
 8001b98:	81fb      	strh	r3, [r7, #14]

  setPWM(htim, TIM_CHANNEL_1, 12500, pulse);
 8001b9a:	89fb      	ldrh	r3, [r7, #14]
 8001b9c:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	6838      	ldr	r0, [r7, #0]
 8001ba4:	f7ff ffa4 	bl	8001af0 <setPWM>
}
 8001ba8:	bf00      	nop
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <DataFilterService_InitBuffer>:
 */

#include "data_filter_service.h"

void DataFilterService_InitBuffer(buffer_t* buffer)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	buffer->size = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	buffer->sum = 0;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	629a      	str	r2, [r3, #40]	@ 0x28
	buffer->position = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <DataFilterService_MovingAverage>:

float DataFilterService_MovingAverage(buffer_t* buffer, float newValue) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	ed87 0a00 	vstr	s0, [r7]
	if (buffer->size <= MAX_BUFFER_SIZE) buffer->size++;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	2b0a      	cmp	r3, #10
 8001bea:	d804      	bhi.n	8001bf6 <DataFilterService_MovingAverage+0x1e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  buffer->sum += newValue - buffer->data[buffer->position];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	edd3 7a00 	vldr	s15, [r3]
 8001c0a:	edd7 6a00 	vldr	s13, [r7]
 8001c0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  buffer->data[buffer->position] = newValue;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	601a      	str	r2, [r3, #0]
  buffer->position = (buffer->position + 1) % MAX_BUFFER_SIZE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <DataFilterService_MovingAverage+0x98>)
 8001c32:	fba3 2301 	umull	r2, r3, r3, r1
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	1aca      	subs	r2, r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	631a      	str	r2, [r3, #48]	@ 0x30
  return (float)buffer->sum / buffer->size;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001c60:	eeb0 0a67 	vmov.f32	s0, s15
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	cccccccd 	.word	0xcccccccd
 8001c74:	00000000 	.word	0x00000000

08001c78 <LocationService_Init>:

float b1Distance = 0, b2Distance = 0, b3Distance = 0;
float b1OldDistance = -1, b2OldDistance = -1, b3OldDistance = -1;

void LocationService_Init(UART_HandleTypeDef *huart)
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	DataFilterService_InitBuffer(&b1Buffer);
 8001c80:	4861      	ldr	r0, [pc, #388]	@ (8001e08 <LocationService_Init+0x190>)
 8001c82:	f7ff ff95 	bl	8001bb0 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b2Buffer);
 8001c86:	4861      	ldr	r0, [pc, #388]	@ (8001e0c <LocationService_Init+0x194>)
 8001c88:	f7ff ff92 	bl	8001bb0 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b3Buffer);
 8001c8c:	4860      	ldr	r0, [pc, #384]	@ (8001e10 <LocationService_Init+0x198>)
 8001c8e:	f7ff ff8f 	bl	8001bb0 <DataFilterService_InitBuffer>

	trilaterationCalcCPartial = - pow(slaveBeaconLocationB1.longitude, 2) + pow(slaveBeaconLocationB2.longitude, 2) - pow(slaveBeaconLocationB1.latitude, 2) + pow(slaveBeaconLocationB2.latitude, 2);
 8001c92:	4b60      	ldr	r3, [pc, #384]	@ (8001e14 <LocationService_Init+0x19c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc76 	bl	8000588 <__aeabi_f2d>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8001e00 <LocationService_Init+0x188>
 8001ca4:	ec43 2b10 	vmov	d0, r2, r3
 8001ca8:	f005 f9f6 	bl	8007098 <pow>
 8001cac:	ec55 4b10 	vmov	r4, r5, d0
 8001cb0:	4b59      	ldr	r3, [pc, #356]	@ (8001e18 <LocationService_Init+0x1a0>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc67 	bl	8000588 <__aeabi_f2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	ed9f 1b50 	vldr	d1, [pc, #320]	@ 8001e00 <LocationService_Init+0x188>
 8001cc2:	ec43 2b10 	vmov	d0, r2, r3
 8001cc6:	f005 f9e7 	bl	8007098 <pow>
 8001cca:	ec53 2b10 	vmov	r2, r3, d0
 8001cce:	4620      	mov	r0, r4
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	f7fe faf9 	bl	80002c8 <__aeabi_dsub>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4614      	mov	r4, r2
 8001cdc:	461d      	mov	r5, r3
 8001cde:	4b4e      	ldr	r3, [pc, #312]	@ (8001e18 <LocationService_Init+0x1a0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc50 	bl	8000588 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ed9f 1b44 	vldr	d1, [pc, #272]	@ 8001e00 <LocationService_Init+0x188>
 8001cf0:	ec43 2b10 	vmov	d0, r2, r3
 8001cf4:	f005 f9d0 	bl	8007098 <pow>
 8001cf8:	ec53 2b10 	vmov	r2, r3, d0
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f7fe fae2 	bl	80002c8 <__aeabi_dsub>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4614      	mov	r4, r2
 8001d0a:	461d      	mov	r5, r3
 8001d0c:	4b41      	ldr	r3, [pc, #260]	@ (8001e14 <LocationService_Init+0x19c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc39 	bl	8000588 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8001e00 <LocationService_Init+0x188>
 8001d1e:	ec43 2b10 	vmov	d0, r2, r3
 8001d22:	f005 f9b9 	bl	8007098 <pow>
 8001d26:	ec53 2b10 	vmov	r2, r3, d0
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	f7fe facd 	bl	80002cc <__adddf3>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe ff55 	bl	8000be8 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a36      	ldr	r2, [pc, #216]	@ (8001e1c <LocationService_Init+0x1a4>)
 8001d42:	6013      	str	r3, [r2, #0]
	trilaterationCalcFPartial = - pow(slaveBeaconLocationB2.longitude, 2) + pow(slaveBeaconLocationB3.longitude, 2) - pow(slaveBeaconLocationB2.latitude, 2) + pow(slaveBeaconLocationB3.latitude, 2);
 8001d44:	4b36      	ldr	r3, [pc, #216]	@ (8001e20 <LocationService_Init+0x1a8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc1d 	bl	8000588 <__aeabi_f2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8001e00 <LocationService_Init+0x188>
 8001d56:	ec43 2b10 	vmov	d0, r2, r3
 8001d5a:	f005 f99d 	bl	8007098 <pow>
 8001d5e:	ec55 4b10 	vmov	r4, r5, d0
 8001d62:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <LocationService_Init+0x19c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc0e 	bl	8000588 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8001e00 <LocationService_Init+0x188>
 8001d74:	ec43 2b10 	vmov	d0, r2, r3
 8001d78:	f005 f98e 	bl	8007098 <pow>
 8001d7c:	ec53 2b10 	vmov	r2, r3, d0
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe faa0 	bl	80002c8 <__aeabi_dsub>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4614      	mov	r4, r2
 8001d8e:	461d      	mov	r5, r3
 8001d90:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <LocationService_Init+0x19c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbf7 	bl	8000588 <__aeabi_f2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001e00 <LocationService_Init+0x188>
 8001da2:	ec43 2b10 	vmov	d0, r2, r3
 8001da6:	f005 f977 	bl	8007098 <pow>
 8001daa:	ec53 2b10 	vmov	r2, r3, d0
 8001dae:	4620      	mov	r0, r4
 8001db0:	4629      	mov	r1, r5
 8001db2:	f7fe fa89 	bl	80002c8 <__aeabi_dsub>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4614      	mov	r4, r2
 8001dbc:	461d      	mov	r5, r3
 8001dbe:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <LocationService_Init+0x1a8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbe0 	bl	8000588 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8001e00 <LocationService_Init+0x188>
 8001dd0:	ec43 2b10 	vmov	d0, r2, r3
 8001dd4:	f005 f960 	bl	8007098 <pow>
 8001dd8:	ec53 2b10 	vmov	r2, r3, d0
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fa74 	bl	80002cc <__adddf3>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fefc 	bl	8000be8 <__aeabi_d2f>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e24 <LocationService_Init+0x1ac>)
 8001df4:	6013      	str	r3, [r2, #0]
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40000000 	.word	0x40000000
 8001e08:	2000079c 	.word	0x2000079c
 8001e0c:	200007d0 	.word	0x200007d0
 8001e10:	20000804 	.word	0x20000804
 8001e14:	20000030 	.word	0x20000030
 8001e18:	20000028 	.word	0x20000028
 8001e1c:	20000840 	.word	0x20000840
 8001e20:	20000038 	.word	0x20000038
 8001e24:	20000844 	.word	0x20000844

08001e28 <LocationService_CalculateDistance>:

float LocationService_CalculateDistance(int rssi)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
//	float value = pow(10, ((MEASURED_POWER - rssi) / 20));
	if (rssi == 0) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <LocationService_CalculateDistance+0x12>
		return -1.0f; // Retorna -1 como erro
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <LocationService_CalculateDistance+0x70>)
 8001e38:	e021      	b.n	8001e7e <LocationService_CalculateDistance+0x56>
	}

	// Calcula a distância usando a fórmula
	float exponent = (MEASURED_POWER - rssi) / 20.0f;
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	f06f 0338 	mvn.w	r3, #56	@ 0x38
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001e4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e52:	edc7 7a03 	vstr	s15, [r7, #12]
	float distance = pow(10.0f, exponent);
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7fe fb96 	bl	8000588 <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	ec43 2b11 	vmov	d1, r2, r3
 8001e64:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001e90 <LocationService_CalculateDistance+0x68>
 8001e68:	f005 f916 	bl	8007098 <pow>
 8001e6c:	ec53 2b10 	vmov	r2, r3, d0
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7fe feb8 	bl	8000be8 <__aeabi_d2f>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60bb      	str	r3, [r7, #8]

	return distance;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
}
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eeb0 0a67 	vmov.f32	s0, s15
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	f3af 8000 	nop.w
 8001e90:	00000000 	.word	0x00000000
 8001e94:	40240000 	.word	0x40240000
 8001e98:	bf800000 	.word	0xbf800000
 8001e9c:	00000000 	.word	0x00000000

08001ea0 <LocationService_UpdateLocation>:

void LocationService_UpdateLocation(UART_HandleTypeDef *huart)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	f5ad 7d36 	sub.w	sp, sp, #728	@ 0x2d8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001eac:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8001eb0:	6018      	str	r0, [r3, #0]
	scan_t scan;
	memset(&scan, 0, sizeof(scan_t));
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f004 fcd1 	bl	8006864 <memset>

	BLE_ScanDevices(huart);
 8001ec2:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ec6:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	f7ff f992 	bl	80011f4 <BLE_ScanDevices>
	BLE_GetScannedDevices(&scan);
 8001ed0:	f107 0308 	add.w	r3, r7, #8
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fb0f 	bl	80014f8 <BLE_GetScannedDevices>

	for(size_t i = 0; i < scan.size; i++) {
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001ee0:	e094      	b.n	800200c <LocationService_UpdateLocation+0x16c>
		if (i >= MAX_DEVICE_LIST) {
 8001ee2:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001ee6:	2b09      	cmp	r3, #9
 8001ee8:	f200 809c 	bhi.w	8002024 <LocationService_UpdateLocation+0x184>
			break; // Protege contra acesso fora dos limites
		}

		char* deviceName = scan.devices[i].name;
 8001eec:	f107 0108 	add.w	r1, r7, #8
 8001ef0:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
		int rssi = scan.devices[i].rssi;
 8001f02:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001f06:	f5a3 7134 	sub.w	r1, r3, #720	@ 0x2d0
 8001f0a:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8001f0e:	4613      	mov	r3, r2
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	3340      	adds	r3, #64	@ 0x40
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc

		if(strstr(deviceName, SLAVE_BEACON_NAME_B1) != NULL) {
 8001f20:	49d3      	ldr	r1, [pc, #844]	@ (8002270 <LocationService_UpdateLocation+0x3d0>)
 8001f22:	f8d7 02d0 	ldr.w	r0, [r7, #720]	@ 0x2d0
 8001f26:	f004 fcd4 	bl	80068d2 <strstr>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01d      	beq.n	8001f6c <LocationService_UpdateLocation+0xcc>
			b1OldDistance = b1Distance;
 8001f30:	4bd0      	ldr	r3, [pc, #832]	@ (8002274 <LocationService_UpdateLocation+0x3d4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4ad0      	ldr	r2, [pc, #832]	@ (8002278 <LocationService_UpdateLocation+0x3d8>)
 8001f36:	6013      	str	r3, [r2, #0]
			b1Distance = rssi;
 8001f38:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f44:	4bcb      	ldr	r3, [pc, #812]	@ (8002274 <LocationService_UpdateLocation+0x3d4>)
 8001f46:	edc3 7a00 	vstr	s15, [r3]
			b1Distance = DataFilterService_MovingAverage(&b1Buffer, LocationService_CalculateDistance(rssi));
 8001f4a:	f8d7 02cc 	ldr.w	r0, [r7, #716]	@ 0x2cc
 8001f4e:	f7ff ff6b 	bl	8001e28 <LocationService_CalculateDistance>
 8001f52:	eef0 7a40 	vmov.f32	s15, s0
 8001f56:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5a:	48c8      	ldr	r0, [pc, #800]	@ (800227c <LocationService_UpdateLocation+0x3dc>)
 8001f5c:	f7ff fe3c 	bl	8001bd8 <DataFilterService_MovingAverage>
 8001f60:	eef0 7a40 	vmov.f32	s15, s0
 8001f64:	4bc3      	ldr	r3, [pc, #780]	@ (8002274 <LocationService_UpdateLocation+0x3d4>)
 8001f66:	edc3 7a00 	vstr	s15, [r3]
 8001f6a:	e04a      	b.n	8002002 <LocationService_UpdateLocation+0x162>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B2) != NULL) {
 8001f6c:	49c4      	ldr	r1, [pc, #784]	@ (8002280 <LocationService_UpdateLocation+0x3e0>)
 8001f6e:	f8d7 02d0 	ldr.w	r0, [r7, #720]	@ 0x2d0
 8001f72:	f004 fcae 	bl	80068d2 <strstr>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01d      	beq.n	8001fb8 <LocationService_UpdateLocation+0x118>
			b2OldDistance = b2Distance;
 8001f7c:	4bc1      	ldr	r3, [pc, #772]	@ (8002284 <LocationService_UpdateLocation+0x3e4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4ac1      	ldr	r2, [pc, #772]	@ (8002288 <LocationService_UpdateLocation+0x3e8>)
 8001f82:	6013      	str	r3, [r2, #0]
			b2Distance = rssi;
 8001f84:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f90:	4bbc      	ldr	r3, [pc, #752]	@ (8002284 <LocationService_UpdateLocation+0x3e4>)
 8001f92:	edc3 7a00 	vstr	s15, [r3]
			b2Distance = DataFilterService_MovingAverage(&b2Buffer, LocationService_CalculateDistance(rssi));
 8001f96:	f8d7 02cc 	ldr.w	r0, [r7, #716]	@ 0x2cc
 8001f9a:	f7ff ff45 	bl	8001e28 <LocationService_CalculateDistance>
 8001f9e:	eef0 7a40 	vmov.f32	s15, s0
 8001fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa6:	48b9      	ldr	r0, [pc, #740]	@ (800228c <LocationService_UpdateLocation+0x3ec>)
 8001fa8:	f7ff fe16 	bl	8001bd8 <DataFilterService_MovingAverage>
 8001fac:	eef0 7a40 	vmov.f32	s15, s0
 8001fb0:	4bb4      	ldr	r3, [pc, #720]	@ (8002284 <LocationService_UpdateLocation+0x3e4>)
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
 8001fb6:	e024      	b.n	8002002 <LocationService_UpdateLocation+0x162>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B3) != NULL) {
 8001fb8:	49b5      	ldr	r1, [pc, #724]	@ (8002290 <LocationService_UpdateLocation+0x3f0>)
 8001fba:	f8d7 02d0 	ldr.w	r0, [r7, #720]	@ 0x2d0
 8001fbe:	f004 fc88 	bl	80068d2 <strstr>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01c      	beq.n	8002002 <LocationService_UpdateLocation+0x162>
			b3OldDistance = b3Distance;
 8001fc8:	4bb2      	ldr	r3, [pc, #712]	@ (8002294 <LocationService_UpdateLocation+0x3f4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4ab2      	ldr	r2, [pc, #712]	@ (8002298 <LocationService_UpdateLocation+0x3f8>)
 8001fce:	6013      	str	r3, [r2, #0]
			b3Distance = rssi;
 8001fd0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fdc:	4bad      	ldr	r3, [pc, #692]	@ (8002294 <LocationService_UpdateLocation+0x3f4>)
 8001fde:	edc3 7a00 	vstr	s15, [r3]
			b3Distance = DataFilterService_MovingAverage(&b3Buffer, LocationService_CalculateDistance(rssi));
 8001fe2:	f8d7 02cc 	ldr.w	r0, [r7, #716]	@ 0x2cc
 8001fe6:	f7ff ff1f 	bl	8001e28 <LocationService_CalculateDistance>
 8001fea:	eef0 7a40 	vmov.f32	s15, s0
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	48aa      	ldr	r0, [pc, #680]	@ (800229c <LocationService_UpdateLocation+0x3fc>)
 8001ff4:	f7ff fdf0 	bl	8001bd8 <DataFilterService_MovingAverage>
 8001ff8:	eef0 7a40 	vmov.f32	s15, s0
 8001ffc:	4ba5      	ldr	r3, [pc, #660]	@ (8002294 <LocationService_UpdateLocation+0x3f4>)
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < scan.size; i++) {
 8002002:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8002006:	3301      	adds	r3, #1
 8002008:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 800200c:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8002010:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8002014:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8002018:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 800201c:	429a      	cmp	r2, r3
 800201e:	f4ff af60 	bcc.w	8001ee2 <LocationService_UpdateLocation+0x42>
 8002022:	e000      	b.n	8002026 <LocationService_UpdateLocation+0x186>
			break; // Protege contra acesso fora dos limites
 8002024:	bf00      	nop
		}
	}

	if (b1Distance != b1OldDistance && b2Distance != b2OldDistance && b3Distance != b3OldDistance) {
 8002026:	4b93      	ldr	r3, [pc, #588]	@ (8002274 <LocationService_UpdateLocation+0x3d4>)
 8002028:	ed93 7a00 	vldr	s14, [r3]
 800202c:	4b92      	ldr	r3, [pc, #584]	@ (8002278 <LocationService_UpdateLocation+0x3d8>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	eeb4 7a67 	vcmp.f32	s14, s15
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	f000 810e 	beq.w	800225a <LocationService_UpdateLocation+0x3ba>
 800203e:	4b91      	ldr	r3, [pc, #580]	@ (8002284 <LocationService_UpdateLocation+0x3e4>)
 8002040:	ed93 7a00 	vldr	s14, [r3]
 8002044:	4b90      	ldr	r3, [pc, #576]	@ (8002288 <LocationService_UpdateLocation+0x3e8>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	eeb4 7a67 	vcmp.f32	s14, s15
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	f000 8102 	beq.w	800225a <LocationService_UpdateLocation+0x3ba>
 8002056:	4b8f      	ldr	r3, [pc, #572]	@ (8002294 <LocationService_UpdateLocation+0x3f4>)
 8002058:	ed93 7a00 	vldr	s14, [r3]
 800205c:	4b8e      	ldr	r3, [pc, #568]	@ (8002298 <LocationService_UpdateLocation+0x3f8>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	eeb4 7a67 	vcmp.f32	s14, s15
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	f000 80f6 	beq.w	800225a <LocationService_UpdateLocation+0x3ba>
		float trilaterationCalcA = -2*slaveBeaconLocationB1.longitude + 2*slaveBeaconLocationB2.longitude;
 800206e:	4b8c      	ldr	r3, [pc, #560]	@ (80022a0 <LocationService_UpdateLocation+0x400>)
 8002070:	edd3 7a01 	vldr	s15, [r3, #4]
 8002074:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8002078:	ee27 7a87 	vmul.f32	s14, s15, s14
 800207c:	4b89      	ldr	r3, [pc, #548]	@ (80022a4 <LocationService_UpdateLocation+0x404>)
 800207e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002082:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208a:	edc7 7ab2 	vstr	s15, [r7, #712]	@ 0x2c8
		float trilaterationCalcB = -2*slaveBeaconLocationB1.latitude + 2*slaveBeaconLocationB2.latitude;
 800208e:	4b84      	ldr	r3, [pc, #528]	@ (80022a0 <LocationService_UpdateLocation+0x400>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8002098:	ee27 7a87 	vmul.f32	s14, s15, s14
 800209c:	4b81      	ldr	r3, [pc, #516]	@ (80022a4 <LocationService_UpdateLocation+0x404>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020aa:	edc7 7ab1 	vstr	s15, [r7, #708]	@ 0x2c4
		float trilaterationCalcC = pow(b1Distance, 2) - pow(b2Distance, 2) + trilaterationCalcCPartial;
 80020ae:	4b71      	ldr	r3, [pc, #452]	@ (8002274 <LocationService_UpdateLocation+0x3d4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa68 	bl	8000588 <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 8002268 <LocationService_UpdateLocation+0x3c8>
 80020c0:	ec43 2b10 	vmov	d0, r2, r3
 80020c4:	f004 ffe8 	bl	8007098 <pow>
 80020c8:	ec55 4b10 	vmov	r4, r5, d0
 80020cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002284 <LocationService_UpdateLocation+0x3e4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa59 	bl	8000588 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 8002268 <LocationService_UpdateLocation+0x3c8>
 80020de:	ec43 2b10 	vmov	d0, r2, r3
 80020e2:	f004 ffd9 	bl	8007098 <pow>
 80020e6:	ec53 2b10 	vmov	r2, r3, d0
 80020ea:	4620      	mov	r0, r4
 80020ec:	4629      	mov	r1, r5
 80020ee:	f7fe f8eb 	bl	80002c8 <__aeabi_dsub>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4614      	mov	r4, r2
 80020f8:	461d      	mov	r5, r3
 80020fa:	4b6b      	ldr	r3, [pc, #428]	@ (80022a8 <LocationService_UpdateLocation+0x408>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fa42 	bl	8000588 <__aeabi_f2d>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4620      	mov	r0, r4
 800210a:	4629      	mov	r1, r5
 800210c:	f7fe f8de 	bl	80002cc <__adddf3>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe fd66 	bl	8000be8 <__aeabi_d2f>
 800211c:	4603      	mov	r3, r0
 800211e:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
		float trilaterationCalcD = -2*slaveBeaconLocationB2.longitude + 2*slaveBeaconLocationB3.longitude;
 8002122:	4b60      	ldr	r3, [pc, #384]	@ (80022a4 <LocationService_UpdateLocation+0x404>)
 8002124:	edd3 7a01 	vldr	s15, [r3, #4]
 8002128:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800212c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002130:	4b5e      	ldr	r3, [pc, #376]	@ (80022ac <LocationService_UpdateLocation+0x40c>)
 8002132:	edd3 7a01 	vldr	s15, [r3, #4]
 8002136:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800213a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213e:	edc7 7aaf 	vstr	s15, [r7, #700]	@ 0x2bc
		float trilaterationCalcE = -2*slaveBeaconLocationB2.latitude + 2*slaveBeaconLocationB3.latitude;
 8002142:	4b58      	ldr	r3, [pc, #352]	@ (80022a4 <LocationService_UpdateLocation+0x404>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800214c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002150:	4b56      	ldr	r3, [pc, #344]	@ (80022ac <LocationService_UpdateLocation+0x40c>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	edc7 7aae 	vstr	s15, [r7, #696]	@ 0x2b8
		float trilaterationCalcF = pow(b2Distance, 2) - pow(b3Distance, 2) + trilaterationCalcFPartial;
 8002162:	4b48      	ldr	r3, [pc, #288]	@ (8002284 <LocationService_UpdateLocation+0x3e4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fa0e 	bl	8000588 <__aeabi_f2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	ed9f 1b3d 	vldr	d1, [pc, #244]	@ 8002268 <LocationService_UpdateLocation+0x3c8>
 8002174:	ec43 2b10 	vmov	d0, r2, r3
 8002178:	f004 ff8e 	bl	8007098 <pow>
 800217c:	ec55 4b10 	vmov	r4, r5, d0
 8002180:	4b44      	ldr	r3, [pc, #272]	@ (8002294 <LocationService_UpdateLocation+0x3f4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f9ff 	bl	8000588 <__aeabi_f2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8002268 <LocationService_UpdateLocation+0x3c8>
 8002192:	ec43 2b10 	vmov	d0, r2, r3
 8002196:	f004 ff7f 	bl	8007098 <pow>
 800219a:	ec53 2b10 	vmov	r2, r3, d0
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fe f891 	bl	80002c8 <__aeabi_dsub>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4614      	mov	r4, r2
 80021ac:	461d      	mov	r5, r3
 80021ae:	4b40      	ldr	r3, [pc, #256]	@ (80022b0 <LocationService_UpdateLocation+0x410>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9e8 	bl	8000588 <__aeabi_f2d>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f7fe f884 	bl	80002cc <__adddf3>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f7fe fd0c 	bl	8000be8 <__aeabi_d2f>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4

		masterLocation.longitude = (trilaterationCalcC*trilaterationCalcE - trilaterationCalcF*trilaterationCalcB)/(trilaterationCalcE*trilaterationCalcA - trilaterationCalcB*trilaterationCalcD);
 80021d6:	ed97 7ab0 	vldr	s14, [r7, #704]	@ 0x2c0
 80021da:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 80021de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e2:	edd7 6aad 	vldr	s13, [r7, #692]	@ 0x2b4
 80021e6:	edd7 7ab1 	vldr	s15, [r7, #708]	@ 0x2c4
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021f2:	ed97 7aae 	vldr	s14, [r7, #696]	@ 0x2b8
 80021f6:	edd7 7ab2 	vldr	s15, [r7, #712]	@ 0x2c8
 80021fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021fe:	ed97 6ab1 	vldr	s12, [r7, #708]	@ 0x2c4
 8002202:	edd7 7aaf 	vldr	s15, [r7, #700]	@ 0x2bc
 8002206:	ee66 7a27 	vmul.f32	s15, s12, s15
 800220a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800220e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002212:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <LocationService_UpdateLocation+0x414>)
 8002214:	edc3 7a01 	vstr	s15, [r3, #4]
		masterLocation.latitude= (trilaterationCalcC*trilaterationCalcD - trilaterationCalcA*trilaterationCalcF)/(trilaterationCalcB*trilaterationCalcD - trilaterationCalcA*trilaterationCalcE);
 8002218:	ed97 7ab0 	vldr	s14, [r7, #704]	@ 0x2c0
 800221c:	edd7 7aaf 	vldr	s15, [r7, #700]	@ 0x2bc
 8002220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002224:	edd7 6ab2 	vldr	s13, [r7, #712]	@ 0x2c8
 8002228:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 800222c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002230:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002234:	ed97 7ab1 	vldr	s14, [r7, #708]	@ 0x2c4
 8002238:	edd7 7aaf 	vldr	s15, [r7, #700]	@ 0x2bc
 800223c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002240:	ed97 6ab2 	vldr	s12, [r7, #712]	@ 0x2c8
 8002244:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 8002248:	ee66 7a27 	vmul.f32	s15, s12, s15
 800224c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002254:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <LocationService_UpdateLocation+0x414>)
 8002256:	edc3 7a00 	vstr	s15, [r3]
	}

}
 800225a:	bf00      	nop
 800225c:	f507 7736 	add.w	r7, r7, #728	@ 0x2d8
 8002260:	46bd      	mov	sp, r7
 8002262:	bdb0      	pop	{r4, r5, r7, pc}
 8002264:	f3af 8000 	nop.w
 8002268:	00000000 	.word	0x00000000
 800226c:	40000000 	.word	0x40000000
 8002270:	08008534 	.word	0x08008534
 8002274:	20000848 	.word	0x20000848
 8002278:	20000040 	.word	0x20000040
 800227c:	2000079c 	.word	0x2000079c
 8002280:	08008540 	.word	0x08008540
 8002284:	2000084c 	.word	0x2000084c
 8002288:	20000044 	.word	0x20000044
 800228c:	200007d0 	.word	0x200007d0
 8002290:	0800854c 	.word	0x0800854c
 8002294:	20000850 	.word	0x20000850
 8002298:	20000048 	.word	0x20000048
 800229c:	20000804 	.word	0x20000804
 80022a0:	20000028 	.word	0x20000028
 80022a4:	20000030 	.word	0x20000030
 80022a8:	20000840 	.word	0x20000840
 80022ac:	20000038 	.word	0x20000038
 80022b0:	20000844 	.word	0x20000844
 80022b4:	20000838 	.word	0x20000838

080022b8 <LocationService_GetLocation>:

location_t LocationService_GetLocation()
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
	return masterLocation;
 80022be:	4a0b      	ldr	r2, [pc, #44]	@ (80022ec <LocationService_GetLocation+0x34>)
 80022c0:	f107 0308 	add.w	r3, r7, #8
 80022c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	ee07 2a10 	vmov	s14, r2
 80022d4:	ee07 3a90 	vmov	s15, r3
}
 80022d8:	eeb0 0a47 	vmov.f32	s0, s14
 80022dc:	eef0 0a67 	vmov.f32	s1, s15
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000838 	.word	0x20000838

080022f0 <LocationService_GetArrivalAngle>:

float LocationService_GetArrivalAngle()
{
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0

	float deltaX = masterLocation.longitude - slaveBeaconLocationB2.longitude;
 80022f6:	4b25      	ldr	r3, [pc, #148]	@ (800238c <LocationService_GetArrivalAngle+0x9c>)
 80022f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80022fc:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <LocationService_GetArrivalAngle+0xa0>)
 80022fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002306:	edc7 7a02 	vstr	s15, [r7, #8]
	    float deltaY = masterLocation.latitude  - slaveBeaconLocationB2.latitude;
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <LocationService_GetArrivalAngle+0x9c>)
 800230c:	ed93 7a00 	vldr	s14, [r3]
 8002310:	4b1f      	ldr	r3, [pc, #124]	@ (8002390 <LocationService_GetArrivalAngle+0xa0>)
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231a:	edc7 7a01 	vstr	s15, [r7, #4]

	    // Calcula o ângulo em radianos usando atan2(Y, X)
	    float angleRadians = atan2(deltaY, deltaX);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe f932 	bl	8000588 <__aeabi_f2d>
 8002324:	4604      	mov	r4, r0
 8002326:	460d      	mov	r5, r1
 8002328:	68b8      	ldr	r0, [r7, #8]
 800232a:	f7fe f92d 	bl	8000588 <__aeabi_f2d>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	ec43 2b11 	vmov	d1, r2, r3
 8002336:	ec45 4b10 	vmov	d0, r4, r5
 800233a:	f004 feab 	bl	8007094 <atan2>
 800233e:	ec53 2b10 	vmov	r2, r3, d0
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f7fe fc4f 	bl	8000be8 <__aeabi_d2f>
 800234a:	4603      	mov	r3, r0
 800234c:	603b      	str	r3, [r7, #0]

	    // Converte para graus
	    float angleDegrees = angleRadians * (180.0f / (float)M_PI);
 800234e:	edd7 7a00 	vldr	s15, [r7]
 8002352:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002394 <LocationService_GetArrivalAngle+0xa4>
 8002356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235a:	edc7 7a03 	vstr	s15, [r7, #12]

	    // Ajusta para ficar no intervalo [0, 360)
	    if (angleDegrees < 0.0f) {
 800235e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	d507      	bpl.n	800237c <LocationService_GetArrivalAngle+0x8c>
	        angleDegrees += 360.0f;
 800236c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002370:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002398 <LocationService_GetArrivalAngle+0xa8>
 8002374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002378:	edc7 7a03 	vstr	s15, [r7, #12]
	    }

	    return angleDegrees;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	ee07 3a90 	vmov	s15, r3
//	return atan((masterLocation.longitude - slaveBeaconLocationB2.longitude) / (masterLocation.latitude - slaveBeaconLocationB2.latitude)) * 180 / 3.14159265359 + 180;
}
 8002382:	eeb0 0a67 	vmov.f32	s0, s15
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	20000838 	.word	0x20000838
 8002390:	20000030 	.word	0x20000030
 8002394:	42652ee0 	.word	0x42652ee0
 8002398:	43b40000 	.word	0x43b40000

0800239c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a0:	f000 fcfa 	bl	8002d98 <HAL_Init>
  /* USER CODE BEGIN Init */;

//  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a4:	f000 f8aa 	bl	80024fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a8:	f000 fa3e 	bl	8002828 <MX_GPIO_Init>
  MX_I2C1_Init();
 80023ac:	f000 f906 	bl	80025bc <MX_I2C1_Init>
  MX_TIM4_Init();
 80023b0:	f000 f98c 	bl	80026cc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80023b4:	f000 f9e4 	bl	8002780 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80023b8:	f000 fa0c 	bl	80027d4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80023bc:	f000 f92c 	bl	8002618 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  PID_Create(&servoPidController, kp, ki, kd, CYCLE_PERIOD_MS);
 80023c0:	4b3f      	ldr	r3, [pc, #252]	@ (80024c0 <main+0x124>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	4b3f      	ldr	r3, [pc, #252]	@ (80024c4 <main+0x128>)
 80023c8:	ed93 7a00 	vldr	s14, [r3]
 80023cc:	4b3e      	ldr	r3, [pc, #248]	@ (80024c8 <main+0x12c>)
 80023ce:	edd3 6a00 	vldr	s13, [r3]
 80023d2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80023d6:	eeb0 1a66 	vmov.f32	s2, s13
 80023da:	eef0 0a47 	vmov.f32	s1, s14
 80023de:	eeb0 0a67 	vmov.f32	s0, s15
 80023e2:	483a      	ldr	r0, [pc, #232]	@ (80024cc <main+0x130>)
 80023e4:	f7ff f89c 	bl	8001520 <PID_Create>
  PID_SetSaturationLimits(&servoPidController, servoMin, servoMax);
 80023e8:	4b39      	ldr	r3, [pc, #228]	@ (80024d0 <main+0x134>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	4b39      	ldr	r3, [pc, #228]	@ (80024d4 <main+0x138>)
 80023f0:	ed93 7a00 	vldr	s14, [r3]
 80023f4:	eef0 0a47 	vmov.f32	s1, s14
 80023f8:	eeb0 0a67 	vmov.f32	s0, s15
 80023fc:	4833      	ldr	r0, [pc, #204]	@ (80024cc <main+0x130>)
 80023fe:	f7ff f8cd 	bl	800159c <PID_SetSaturationLimits>
  HMC5883L_initialize();
 8002402:	f7fe fdb9 	bl	8000f78 <HMC5883L_initialize>
  I2Cdev_init(&hi2c1);
 8002406:	4834      	ldr	r0, [pc, #208]	@ (80024d8 <main+0x13c>)
 8002408:	f7fe fe3e 	bl	8001088 <I2Cdev_init>
  LocationService_Init(&huart3);
 800240c:	4833      	ldr	r0, [pc, #204]	@ (80024dc <main+0x140>)
 800240e:	f7ff fc33 	bl	8001c78 <LocationService_Init>
  setServoPosition(180, &htim4);
 8002412:	4933      	ldr	r1, [pc, #204]	@ (80024e0 <main+0x144>)
 8002414:	20b4      	movs	r0, #180	@ 0xb4
 8002416:	f7ff fb97 	bl	8001b48 <setServoPosition>
  HAL_Delay(13000);
 800241a:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 800241e:	f000 fd2d 	bl	8002e7c <HAL_Delay>
  changeDCMotorDirection('t');
 8002422:	2074      	movs	r0, #116	@ 0x74
 8002424:	f7ff fad6 	bl	80019d4 <changeDCMotorDirection>
  setServoPosition(90, &htim4);
 8002428:	492d      	ldr	r1, [pc, #180]	@ (80024e0 <main+0x144>)
 800242a:	205a      	movs	r0, #90	@ 0x5a
 800242c:	f7ff fb8c 	bl	8001b48 <setServoPosition>
  HAL_Delay(10000);
 8002430:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002434:	f000 fd22 	bl	8002e7c <HAL_Delay>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		iniciou += 1;
 8002438:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <main+0x148>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	4a29      	ldr	r2, [pc, #164]	@ (80024e4 <main+0x148>)
 8002440:	6013      	str	r3, [r2, #0]
		LocationService_UpdateLocation(&huart3);
 8002442:	4826      	ldr	r0, [pc, #152]	@ (80024dc <main+0x140>)
 8002444:	f7ff fd2c 	bl	8001ea0 <LocationService_UpdateLocation>
		location = LocationService_GetLocation();
 8002448:	f7ff ff36 	bl	80022b8 <LocationService_GetLocation>
 800244c:	eeb0 7a40 	vmov.f32	s14, s0
 8002450:	eef0 7a60 	vmov.f32	s15, s1
 8002454:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <main+0x14c>)
 8002456:	ed83 7a00 	vstr	s14, [r3]
 800245a:	edc3 7a01 	vstr	s15, [r3, #4]
		direction = readDirection();
 800245e:	f7ff f9a1 	bl	80017a4 <readDirection>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <main+0x150>)
 8002468:	801a      	strh	r2, [r3, #0]
		arrivalAngle = LocationService_GetArrivalAngle();
 800246a:	f7ff ff41 	bl	80022f0 <LocationService_GetArrivalAngle>
 800246e:	eef0 7a40 	vmov.f32	s15, s0
 8002472:	4b1f      	ldr	r3, [pc, #124]	@ (80024f0 <main+0x154>)
 8002474:	edc3 7a00 	vstr	s15, [r3]

		PID_SetSetpoint(&servoPidController, arrivalAngle);
 8002478:	4b1d      	ldr	r3, [pc, #116]	@ (80024f0 <main+0x154>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	eeb0 0a67 	vmov.f32	s0, s15
 8002482:	4812      	ldr	r0, [pc, #72]	@ (80024cc <main+0x130>)
 8002484:	f7ff f89e 	bl	80015c4 <PID_SetSetpoint>
		PID_ProcessInput(&servoPidController, direction);
 8002488:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <main+0x150>)
 800248a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002496:	eeb0 0a67 	vmov.f32	s0, s15
 800249a:	480c      	ldr	r0, [pc, #48]	@ (80024cc <main+0x130>)
 800249c:	f7ff f8a1 	bl	80015e2 <PID_ProcessInput>
		angleControlAction = PID_CalculateControlAction(&servoPidController);
 80024a0:	480a      	ldr	r0, [pc, #40]	@ (80024cc <main+0x130>)
 80024a2:	f7ff f8e3 	bl	800166c <PID_CalculateControlAction>
 80024a6:	eef0 7a40 	vmov.f32	s15, s0
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <main+0x158>)
 80024ac:	edc3 7a00 	vstr	s15, [r3]
		setServoPosition(servoPosition, &htim4);
 80024b0:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <main+0x15c>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	490a      	ldr	r1, [pc, #40]	@ (80024e0 <main+0x144>)
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fb46 	bl	8001b48 <setServoPosition>
		iniciou += 1;
 80024bc:	bf00      	nop
 80024be:	e7bb      	b.n	8002438 <main+0x9c>
 80024c0:	2000004c 	.word	0x2000004c
 80024c4:	20000050 	.word	0x20000050
 80024c8:	200009e0 	.word	0x200009e0
 80024cc:	200009e8 	.word	0x200009e8
 80024d0:	200009e4 	.word	0x200009e4
 80024d4:	20000054 	.word	0x20000054
 80024d8:	20000854 	.word	0x20000854
 80024dc:	20000980 	.word	0x20000980
 80024e0:	200008f0 	.word	0x200008f0
 80024e4:	200009d0 	.word	0x200009d0
 80024e8:	200009c8 	.word	0x200009c8
 80024ec:	200009d4 	.word	0x200009d4
 80024f0:	200009d8 	.word	0x200009d8
 80024f4:	200009dc 	.word	0x200009dc
 80024f8:	200009d6 	.word	0x200009d6

080024fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b094      	sub	sp, #80	@ 0x50
 8002500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	2234      	movs	r2, #52	@ 0x34
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f004 f9aa 	bl	8006864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002510:	f107 0308 	add.w	r3, r7, #8
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <SystemClock_Config+0xb8>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	4a22      	ldr	r2, [pc, #136]	@ (80025b4 <SystemClock_Config+0xb8>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002530:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <SystemClock_Config+0xb8>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800253c:	2300      	movs	r3, #0
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <SystemClock_Config+0xbc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002548:	4a1b      	ldr	r2, [pc, #108]	@ (80025b8 <SystemClock_Config+0xbc>)
 800254a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <SystemClock_Config+0xbc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800255c:	2302      	movs	r3, #2
 800255e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002560:	2301      	movs	r3, #1
 8002562:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002564:	2310      	movs	r3, #16
 8002566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002568:	2300      	movs	r3, #0
 800256a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4618      	mov	r0, r3
 8002572:	f002 fb89 	bl	8004c88 <HAL_RCC_OscConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800257c:	f000 f9bc 	bl	80028f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002580:	230f      	movs	r3, #15
 8002582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800258c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f002 f8af 	bl	8004700 <HAL_RCC_ClockConfig>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80025a8:	f000 f9a6 	bl	80028f8 <Error_Handler>
  }
}
 80025ac:	bf00      	nop
 80025ae:	3750      	adds	r7, #80	@ 0x50
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40007000 	.word	0x40007000

080025bc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025c0:	4b12      	ldr	r3, [pc, #72]	@ (800260c <MX_I2C1_Init+0x50>)
 80025c2:	4a13      	ldr	r2, [pc, #76]	@ (8002610 <MX_I2C1_Init+0x54>)
 80025c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025c6:	4b11      	ldr	r3, [pc, #68]	@ (800260c <MX_I2C1_Init+0x50>)
 80025c8:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <MX_I2C1_Init+0x58>)
 80025ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025cc:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <MX_I2C1_Init+0x50>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <MX_I2C1_Init+0x50>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <MX_I2C1_Init+0x50>)
 80025da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <MX_I2C1_Init+0x50>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <MX_I2C1_Init+0x50>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ec:	4b07      	ldr	r3, [pc, #28]	@ (800260c <MX_I2C1_Init+0x50>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <MX_I2C1_Init+0x50>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025f8:	4804      	ldr	r0, [pc, #16]	@ (800260c <MX_I2C1_Init+0x50>)
 80025fa:	f000 fef7 	bl	80033ec <HAL_I2C_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002604:	f000 f978 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000854 	.word	0x20000854
 8002610:	40005400 	.word	0x40005400
 8002614:	000186a0 	.word	0x000186a0

08002618 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	615a      	str	r2, [r3, #20]
 8002638:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800263a:	4b22      	ldr	r3, [pc, #136]	@ (80026c4 <MX_TIM3_Init+0xac>)
 800263c:	4a22      	ldr	r2, [pc, #136]	@ (80026c8 <MX_TIM3_Init+0xb0>)
 800263e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64 - 1;
 8002640:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <MX_TIM3_Init+0xac>)
 8002642:	223f      	movs	r2, #63	@ 0x3f
 8002644:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002646:	4b1f      	ldr	r3, [pc, #124]	@ (80026c4 <MX_TIM3_Init+0xac>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 800264c:	4b1d      	ldr	r3, [pc, #116]	@ (80026c4 <MX_TIM3_Init+0xac>)
 800264e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8002652:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002654:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <MX_TIM3_Init+0xac>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <MX_TIM3_Init+0xac>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002660:	4818      	ldr	r0, [pc, #96]	@ (80026c4 <MX_TIM3_Init+0xac>)
 8002662:	f002 fdaf 	bl	80051c4 <HAL_TIM_PWM_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800266c:	f000 f944 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002678:	f107 0320 	add.w	r3, r7, #32
 800267c:	4619      	mov	r1, r3
 800267e:	4811      	ldr	r0, [pc, #68]	@ (80026c4 <MX_TIM3_Init+0xac>)
 8002680:	f003 fa6c 	bl	8005b5c <HAL_TIMEx_MasterConfigSynchronization>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800268a:	f000 f935 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800268e:	2360      	movs	r3, #96	@ 0x60
 8002690:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	2204      	movs	r2, #4
 80026a2:	4619      	mov	r1, r3
 80026a4:	4807      	ldr	r0, [pc, #28]	@ (80026c4 <MX_TIM3_Init+0xac>)
 80026a6:	f002 ff15 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80026b0:	f000 f922 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026b4:	4803      	ldr	r0, [pc, #12]	@ (80026c4 <MX_TIM3_Init+0xac>)
 80026b6:	f000 f9cd 	bl	8002a54 <HAL_TIM_MspPostInit>
}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	@ 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200008a8 	.word	0x200008a8
 80026c8:	40000400 	.word	0x40000400

080026cc <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	@ 0x28
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d2:	f107 0320 	add.w	r3, r7, #32
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	615a      	str	r2, [r3, #20]
 80026ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026ee:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <MX_TIM4_Init+0xac>)
 80026f0:	4a22      	ldr	r2, [pc, #136]	@ (800277c <MX_TIM4_Init+0xb0>)
 80026f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64 - 1;
 80026f4:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <MX_TIM4_Init+0xac>)
 80026f6:	223f      	movs	r2, #63	@ 0x3f
 80026f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002778 <MX_TIM4_Init+0xac>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250;
 8002700:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <MX_TIM4_Init+0xac>)
 8002702:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8002706:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <MX_TIM4_Init+0xac>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270e:	4b1a      	ldr	r3, [pc, #104]	@ (8002778 <MX_TIM4_Init+0xac>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002714:	4818      	ldr	r0, [pc, #96]	@ (8002778 <MX_TIM4_Init+0xac>)
 8002716:	f002 fd55 	bl	80051c4 <HAL_TIM_PWM_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002720:	f000 f8ea 	bl	80028f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800272c:	f107 0320 	add.w	r3, r7, #32
 8002730:	4619      	mov	r1, r3
 8002732:	4811      	ldr	r0, [pc, #68]	@ (8002778 <MX_TIM4_Init+0xac>)
 8002734:	f003 fa12 	bl	8005b5c <HAL_TIMEx_MasterConfigSynchronization>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800273e:	f000 f8db 	bl	80028f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002742:	2360      	movs	r3, #96	@ 0x60
 8002744:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2200      	movs	r2, #0
 8002756:	4619      	mov	r1, r3
 8002758:	4807      	ldr	r0, [pc, #28]	@ (8002778 <MX_TIM4_Init+0xac>)
 800275a:	f002 febb 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002764:	f000 f8c8 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002768:	4803      	ldr	r0, [pc, #12]	@ (8002778 <MX_TIM4_Init+0xac>)
 800276a:	f000 f973 	bl	8002a54 <HAL_TIM_MspPostInit>
}
 800276e:	bf00      	nop
 8002770:	3728      	adds	r7, #40	@ 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200008f0 	.word	0x200008f0
 800277c:	40000800 	.word	0x40000800

08002780 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <MX_USART2_UART_Init+0x4c>)
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <MX_USART2_UART_Init+0x50>)
 8002788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <MX_USART2_UART_Init+0x4c>)
 800278c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <MX_USART2_UART_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <MX_USART2_UART_Init+0x4c>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <MX_USART2_UART_Init+0x4c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <MX_USART2_UART_Init+0x4c>)
 80027a6:	220c      	movs	r2, #12
 80027a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027aa:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <MX_USART2_UART_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <MX_USART2_UART_Init+0x4c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027b6:	4805      	ldr	r0, [pc, #20]	@ (80027cc <MX_USART2_UART_Init+0x4c>)
 80027b8:	f003 fa4c 	bl	8005c54 <HAL_UART_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027c2:	f000 f899 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000938 	.word	0x20000938
 80027d0:	40004400 	.word	0x40004400

080027d4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <MX_USART3_UART_Init+0x4c>)
 80027da:	4a12      	ldr	r2, [pc, #72]	@ (8002824 <MX_USART3_UART_Init+0x50>)
 80027dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <MX_USART3_UART_Init+0x4c>)
 80027e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <MX_USART3_UART_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <MX_USART3_UART_Init+0x4c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <MX_USART3_UART_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027f8:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <MX_USART3_UART_Init+0x4c>)
 80027fa:	220c      	movs	r2, #12
 80027fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fe:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <MX_USART3_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002804:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <MX_USART3_UART_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800280a:	4805      	ldr	r0, [pc, #20]	@ (8002820 <MX_USART3_UART_Init+0x4c>)
 800280c:	f003 fa22 	bl	8005c54 <HAL_UART_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002816:	f000 f86f 	bl	80028f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000980 	.word	0x20000980
 8002824:	40004800 	.word	0x40004800

08002828 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282e:	f107 030c 	add.w	r3, r7, #12
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <MX_GPIO_Init+0xc4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	4a29      	ldr	r2, [pc, #164]	@ (80028ec <MX_GPIO_Init+0xc4>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6313      	str	r3, [r2, #48]	@ 0x30
 800284e:	4b27      	ldr	r3, [pc, #156]	@ (80028ec <MX_GPIO_Init+0xc4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <MX_GPIO_Init+0xc4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	4a22      	ldr	r2, [pc, #136]	@ (80028ec <MX_GPIO_Init+0xc4>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6313      	str	r3, [r2, #48]	@ 0x30
 800286a:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <MX_GPIO_Init+0xc4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4b1c      	ldr	r3, [pc, #112]	@ (80028ec <MX_GPIO_Init+0xc4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ec <MX_GPIO_Init+0xc4>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <MX_GPIO_Init+0xc4>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L293D_LATCH_Pin | L293D_EN_Pin | L293D_SER_Pin, GPIO_PIN_RESET);
 8002892:	2200      	movs	r2, #0
 8002894:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8002898:	4815      	ldr	r0, [pc, #84]	@ (80028f0 <MX_GPIO_Init+0xc8>)
 800289a:	f000 fd8d 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	2120      	movs	r1, #32
 80028a2:	4814      	ldr	r0, [pc, #80]	@ (80028f4 <MX_GPIO_Init+0xcc>)
 80028a4:	f000 fd88 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = L293D_LATCH_Pin | L293D_EN_Pin | L293D_SER_Pin;
 80028a8:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80028ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ae:	2301      	movs	r3, #1
 80028b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f107 030c 	add.w	r3, r7, #12
 80028be:	4619      	mov	r1, r3
 80028c0:	480b      	ldr	r0, [pc, #44]	@ (80028f0 <MX_GPIO_Init+0xc8>)
 80028c2:	f000 fbe5 	bl	8003090 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 80028c6:	2320      	movs	r3, #32
 80028c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ca:	2301      	movs	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	4619      	mov	r1, r3
 80028dc:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <MX_GPIO_Init+0xcc>)
 80028de:	f000 fbd7 	bl	8003090 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80028e2:	bf00      	nop
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400

080028f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028fc:	b672      	cpsid	i
}
 80028fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <Error_Handler+0x8>

08002904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_MspInit+0x4c>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	4a0f      	ldr	r2, [pc, #60]	@ (8002950 <HAL_MspInit+0x4c>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002918:	6453      	str	r3, [r2, #68]	@ 0x44
 800291a:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <HAL_MspInit+0x4c>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_MspInit+0x4c>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	4a08      	ldr	r2, [pc, #32]	@ (8002950 <HAL_MspInit+0x4c>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	@ 0x40
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_MspInit+0x4c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	@ 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a19      	ldr	r2, [pc, #100]	@ (80029d8 <HAL_I2C_MspInit+0x84>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12c      	bne.n	80029d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <HAL_I2C_MspInit+0x88>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4a17      	ldr	r2, [pc, #92]	@ (80029dc <HAL_I2C_MspInit+0x88>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_I2C_MspInit+0x88>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = MAG_SDA_Pin|MAG_SCL_Pin;
 8002992:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002998:	2312      	movs	r3, #18
 800299a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029a4:	2304      	movs	r3, #4
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	480c      	ldr	r0, [pc, #48]	@ (80029e0 <HAL_I2C_MspInit+0x8c>)
 80029b0:	f000 fb6e 	bl	8003090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <HAL_I2C_MspInit+0x88>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	4a07      	ldr	r2, [pc, #28]	@ (80029dc <HAL_I2C_MspInit+0x88>)
 80029be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <HAL_I2C_MspInit+0x88>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029d0:	bf00      	nop
 80029d2:	3728      	adds	r7, #40	@ 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40005400 	.word	0x40005400
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020400 	.word	0x40020400

080029e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <HAL_TIM_PWM_MspInit+0x64>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10e      	bne.n	8002a14 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <HAL_TIM_PWM_MspInit+0x68>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a13      	ldr	r2, [pc, #76]	@ (8002a4c <HAL_TIM_PWM_MspInit+0x68>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_TIM_PWM_MspInit+0x68>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a12:	e012      	b.n	8002a3a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <HAL_TIM_PWM_MspInit+0x6c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10d      	bne.n	8002a3a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_TIM_PWM_MspInit+0x68>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <HAL_TIM_PWM_MspInit+0x68>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <HAL_TIM_PWM_MspInit+0x68>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40000800 	.word	0x40000800

08002a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	@ 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a24      	ldr	r2, [pc, #144]	@ (8002b04 <HAL_TIM_MspPostInit+0xb0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d11e      	bne.n	8002ab4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b23      	ldr	r3, [pc, #140]	@ (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4817      	ldr	r0, [pc, #92]	@ (8002b0c <HAL_TIM_MspPostInit+0xb8>)
 8002aae:	f000 faef 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ab2:	e022      	b.n	8002afa <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	@ (8002b10 <HAL_TIM_MspPostInit+0xbc>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d11d      	bne.n	8002afa <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	4a10      	ldr	r2, [pc, #64]	@ (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ace:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <HAL_TIM_MspPostInit+0xb4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 8002ada:	2340      	movs	r3, #64	@ 0x40
 8002adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002aea:	2302      	movs	r3, #2
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	4807      	ldr	r0, [pc, #28]	@ (8002b14 <HAL_TIM_MspPostInit+0xc0>)
 8002af6:	f000 facb 	bl	8003090 <HAL_GPIO_Init>
}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	@ 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40020400 	.word	0x40020400

08002b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	@ 0x30
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a41      	ldr	r2, [pc, #260]	@ (8002c3c <HAL_UART_MspInit+0x124>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d12c      	bne.n	8002b94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	4b40      	ldr	r3, [pc, #256]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4a3f      	ldr	r2, [pc, #252]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	4b39      	ldr	r3, [pc, #228]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	4a38      	ldr	r2, [pc, #224]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b66:	4b36      	ldr	r3, [pc, #216]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002b72:	230c      	movs	r3, #12
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b82:	2307      	movs	r3, #7
 8002b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 031c 	add.w	r3, r7, #28
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	482d      	ldr	r0, [pc, #180]	@ (8002c44 <HAL_UART_MspInit+0x12c>)
 8002b8e:	f000 fa7f 	bl	8003090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b92:	e04f      	b.n	8002c34 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2b      	ldr	r2, [pc, #172]	@ (8002c48 <HAL_UART_MspInit+0x130>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d14a      	bne.n	8002c34 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	4a26      	ldr	r2, [pc, #152]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bae:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bca:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be6:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <HAL_UART_MspInit+0x128>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c02:	2307      	movs	r3, #7
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480f      	ldr	r0, [pc, #60]	@ (8002c4c <HAL_UART_MspInit+0x134>)
 8002c0e:	f000 fa3f 	bl	8003090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8002c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c24:	2307      	movs	r3, #7
 8002c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4808      	ldr	r0, [pc, #32]	@ (8002c50 <HAL_UART_MspInit+0x138>)
 8002c30:	f000 fa2e 	bl	8003090 <HAL_GPIO_Init>
}
 8002c34:	bf00      	nop
 8002c36:	3730      	adds	r7, #48	@ 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40004400 	.word	0x40004400
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40004800 	.word	0x40004800
 8002c4c:	40020800 	.word	0x40020800
 8002c50:	40020400 	.word	0x40020400

08002c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <NMI_Handler+0x4>

08002c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <HardFault_Handler+0x4>

08002c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <MemManage_Handler+0x4>

08002c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <BusFault_Handler+0x4>

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <UsageFault_Handler+0x4>

08002c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002caa:	f000 f8c7 	bl	8002e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cbc:	4a14      	ldr	r2, [pc, #80]	@ (8002d10 <_sbrk+0x5c>)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <_sbrk+0x60>)
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <_sbrk+0x64>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <_sbrk+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd6:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce4:	f003 fe1c 	bl	8006920 <__errno>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	e009      	b.n	8002d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <_sbrk+0x64>)
 8002d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20020000 	.word	0x20020000
 8002d14:	00000400 	.word	0x00000400
 8002d18:	20000a18 	.word	0x20000a18
 8002d1c:	20000b68 	.word	0x20000b68

08002d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d24:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <SystemInit+0x20>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	4a05      	ldr	r2, [pc, #20]	@ (8002d40 <SystemInit+0x20>)
 8002d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d48:	f7ff ffea 	bl	8002d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d4c:	480c      	ldr	r0, [pc, #48]	@ (8002d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d4e:	490d      	ldr	r1, [pc, #52]	@ (8002d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d50:	4a0d      	ldr	r2, [pc, #52]	@ (8002d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d54:	e002      	b.n	8002d5c <LoopCopyDataInit>

08002d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5a:	3304      	adds	r3, #4

08002d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d60:	d3f9      	bcc.n	8002d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d64:	4c0a      	ldr	r4, [pc, #40]	@ (8002d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d68:	e001      	b.n	8002d6e <LoopFillZerobss>

08002d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d6c:	3204      	adds	r2, #4

08002d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d70:	d3fb      	bcc.n	8002d6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f003 fddb 	bl	800692c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d76:	f7ff fb11 	bl	800239c <main>
  bx  lr    
 8002d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d84:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002d88:	08008758 	.word	0x08008758
  ldr r2, =_sbss
 8002d8c:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002d90:	20000b68 	.word	0x20000b68

08002d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC_IRQHandler>
	...

08002d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <HAL_Init+0x40>)
 8002da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <HAL_Init+0x40>)
 8002dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db4:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a07      	ldr	r2, [pc, #28]	@ (8002dd8 <HAL_Init+0x40>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f000 f931 	bl	8003028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc6:	200f      	movs	r0, #15
 8002dc8:	f000 f808 	bl	8002ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dcc:	f7ff fd9a 	bl	8002904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00

08002ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_InitTick+0x54>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_InitTick+0x58>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f93b 	bl	8003076 <HAL_SYSTICK_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e00e      	b.n	8002e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b0f      	cmp	r3, #15
 8002e0e:	d80a      	bhi.n	8002e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e10:	2200      	movs	r2, #0
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	f000 f911 	bl	800303e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e1c:	4a06      	ldr	r2, [pc, #24]	@ (8002e38 <HAL_InitTick+0x5c>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000058 	.word	0x20000058
 8002e34:	20000060 	.word	0x20000060
 8002e38:	2000005c 	.word	0x2000005c

08002e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000060 	.word	0x20000060
 8002e60:	20000a1c 	.word	0x20000a1c

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000a1c 	.word	0x20000a1c

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff ffee 	bl	8002e64 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_Delay+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ea2:	bf00      	nop
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000060 	.word	0x20000060

08002ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	@ (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	@ (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	@ 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ff4:	d301      	bcc.n	8002ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00f      	b.n	800301a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <SysTick_Config+0x40>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003002:	210f      	movs	r1, #15
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	f7ff ff8e 	bl	8002f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300c:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <SysTick_Config+0x40>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003012:	4b04      	ldr	r3, [pc, #16]	@ (8003024 <SysTick_Config+0x40>)
 8003014:	2207      	movs	r2, #7
 8003016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000e010 	.word	0xe000e010

08003028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff47 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003050:	f7ff ff5c 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 8003054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	6978      	ldr	r0, [r7, #20]
 800305c:	f7ff ff8e 	bl	8002f7c <NVIC_EncodePriority>
 8003060:	4602      	mov	r2, r0
 8003062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff5d 	bl	8002f28 <__NVIC_SetPriority>
}
 800306e:	bf00      	nop
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffb0 	bl	8002fe4 <SysTick_Config>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	@ 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e165      	b.n	8003378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030ac:	2201      	movs	r2, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f040 8154 	bne.w	8003372 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d005      	beq.n	80030e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d130      	bne.n	8003144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b03      	cmp	r3, #3
 800314e:	d017      	beq.n	8003180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d123      	bne.n	80031d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	08da      	lsrs	r2, r3, #3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3208      	adds	r2, #8
 8003194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	08da      	lsrs	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3208      	adds	r2, #8
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0203 	and.w	r2, r3, #3
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80ae 	beq.w	8003372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b5d      	ldr	r3, [pc, #372]	@ (8003390 <HAL_GPIO_Init+0x300>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	4a5c      	ldr	r2, [pc, #368]	@ (8003390 <HAL_GPIO_Init+0x300>)
 8003220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003224:	6453      	str	r3, [r2, #68]	@ 0x44
 8003226:	4b5a      	ldr	r3, [pc, #360]	@ (8003390 <HAL_GPIO_Init+0x300>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003232:	4a58      	ldr	r2, [pc, #352]	@ (8003394 <HAL_GPIO_Init+0x304>)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	220f      	movs	r2, #15
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4f      	ldr	r2, [pc, #316]	@ (8003398 <HAL_GPIO_Init+0x308>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d025      	beq.n	80032aa <HAL_GPIO_Init+0x21a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4e      	ldr	r2, [pc, #312]	@ (800339c <HAL_GPIO_Init+0x30c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01f      	beq.n	80032a6 <HAL_GPIO_Init+0x216>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4d      	ldr	r2, [pc, #308]	@ (80033a0 <HAL_GPIO_Init+0x310>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d019      	beq.n	80032a2 <HAL_GPIO_Init+0x212>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4c      	ldr	r2, [pc, #304]	@ (80033a4 <HAL_GPIO_Init+0x314>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_GPIO_Init+0x20e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4b      	ldr	r2, [pc, #300]	@ (80033a8 <HAL_GPIO_Init+0x318>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00d      	beq.n	800329a <HAL_GPIO_Init+0x20a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4a      	ldr	r2, [pc, #296]	@ (80033ac <HAL_GPIO_Init+0x31c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <HAL_GPIO_Init+0x206>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a49      	ldr	r2, [pc, #292]	@ (80033b0 <HAL_GPIO_Init+0x320>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <HAL_GPIO_Init+0x202>
 800328e:	2306      	movs	r3, #6
 8003290:	e00c      	b.n	80032ac <HAL_GPIO_Init+0x21c>
 8003292:	2307      	movs	r3, #7
 8003294:	e00a      	b.n	80032ac <HAL_GPIO_Init+0x21c>
 8003296:	2305      	movs	r3, #5
 8003298:	e008      	b.n	80032ac <HAL_GPIO_Init+0x21c>
 800329a:	2304      	movs	r3, #4
 800329c:	e006      	b.n	80032ac <HAL_GPIO_Init+0x21c>
 800329e:	2303      	movs	r3, #3
 80032a0:	e004      	b.n	80032ac <HAL_GPIO_Init+0x21c>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e002      	b.n	80032ac <HAL_GPIO_Init+0x21c>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_GPIO_Init+0x21c>
 80032aa:	2300      	movs	r3, #0
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	f002 0203 	and.w	r2, r2, #3
 80032b2:	0092      	lsls	r2, r2, #2
 80032b4:	4093      	lsls	r3, r2
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032bc:	4935      	ldr	r1, [pc, #212]	@ (8003394 <HAL_GPIO_Init+0x304>)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	3302      	adds	r3, #2
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ca:	4b3a      	ldr	r3, [pc, #232]	@ (80033b4 <HAL_GPIO_Init+0x324>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ee:	4a31      	ldr	r2, [pc, #196]	@ (80033b4 <HAL_GPIO_Init+0x324>)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032f4:	4b2f      	ldr	r3, [pc, #188]	@ (80033b4 <HAL_GPIO_Init+0x324>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003318:	4a26      	ldr	r2, [pc, #152]	@ (80033b4 <HAL_GPIO_Init+0x324>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800331e:	4b25      	ldr	r3, [pc, #148]	@ (80033b4 <HAL_GPIO_Init+0x324>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003342:	4a1c      	ldr	r2, [pc, #112]	@ (80033b4 <HAL_GPIO_Init+0x324>)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003348:	4b1a      	ldr	r3, [pc, #104]	@ (80033b4 <HAL_GPIO_Init+0x324>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800336c:	4a11      	ldr	r2, [pc, #68]	@ (80033b4 <HAL_GPIO_Init+0x324>)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3301      	adds	r3, #1
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	f67f ae96 	bls.w	80030ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	3724      	adds	r7, #36	@ 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800
 8003394:	40013800 	.word	0x40013800
 8003398:	40020000 	.word	0x40020000
 800339c:	40020400 	.word	0x40020400
 80033a0:	40020800 	.word	0x40020800
 80033a4:	40020c00 	.word	0x40020c00
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40021400 	.word	0x40021400
 80033b0:	40021800 	.word	0x40021800
 80033b4:	40013c00 	.word	0x40013c00

080033b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033d4:	e003      	b.n	80033de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033d6:	887b      	ldrh	r3, [r7, #2]
 80033d8:	041a      	lsls	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	619a      	str	r2, [r3, #24]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e12b      	b.n	8003656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff fa9e 	bl	8002954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	@ 0x24
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800343e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800344e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003450:	f001 fa48 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 8003454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4a81      	ldr	r2, [pc, #516]	@ (8003660 <HAL_I2C_Init+0x274>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d807      	bhi.n	8003470 <HAL_I2C_Init+0x84>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a80      	ldr	r2, [pc, #512]	@ (8003664 <HAL_I2C_Init+0x278>)
 8003464:	4293      	cmp	r3, r2
 8003466:	bf94      	ite	ls
 8003468:	2301      	movls	r3, #1
 800346a:	2300      	movhi	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e006      	b.n	800347e <HAL_I2C_Init+0x92>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a7d      	ldr	r2, [pc, #500]	@ (8003668 <HAL_I2C_Init+0x27c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0e7      	b.n	8003656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a78      	ldr	r2, [pc, #480]	@ (800366c <HAL_I2C_Init+0x280>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0c9b      	lsrs	r3, r3, #18
 8003490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003660 <HAL_I2C_Init+0x274>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d802      	bhi.n	80034c0 <HAL_I2C_Init+0xd4>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3301      	adds	r3, #1
 80034be:	e009      	b.n	80034d4 <HAL_I2C_Init+0xe8>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	4a69      	ldr	r2, [pc, #420]	@ (8003670 <HAL_I2C_Init+0x284>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	3301      	adds	r3, #1
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	430b      	orrs	r3, r1
 80034da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	495c      	ldr	r1, [pc, #368]	@ (8003660 <HAL_I2C_Init+0x274>)
 80034f0:	428b      	cmp	r3, r1
 80034f2:	d819      	bhi.n	8003528 <HAL_I2C_Init+0x13c>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1e59      	subs	r1, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003502:	1c59      	adds	r1, r3, #1
 8003504:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003508:	400b      	ands	r3, r1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_I2C_Init+0x138>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1e59      	subs	r1, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fbb1 f3f3 	udiv	r3, r1, r3
 800351c:	3301      	adds	r3, #1
 800351e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003522:	e051      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 8003524:	2304      	movs	r3, #4
 8003526:	e04f      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <HAL_I2C_Init+0x168>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	440b      	add	r3, r1
 800353e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003542:	3301      	adds	r3, #1
 8003544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e012      	b.n	800357a <HAL_I2C_Init+0x18e>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	0099      	lsls	r1, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	fbb0 f3f3 	udiv	r3, r0, r3
 800356a:	3301      	adds	r3, #1
 800356c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Init+0x196>
 800357e:	2301      	movs	r3, #1
 8003580:	e022      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10e      	bne.n	80035a8 <HAL_I2C_Init+0x1bc>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1e58      	subs	r0, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	440b      	add	r3, r1
 8003598:	fbb0 f3f3 	udiv	r3, r0, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035a6:	e00f      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	0099      	lsls	r1, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	6809      	ldr	r1, [r1, #0]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6911      	ldr	r1, [r2, #16]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68d2      	ldr	r2, [r2, #12]
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	000186a0 	.word	0x000186a0
 8003664:	001e847f 	.word	0x001e847f
 8003668:	003d08ff 	.word	0x003d08ff
 800366c:	431bde83 	.word	0x431bde83
 8003670:	10624dd3 	.word	0x10624dd3

08003674 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	460b      	mov	r3, r1
 8003682:	817b      	strh	r3, [r7, #10]
 8003684:	4613      	mov	r3, r2
 8003686:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003688:	f7ff fbec 	bl	8002e64 <HAL_GetTick>
 800368c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 80e0 	bne.w	800385c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2319      	movs	r3, #25
 80036a2:	2201      	movs	r2, #1
 80036a4:	4970      	ldr	r1, [pc, #448]	@ (8003868 <HAL_I2C_Master_Transmit+0x1f4>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fdf4 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	e0d3      	b.n	800385e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2C_Master_Transmit+0x50>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0cc      	b.n	800385e <HAL_I2C_Master_Transmit+0x1ea>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d007      	beq.n	80036ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2221      	movs	r2, #33	@ 0x21
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2210      	movs	r2, #16
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	893a      	ldrh	r2, [r7, #8]
 800371a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a50      	ldr	r2, [pc, #320]	@ (800386c <HAL_I2C_Master_Transmit+0x1f8>)
 800372a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800372c:	8979      	ldrh	r1, [r7, #10]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fbc8 	bl	8003ec8 <I2C_MasterRequestWrite>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e08d      	b.n	800385e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003758:	e066      	b.n	8003828 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	6a39      	ldr	r1, [r7, #32]
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 feb2 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	2b04      	cmp	r3, #4
 8003770:	d107      	bne.n	8003782 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003780:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e06b      	b.n	800385e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d11b      	bne.n	80037fc <HAL_I2C_Master_Transmit+0x188>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d017      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	6a39      	ldr	r1, [r7, #32]
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fea9 	bl	8004558 <I2C_WaitOnBTFFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00d      	beq.n	8003828 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	2b04      	cmp	r3, #4
 8003812:	d107      	bne.n	8003824 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003822:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e01a      	b.n	800385e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d194      	bne.n	800375a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800383e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	e000      	b.n	800385e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	00100002 	.word	0x00100002
 800386c:	ffff0000 	.word	0xffff0000

08003870 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	@ 0x30
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	460b      	mov	r3, r1
 800387e:	817b      	strh	r3, [r7, #10]
 8003880:	4613      	mov	r3, r2
 8003882:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003884:	f7ff faee 	bl	8002e64 <HAL_GetTick>
 8003888:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 8217 	bne.w	8003cc6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2319      	movs	r3, #25
 800389e:	2201      	movs	r2, #1
 80038a0:	497c      	ldr	r1, [pc, #496]	@ (8003a94 <HAL_I2C_Master_Receive+0x224>)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fcf6 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
 80038b0:	e20a      	b.n	8003cc8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_I2C_Master_Receive+0x50>
 80038bc:	2302      	movs	r3, #2
 80038be:	e203      	b.n	8003cc8 <HAL_I2C_Master_Receive+0x458>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d007      	beq.n	80038e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2222      	movs	r2, #34	@ 0x22
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2210      	movs	r2, #16
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	893a      	ldrh	r2, [r7, #8]
 8003916:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a5c      	ldr	r2, [pc, #368]	@ (8003a98 <HAL_I2C_Master_Receive+0x228>)
 8003926:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003928:	8979      	ldrh	r1, [r7, #10]
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fb4c 	bl	8003fcc <I2C_MasterRequestRead>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e1c4      	b.n	8003cc8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d113      	bne.n	800396e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	623b      	str	r3, [r7, #32]
 800395a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e198      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003972:	2b01      	cmp	r3, #1
 8003974:	d11b      	bne.n	80039ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	e178      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d11b      	bne.n	80039ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	e158      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a14:	e144      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	f200 80f1 	bhi.w	8003c02 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d123      	bne.n	8003a70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fddb 	bl	80045e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e145      	b.n	8003cc8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a6e:	e117      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d14e      	bne.n	8003b16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	2200      	movs	r2, #0
 8003a80:	4906      	ldr	r1, [pc, #24]	@ (8003a9c <HAL_I2C_Master_Receive+0x22c>)
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fc06 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e11a      	b.n	8003cc8 <HAL_I2C_Master_Receive+0x458>
 8003a92:	bf00      	nop
 8003a94:	00100002 	.word	0x00100002
 8003a98:	ffff0000 	.word	0xffff0000
 8003a9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b14:	e0c4      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	496c      	ldr	r1, [pc, #432]	@ (8003cd0 <HAL_I2C_Master_Receive+0x460>)
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fbb7 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0cb      	b.n	8003cc8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b78:	2200      	movs	r2, #0
 8003b7a:	4955      	ldr	r1, [pc, #340]	@ (8003cd0 <HAL_I2C_Master_Receive+0x460>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fb89 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e09d      	b.n	8003cc8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c00:	e04e      	b.n	8003ca0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fcee 	bl	80045e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e058      	b.n	8003cc8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d124      	bne.n	8003ca0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d107      	bne.n	8003c6e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c6c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f aeb6 	bne.w	8003a16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e000      	b.n	8003cc8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3728      	adds	r7, #40	@ 0x28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	00010004 	.word	0x00010004

08003cd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cee:	f7ff f8b9 	bl	8002e64 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	f040 80d9 	bne.w	8003eb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2319      	movs	r3, #25
 8003d08:	2201      	movs	r2, #1
 8003d0a:	496d      	ldr	r1, [pc, #436]	@ (8003ec0 <HAL_I2C_Mem_Write+0x1ec>)
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fac1 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e0cc      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_I2C_Mem_Write+0x56>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0c5      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d007      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2221      	movs	r2, #33	@ 0x21
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2240      	movs	r2, #64	@ 0x40
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec4 <HAL_I2C_Mem_Write+0x1f0>)
 8003d90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d92:	88f8      	ldrh	r0, [r7, #6]
 8003d94:	893a      	ldrh	r2, [r7, #8]
 8003d96:	8979      	ldrh	r1, [r7, #10]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4603      	mov	r3, r0
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f9e0 	bl	8004168 <I2C_RequestMemoryWrite>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d052      	beq.n	8003e54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e081      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fb86 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d107      	bne.n	8003dda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e06b      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d11b      	bne.n	8003e54 <HAL_I2C_Mem_Write+0x180>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d017      	beq.n	8003e54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1aa      	bne.n	8003db2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fb79 	bl	8004558 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00d      	beq.n	8003e88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d107      	bne.n	8003e84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e016      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e000      	b.n	8003eb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
  }
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	00100002 	.word	0x00100002
 8003ec4:	ffff0000 	.word	0xffff0000

08003ec8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d006      	beq.n	8003ef2 <I2C_MasterRequestWrite+0x2a>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d003      	beq.n	8003ef2 <I2C_MasterRequestWrite+0x2a>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ef0:	d108      	bne.n	8003f04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e00b      	b.n	8003f1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	2b12      	cmp	r3, #18
 8003f0a:	d107      	bne.n	8003f1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f9b3 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00d      	beq.n	8003f50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f42:	d103      	bne.n	8003f4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e035      	b.n	8003fbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f58:	d108      	bne.n	8003f6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f5a:	897b      	ldrh	r3, [r7, #10]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f68:	611a      	str	r2, [r3, #16]
 8003f6a:	e01b      	b.n	8003fa4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f6c:	897b      	ldrh	r3, [r7, #10]
 8003f6e:	11db      	asrs	r3, r3, #7
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0306 	and.w	r3, r3, #6
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f063 030f 	orn	r3, r3, #15
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	490e      	ldr	r1, [pc, #56]	@ (8003fc4 <I2C_MasterRequestWrite+0xfc>)
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f9fc 	bl	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e010      	b.n	8003fbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	4907      	ldr	r1, [pc, #28]	@ (8003fc8 <I2C_MasterRequestWrite+0x100>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f9ec 	bl	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	00010008 	.word	0x00010008
 8003fc8:	00010002 	.word	0x00010002

08003fcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d006      	beq.n	8004006 <I2C_MasterRequestRead+0x3a>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d003      	beq.n	8004006 <I2C_MasterRequestRead+0x3a>
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004004:	d108      	bne.n	8004018 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e00b      	b.n	8004030 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401c:	2b11      	cmp	r3, #17
 800401e:	d107      	bne.n	8004030 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800402e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f929 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004056:	d103      	bne.n	8004060 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800405e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e079      	b.n	8004158 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800406c:	d108      	bne.n	8004080 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	b2da      	uxtb	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	611a      	str	r2, [r3, #16]
 800407e:	e05f      	b.n	8004140 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004080:	897b      	ldrh	r3, [r7, #10]
 8004082:	11db      	asrs	r3, r3, #7
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f003 0306 	and.w	r3, r3, #6
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f063 030f 	orn	r3, r3, #15
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4930      	ldr	r1, [pc, #192]	@ (8004160 <I2C_MasterRequestRead+0x194>)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f972 	bl	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e054      	b.n	8004158 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4929      	ldr	r1, [pc, #164]	@ (8004164 <I2C_MasterRequestRead+0x198>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f962 	bl	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e044      	b.n	8004158 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f8c7 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00d      	beq.n	8004128 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800411a:	d103      	bne.n	8004124 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004122:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e017      	b.n	8004158 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004128:	897b      	ldrh	r3, [r7, #10]
 800412a:	11db      	asrs	r3, r3, #7
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0306 	and.w	r3, r3, #6
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f063 030e 	orn	r3, r3, #14
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4907      	ldr	r1, [pc, #28]	@ (8004164 <I2C_MasterRequestRead+0x198>)
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f91e 	bl	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	00010008 	.word	0x00010008
 8004164:	00010002 	.word	0x00010002

08004168 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	461a      	mov	r2, r3
 8004176:	4603      	mov	r3, r0
 8004178:	817b      	strh	r3, [r7, #10]
 800417a:	460b      	mov	r3, r1
 800417c:	813b      	strh	r3, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	2200      	movs	r2, #0
 800419a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f878 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b8:	d103      	bne.n	80041c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e05f      	b.n	8004286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	6a3a      	ldr	r2, [r7, #32]
 80041da:	492d      	ldr	r1, [pc, #180]	@ (8004290 <I2C_RequestMemoryWrite+0x128>)
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f8d3 	bl	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e04c      	b.n	8004286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004204:	6a39      	ldr	r1, [r7, #32]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f95e 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00d      	beq.n	800422e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	2b04      	cmp	r3, #4
 8004218:	d107      	bne.n	800422a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e02b      	b.n	8004286 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004234:	893b      	ldrh	r3, [r7, #8]
 8004236:	b2da      	uxtb	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	611a      	str	r2, [r3, #16]
 800423e:	e021      	b.n	8004284 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004240:	893b      	ldrh	r3, [r7, #8]
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	b29b      	uxth	r3, r3
 8004246:	b2da      	uxtb	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	6a39      	ldr	r1, [r7, #32]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f938 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00d      	beq.n	800427a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	2b04      	cmp	r3, #4
 8004264:	d107      	bne.n	8004276 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e005      	b.n	8004286 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800427a:	893b      	ldrh	r3, [r7, #8]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	00010002 	.word	0x00010002

08004294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a4:	e048      	b.n	8004338 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d044      	beq.n	8004338 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fe fdd9 	bl	8002e64 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d139      	bne.n	8004338 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10d      	bne.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	e00c      	b.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	43da      	mvns	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	429a      	cmp	r2, r3
 8004308:	d116      	bne.n	8004338 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e023      	b.n	8004380 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	0c1b      	lsrs	r3, r3, #16
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b01      	cmp	r3, #1
 8004340:	d10d      	bne.n	800435e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	43da      	mvns	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4013      	ands	r3, r2
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	e00c      	b.n	8004378 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	43da      	mvns	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4013      	ands	r3, r2
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	429a      	cmp	r2, r3
 800437c:	d093      	beq.n	80042a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004396:	e071      	b.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a6:	d123      	bne.n	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	f043 0204 	orr.w	r2, r3, #4
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e067      	b.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d041      	beq.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f8:	f7fe fd34 	bl	8002e64 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d136      	bne.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10c      	bne.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	43da      	mvns	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf14      	ite	ne
 800442a:	2301      	movne	r3, #1
 800442c:	2300      	moveq	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e00b      	b.n	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	43da      	mvns	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e021      	b.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	0c1b      	lsrs	r3, r3, #16
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d10c      	bne.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	43da      	mvns	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4013      	ands	r3, r2
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf14      	ite	ne
 8004498:	2301      	movne	r3, #1
 800449a:	2300      	moveq	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e00b      	b.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	43da      	mvns	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4013      	ands	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf14      	ite	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	2300      	moveq	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f47f af6d 	bne.w	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d4:	e034      	b.n	8004540 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f8e3 	bl	80046a2 <I2C_IsAcknowledgeFailed>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e034      	b.n	8004550 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d028      	beq.n	8004540 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ee:	f7fe fcb9 	bl	8002e64 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d11d      	bne.n	8004540 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450e:	2b80      	cmp	r3, #128	@ 0x80
 8004510:	d016      	beq.n	8004540 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e007      	b.n	8004550 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454a:	2b80      	cmp	r3, #128	@ 0x80
 800454c:	d1c3      	bne.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004564:	e034      	b.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f89b 	bl	80046a2 <I2C_IsAcknowledgeFailed>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e034      	b.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d028      	beq.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457e:	f7fe fc71 	bl	8002e64 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11d      	bne.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d016      	beq.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e007      	b.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d1c3      	bne.n	8004566 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045f4:	e049      	b.n	800468a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b10      	cmp	r3, #16
 8004602:	d119      	bne.n	8004638 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0210 	mvn.w	r2, #16
 800460c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e030      	b.n	800469a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004638:	f7fe fc14 	bl	8002e64 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11d      	bne.n	800468a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004658:	2b40      	cmp	r3, #64	@ 0x40
 800465a:	d016      	beq.n	800468a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e007      	b.n	800469a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d1ae      	bne.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b8:	d11b      	bne.n	80046f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	f043 0204 	orr.w	r2, r3, #4
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0cc      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004714:	4b68      	ldr	r3, [pc, #416]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d90c      	bls.n	800473c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b65      	ldr	r3, [pc, #404]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b63      	ldr	r3, [pc, #396]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0b8      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004754:	4b59      	ldr	r3, [pc, #356]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a58      	ldr	r2, [pc, #352]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800475e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800476c:	4b53      	ldr	r3, [pc, #332]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a52      	ldr	r2, [pc, #328]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b50      	ldr	r3, [pc, #320]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	494d      	ldr	r1, [pc, #308]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d044      	beq.n	8004820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b47      	ldr	r3, [pc, #284]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d119      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d003      	beq.n	80047be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047be:	4b3f      	ldr	r3, [pc, #252]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e06f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ce:	4b3b      	ldr	r3, [pc, #236]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e067      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047de:	4b37      	ldr	r3, [pc, #220]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 0203 	bic.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4934      	ldr	r1, [pc, #208]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f0:	f7fe fb38 	bl	8002e64 <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f6:	e00a      	b.n	800480e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f7fe fb34 	bl	8002e64 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e04f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	4b2b      	ldr	r3, [pc, #172]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 020c 	and.w	r2, r3, #12
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	429a      	cmp	r2, r3
 800481e:	d1eb      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004820:	4b25      	ldr	r3, [pc, #148]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d20c      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b22      	ldr	r3, [pc, #136]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b20      	ldr	r3, [pc, #128]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e032      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	4b19      	ldr	r3, [pc, #100]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4916      	ldr	r1, [pc, #88]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004872:	4b12      	ldr	r3, [pc, #72]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	490e      	ldr	r1, [pc, #56]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004886:	f000 f855 	bl	8004934 <HAL_RCC_GetSysClockFreq>
 800488a:	4602      	mov	r2, r0
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	490a      	ldr	r1, [pc, #40]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	5ccb      	ldrb	r3, [r1, r3]
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	4a09      	ldr	r2, [pc, #36]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048a2:	4b09      	ldr	r3, [pc, #36]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe fa98 	bl	8002ddc <HAL_InitTick>

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023c00 	.word	0x40023c00
 80048bc:	40023800 	.word	0x40023800
 80048c0:	08008558 	.word	0x08008558
 80048c4:	20000058 	.word	0x20000058
 80048c8:	2000005c 	.word	0x2000005c

080048cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d0:	4b03      	ldr	r3, [pc, #12]	@ (80048e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000058 	.word	0x20000058

080048e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048e8:	f7ff fff0 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0a9b      	lsrs	r3, r3, #10
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4903      	ldr	r1, [pc, #12]	@ (8004908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40023800 	.word	0x40023800
 8004908:	08008568 	.word	0x08008568

0800490c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004910:	f7ff ffdc 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b05      	ldr	r3, [pc, #20]	@ (800492c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0b5b      	lsrs	r3, r3, #13
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4903      	ldr	r1, [pc, #12]	@ (8004930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	08008568 	.word	0x08008568

08004934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004938:	b0a6      	sub	sp, #152	@ 0x98
 800493a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495a:	4bc8      	ldr	r3, [pc, #800]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b0c      	cmp	r3, #12
 8004964:	f200 817e 	bhi.w	8004c64 <HAL_RCC_GetSysClockFreq+0x330>
 8004968:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <HAL_RCC_GetSysClockFreq+0x3c>)
 800496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496e:	bf00      	nop
 8004970:	080049a5 	.word	0x080049a5
 8004974:	08004c65 	.word	0x08004c65
 8004978:	08004c65 	.word	0x08004c65
 800497c:	08004c65 	.word	0x08004c65
 8004980:	080049ad 	.word	0x080049ad
 8004984:	08004c65 	.word	0x08004c65
 8004988:	08004c65 	.word	0x08004c65
 800498c:	08004c65 	.word	0x08004c65
 8004990:	080049b5 	.word	0x080049b5
 8004994:	08004c65 	.word	0x08004c65
 8004998:	08004c65 	.word	0x08004c65
 800499c:	08004c65 	.word	0x08004c65
 80049a0:	08004b1f 	.word	0x08004b1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a4:	4bb6      	ldr	r3, [pc, #728]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80049aa:	e15f      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ac:	4bb5      	ldr	r3, [pc, #724]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x350>)
 80049ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80049b2:	e15b      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b4:	4bb1      	ldr	r3, [pc, #708]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c0:	4bae      	ldr	r3, [pc, #696]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d031      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049cc:	4bab      	ldr	r3, [pc, #684]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	099b      	lsrs	r3, r3, #6
 80049d2:	2200      	movs	r2, #0
 80049d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049de:	663b      	str	r3, [r7, #96]	@ 0x60
 80049e0:	2300      	movs	r3, #0
 80049e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80049e4:	4ba7      	ldr	r3, [pc, #668]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x350>)
 80049e6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80049ea:	462a      	mov	r2, r5
 80049ec:	fb03 f202 	mul.w	r2, r3, r2
 80049f0:	2300      	movs	r3, #0
 80049f2:	4621      	mov	r1, r4
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	4aa2      	ldr	r2, [pc, #648]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x350>)
 80049fc:	4621      	mov	r1, r4
 80049fe:	fba1 1202 	umull	r1, r2, r1, r2
 8004a02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a04:	460a      	mov	r2, r1
 8004a06:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004a08:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a0a:	4413      	add	r3, r2
 8004a0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a12:	2200      	movs	r2, #0
 8004a14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a16:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004a18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a1c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004a20:	f7fc f932 	bl	8000c88 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a2e:	e064      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a30:	4b92      	ldr	r3, [pc, #584]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	099b      	lsrs	r3, r3, #6
 8004a36:	2200      	movs	r2, #0
 8004a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a3a:	657a      	str	r2, [r7, #84]	@ 0x54
 8004a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a44:	2300      	movs	r3, #0
 8004a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a48:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	462b      	mov	r3, r5
 8004a50:	f04f 0000 	mov.w	r0, #0
 8004a54:	f04f 0100 	mov.w	r1, #0
 8004a58:	0159      	lsls	r1, r3, #5
 8004a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a5e:	0150      	lsls	r0, r2, #5
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4621      	mov	r1, r4
 8004a66:	1a51      	subs	r1, r2, r1
 8004a68:	6139      	str	r1, [r7, #16]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	eb63 0301 	sbc.w	r3, r3, r1
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a7e:	4659      	mov	r1, fp
 8004a80:	018b      	lsls	r3, r1, #6
 8004a82:	4651      	mov	r1, sl
 8004a84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a88:	4651      	mov	r1, sl
 8004a8a:	018a      	lsls	r2, r1, #6
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	ebb2 0801 	subs.w	r8, r2, r1
 8004a92:	4659      	mov	r1, fp
 8004a94:	eb63 0901 	sbc.w	r9, r3, r1
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aa4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aa8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aac:	4690      	mov	r8, r2
 8004aae:	4699      	mov	r9, r3
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	eb18 0303 	adds.w	r3, r8, r3
 8004ab6:	60bb      	str	r3, [r7, #8]
 8004ab8:	462b      	mov	r3, r5
 8004aba:	eb49 0303 	adc.w	r3, r9, r3
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004acc:	4629      	mov	r1, r5
 8004ace:	028b      	lsls	r3, r1, #10
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	028a      	lsls	r2, r1, #10
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ae6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ae8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004aec:	f7fc f8cc 	bl	8000c88 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4613      	mov	r3, r2
 8004af6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004afa:	4b60      	ldr	r3, [pc, #384]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	3301      	adds	r3, #1
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004b0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004b1c:	e0a6      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b1e:	4b57      	ldr	r3, [pc, #348]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b2a:	4b54      	ldr	r3, [pc, #336]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02a      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b36:	4b51      	ldr	r3, [pc, #324]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	099b      	lsrs	r3, r3, #6
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b4c:	fb03 f201 	mul.w	r2, r3, r1
 8004b50:	2300      	movs	r3, #0
 8004b52:	fb00 f303 	mul.w	r3, r0, r3
 8004b56:	4413      	add	r3, r2
 8004b58:	4a4a      	ldr	r2, [pc, #296]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b60:	460a      	mov	r2, r1
 8004b62:	673a      	str	r2, [r7, #112]	@ 0x70
 8004b64:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b66:	4413      	add	r3, r2
 8004b68:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b6e:	2200      	movs	r2, #0
 8004b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b72:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004b78:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004b7c:	f7fc f884 	bl	8000c88 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4613      	mov	r3, r2
 8004b86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b8a:	e05b      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	099b      	lsrs	r3, r3, #6
 8004b92:	2200      	movs	r2, #0
 8004b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9e:	623b      	str	r3, [r7, #32]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	f04f 0000 	mov.w	r0, #0
 8004bb0:	f04f 0100 	mov.w	r1, #0
 8004bb4:	0159      	lsls	r1, r3, #5
 8004bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bba:	0150      	lsls	r0, r2, #5
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004be0:	ebb2 040a 	subs.w	r4, r2, sl
 8004be4:	eb63 050b 	sbc.w	r5, r3, fp
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	00eb      	lsls	r3, r5, #3
 8004bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf6:	00e2      	lsls	r2, r4, #3
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	461d      	mov	r5, r3
 8004bfc:	4643      	mov	r3, r8
 8004bfe:	18e3      	adds	r3, r4, r3
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	464b      	mov	r3, r9
 8004c04:	eb45 0303 	adc.w	r3, r5, r3
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c16:	4629      	mov	r1, r5
 8004c18:	028b      	lsls	r3, r1, #10
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c20:	4621      	mov	r1, r4
 8004c22:	028a      	lsls	r2, r1, #10
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	61fa      	str	r2, [r7, #28]
 8004c32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c36:	f7fc f827 	bl	8000c88 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4613      	mov	r3, r2
 8004c40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c44:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x348>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	0f1b      	lsrs	r3, r3, #28
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004c62:	e003      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c64:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004c6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3798      	adds	r7, #152	@ 0x98
 8004c74:	46bd      	mov	sp, r7
 8004c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	00f42400 	.word	0x00f42400
 8004c84:	017d7840 	.word	0x017d7840

08004c88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e28d      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8083 	beq.w	8004dae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ca8:	4b94      	ldr	r3, [pc, #592]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d019      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004cb4:	4b91      	ldr	r3, [pc, #580]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 030c 	and.w	r3, r3, #12
        || \
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cce:	4b8b      	ldr	r3, [pc, #556]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	d112      	bne.n	8004d00 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cda:	4b88      	ldr	r3, [pc, #544]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ce6:	d10b      	bne.n	8004d00 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	4b84      	ldr	r3, [pc, #528]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05b      	beq.n	8004dac <HAL_RCC_OscConfig+0x124>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d157      	bne.n	8004dac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e25a      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_OscConfig+0x90>
 8004d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a7b      	ldr	r2, [pc, #492]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e01d      	b.n	8004d54 <HAL_RCC_OscConfig+0xcc>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCC_OscConfig+0xb4>
 8004d22:	4b76      	ldr	r3, [pc, #472]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a75      	ldr	r2, [pc, #468]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	4b73      	ldr	r3, [pc, #460]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a72      	ldr	r2, [pc, #456]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0xcc>
 8004d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a6e      	ldr	r2, [pc, #440]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	4b6c      	ldr	r3, [pc, #432]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a6b      	ldr	r2, [pc, #428]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d013      	beq.n	8004d84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7fe f882 	bl	8002e64 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fe f87e 	bl	8002e64 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	@ 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e21f      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b61      	ldr	r3, [pc, #388]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0xdc>
 8004d82:	e014      	b.n	8004dae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7fe f86e 	bl	8002e64 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7fe f86a 	bl	8002e64 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	@ 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e20b      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9e:	4b57      	ldr	r3, [pc, #348]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x104>
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d06f      	beq.n	8004e9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004dba:	4b50      	ldr	r3, [pc, #320]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d017      	beq.n	8004df6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
        || \
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d105      	bne.n	8004dde <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dde:	4b47      	ldr	r3, [pc, #284]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004de6:	2b0c      	cmp	r3, #12
 8004de8:	d11c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dea:	4b44      	ldr	r3, [pc, #272]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df6:	4b41      	ldr	r3, [pc, #260]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCC_OscConfig+0x186>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e1d3      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4937      	ldr	r1, [pc, #220]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e22:	e03a      	b.n	8004e9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2c:	4b34      	ldr	r3, [pc, #208]	@ (8004f00 <HAL_RCC_OscConfig+0x278>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e32:	f7fe f817 	bl	8002e64 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3a:	f7fe f813 	bl	8002e64 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e1b4      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	4b28      	ldr	r3, [pc, #160]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4925      	ldr	r1, [pc, #148]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]
 8004e6c:	e015      	b.n	8004e9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6e:	4b24      	ldr	r3, [pc, #144]	@ (8004f00 <HAL_RCC_OscConfig+0x278>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fd fff6 	bl	8002e64 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fd fff2 	bl	8002e64 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e193      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d036      	beq.n	8004f14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d016      	beq.n	8004edc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eae:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fd ffd6 	bl	8002e64 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebc:	f7fd ffd2 	bl	8002e64 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e173      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ece:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <HAL_RCC_OscConfig+0x274>)
 8004ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x234>
 8004eda:	e01b      	b.n	8004f14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004edc:	4b09      	ldr	r3, [pc, #36]	@ (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee2:	f7fd ffbf 	bl	8002e64 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee8:	e00e      	b.n	8004f08 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eea:	f7fd ffbb 	bl	8002e64 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d907      	bls.n	8004f08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e15c      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
 8004efc:	40023800 	.word	0x40023800
 8004f00:	42470000 	.word	0x42470000
 8004f04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f08:	4b8a      	ldr	r3, [pc, #552]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1ea      	bne.n	8004eea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8097 	beq.w	8005050 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f26:	4b83      	ldr	r3, [pc, #524]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10f      	bne.n	8004f52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	4b7f      	ldr	r3, [pc, #508]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f42:	4b7c      	ldr	r3, [pc, #496]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f52:	4b79      	ldr	r3, [pc, #484]	@ (8005138 <HAL_RCC_OscConfig+0x4b0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d118      	bne.n	8004f90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f5e:	4b76      	ldr	r3, [pc, #472]	@ (8005138 <HAL_RCC_OscConfig+0x4b0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a75      	ldr	r2, [pc, #468]	@ (8005138 <HAL_RCC_OscConfig+0x4b0>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6a:	f7fd ff7b 	bl	8002e64 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f72:	f7fd ff77 	bl	8002e64 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e118      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f84:	4b6c      	ldr	r3, [pc, #432]	@ (8005138 <HAL_RCC_OscConfig+0x4b0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d106      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x31e>
 8004f98:	4b66      	ldr	r3, [pc, #408]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	4a65      	ldr	r2, [pc, #404]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa4:	e01c      	b.n	8004fe0 <HAL_RCC_OscConfig+0x358>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x340>
 8004fae:	4b61      	ldr	r3, [pc, #388]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	4a60      	ldr	r2, [pc, #384]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004fb4:	f043 0304 	orr.w	r3, r3, #4
 8004fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fba:	4b5e      	ldr	r3, [pc, #376]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbe:	4a5d      	ldr	r2, [pc, #372]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc6:	e00b      	b.n	8004fe0 <HAL_RCC_OscConfig+0x358>
 8004fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fcc:	4a59      	ldr	r2, [pc, #356]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd4:	4b57      	ldr	r3, [pc, #348]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd8:	4a56      	ldr	r2, [pc, #344]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8004fda:	f023 0304 	bic.w	r3, r3, #4
 8004fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d015      	beq.n	8005014 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fd ff3c 	bl	8002e64 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fee:	e00a      	b.n	8005006 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff0:	f7fd ff38 	bl	8002e64 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e0d7      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005006:	4b4b      	ldr	r3, [pc, #300]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8005008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0ee      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x368>
 8005012:	e014      	b.n	800503e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005014:	f7fd ff26 	bl	8002e64 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501a:	e00a      	b.n	8005032 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501c:	f7fd ff22 	bl	8002e64 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e0c1      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005032:	4b40      	ldr	r3, [pc, #256]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1ee      	bne.n	800501c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800503e:	7dfb      	ldrb	r3, [r7, #23]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d105      	bne.n	8005050 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005044:	4b3b      	ldr	r3, [pc, #236]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8005046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005048:	4a3a      	ldr	r2, [pc, #232]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 800504a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800504e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80ad 	beq.w	80051b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800505a:	4b36      	ldr	r3, [pc, #216]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b08      	cmp	r3, #8
 8005064:	d060      	beq.n	8005128 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d145      	bne.n	80050fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506e:	4b33      	ldr	r3, [pc, #204]	@ (800513c <HAL_RCC_OscConfig+0x4b4>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fd fef6 	bl	8002e64 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507c:	f7fd fef2 	bl	8002e64 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e093      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508e:	4b29      	ldr	r3, [pc, #164]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	3b01      	subs	r3, #1
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	061b      	lsls	r3, r3, #24
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	491b      	ldr	r1, [pc, #108]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050cc:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <HAL_RCC_OscConfig+0x4b4>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fd fec7 	bl	8002e64 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050da:	f7fd fec3 	bl	8002e64 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e064      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ec:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCC_OscConfig+0x452>
 80050f8:	e05c      	b.n	80051b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fa:	4b10      	ldr	r3, [pc, #64]	@ (800513c <HAL_RCC_OscConfig+0x4b4>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fd feb0 	bl	8002e64 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005108:	f7fd feac 	bl	8002e64 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e04d      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <HAL_RCC_OscConfig+0x4ac>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x480>
 8005126:	e045      	b.n	80051b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e040      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
 8005134:	40023800 	.word	0x40023800
 8005138:	40007000 	.word	0x40007000
 800513c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005140:	4b1f      	ldr	r3, [pc, #124]	@ (80051c0 <HAL_RCC_OscConfig+0x538>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d030      	beq.n	80051b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d129      	bne.n	80051b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d122      	bne.n	80051b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005178:	4293      	cmp	r3, r2
 800517a:	d119      	bne.n	80051b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	3b01      	subs	r3, #1
 800518a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d10f      	bne.n	80051b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d107      	bne.n	80051b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800

080051c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e041      	b.n	800525a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fd fbfa 	bl	80029e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 fa28 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d109      	bne.n	8005288 <HAL_TIM_PWM_Start+0x24>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e022      	b.n	80052ce <HAL_TIM_PWM_Start+0x6a>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b04      	cmp	r3, #4
 800528c:	d109      	bne.n	80052a2 <HAL_TIM_PWM_Start+0x3e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b01      	cmp	r3, #1
 8005298:	bf14      	ite	ne
 800529a:	2301      	movne	r3, #1
 800529c:	2300      	moveq	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e015      	b.n	80052ce <HAL_TIM_PWM_Start+0x6a>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d109      	bne.n	80052bc <HAL_TIM_PWM_Start+0x58>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e008      	b.n	80052ce <HAL_TIM_PWM_Start+0x6a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	bf14      	ite	ne
 80052c8:	2301      	movne	r3, #1
 80052ca:	2300      	moveq	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e07c      	b.n	80053d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <HAL_TIM_PWM_Start+0x82>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052e4:	e013      	b.n	800530e <HAL_TIM_PWM_Start+0xaa>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d104      	bne.n	80052f6 <HAL_TIM_PWM_Start+0x92>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052f4:	e00b      	b.n	800530e <HAL_TIM_PWM_Start+0xaa>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_PWM_Start+0xa2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005304:	e003      	b.n	800530e <HAL_TIM_PWM_Start+0xaa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2201      	movs	r2, #1
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fbfa 	bl	8005b10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2d      	ldr	r2, [pc, #180]	@ (80053d8 <HAL_TIM_PWM_Start+0x174>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_TIM_PWM_Start+0xcc>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2c      	ldr	r2, [pc, #176]	@ (80053dc <HAL_TIM_PWM_Start+0x178>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d101      	bne.n	8005334 <HAL_TIM_PWM_Start+0xd0>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <HAL_TIM_PWM_Start+0xd2>
 8005334:	2300      	movs	r3, #0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005348:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a22      	ldr	r2, [pc, #136]	@ (80053d8 <HAL_TIM_PWM_Start+0x174>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d022      	beq.n	800539a <HAL_TIM_PWM_Start+0x136>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535c:	d01d      	beq.n	800539a <HAL_TIM_PWM_Start+0x136>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1f      	ldr	r2, [pc, #124]	@ (80053e0 <HAL_TIM_PWM_Start+0x17c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d018      	beq.n	800539a <HAL_TIM_PWM_Start+0x136>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1d      	ldr	r2, [pc, #116]	@ (80053e4 <HAL_TIM_PWM_Start+0x180>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d013      	beq.n	800539a <HAL_TIM_PWM_Start+0x136>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <HAL_TIM_PWM_Start+0x184>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00e      	beq.n	800539a <HAL_TIM_PWM_Start+0x136>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a16      	ldr	r2, [pc, #88]	@ (80053dc <HAL_TIM_PWM_Start+0x178>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d009      	beq.n	800539a <HAL_TIM_PWM_Start+0x136>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a18      	ldr	r2, [pc, #96]	@ (80053ec <HAL_TIM_PWM_Start+0x188>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d004      	beq.n	800539a <HAL_TIM_PWM_Start+0x136>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a16      	ldr	r2, [pc, #88]	@ (80053f0 <HAL_TIM_PWM_Start+0x18c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d111      	bne.n	80053be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b06      	cmp	r3, #6
 80053aa:	d010      	beq.n	80053ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053bc:	e007      	b.n	80053ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40001800 	.word	0x40001800

080053f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fb82 	bl	8005b10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a2e      	ldr	r2, [pc, #184]	@ (80054cc <HAL_TIM_PWM_Stop+0xd8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_TIM_PWM_Stop+0x2c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2d      	ldr	r2, [pc, #180]	@ (80054d0 <HAL_TIM_PWM_Stop+0xdc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <HAL_TIM_PWM_Stop+0x30>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <HAL_TIM_PWM_Stop+0x32>
 8005424:	2300      	movs	r3, #0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d017      	beq.n	800545a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a1a      	ldr	r2, [r3, #32]
 8005430:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10f      	bne.n	800545a <HAL_TIM_PWM_Stop+0x66>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6a1a      	ldr	r2, [r3, #32]
 8005440:	f240 4344 	movw	r3, #1092	@ 0x444
 8005444:	4013      	ands	r3, r2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d107      	bne.n	800545a <HAL_TIM_PWM_Stop+0x66>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005458:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <HAL_TIM_PWM_Stop+0x96>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	f240 4344 	movw	r3, #1092	@ 0x444
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d107      	bne.n	800548a <HAL_TIM_PWM_Stop+0x96>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <HAL_TIM_PWM_Stop+0xa6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005498:	e013      	b.n	80054c2 <HAL_TIM_PWM_Stop+0xce>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b04      	cmp	r3, #4
 800549e:	d104      	bne.n	80054aa <HAL_TIM_PWM_Stop+0xb6>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a8:	e00b      	b.n	80054c2 <HAL_TIM_PWM_Stop+0xce>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_PWM_Stop+0xc6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b8:	e003      	b.n	80054c2 <HAL_TIM_PWM_Stop+0xce>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40010400 	.word	0x40010400

080054d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e0ae      	b.n	8005650 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	f200 809f 	bhi.w	8005640 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005502:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800553d 	.word	0x0800553d
 800550c:	08005641 	.word	0x08005641
 8005510:	08005641 	.word	0x08005641
 8005514:	08005641 	.word	0x08005641
 8005518:	0800557d 	.word	0x0800557d
 800551c:	08005641 	.word	0x08005641
 8005520:	08005641 	.word	0x08005641
 8005524:	08005641 	.word	0x08005641
 8005528:	080055bf 	.word	0x080055bf
 800552c:	08005641 	.word	0x08005641
 8005530:	08005641 	.word	0x08005641
 8005534:	08005641 	.word	0x08005641
 8005538:	080055ff 	.word	0x080055ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f934 	bl	80057b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0208 	orr.w	r2, r2, #8
 8005556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6999      	ldr	r1, [r3, #24]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	619a      	str	r2, [r3, #24]
      break;
 800557a:	e064      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f984 	bl	8005890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6999      	ldr	r1, [r3, #24]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	021a      	lsls	r2, r3, #8
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	619a      	str	r2, [r3, #24]
      break;
 80055bc:	e043      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f9d9 	bl	800597c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0208 	orr.w	r2, r2, #8
 80055d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0204 	bic.w	r2, r2, #4
 80055e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69d9      	ldr	r1, [r3, #28]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	61da      	str	r2, [r3, #28]
      break;
 80055fc:	e023      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fa2d 	bl	8005a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69d9      	ldr	r1, [r3, #28]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	021a      	lsls	r2, r3, #8
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	61da      	str	r2, [r3, #28]
      break;
 800563e:	e002      	b.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	75fb      	strb	r3, [r7, #23]
      break;
 8005644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a46      	ldr	r2, [pc, #280]	@ (8005784 <TIM_Base_SetConfig+0x12c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d013      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005676:	d00f      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a43      	ldr	r2, [pc, #268]	@ (8005788 <TIM_Base_SetConfig+0x130>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00b      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a42      	ldr	r2, [pc, #264]	@ (800578c <TIM_Base_SetConfig+0x134>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d007      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a41      	ldr	r2, [pc, #260]	@ (8005790 <TIM_Base_SetConfig+0x138>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a40      	ldr	r2, [pc, #256]	@ (8005794 <TIM_Base_SetConfig+0x13c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d108      	bne.n	80056aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a35      	ldr	r2, [pc, #212]	@ (8005784 <TIM_Base_SetConfig+0x12c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d02b      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b8:	d027      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a32      	ldr	r2, [pc, #200]	@ (8005788 <TIM_Base_SetConfig+0x130>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d023      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a31      	ldr	r2, [pc, #196]	@ (800578c <TIM_Base_SetConfig+0x134>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01f      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a30      	ldr	r2, [pc, #192]	@ (8005790 <TIM_Base_SetConfig+0x138>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01b      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005794 <TIM_Base_SetConfig+0x13c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d017      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005798 <TIM_Base_SetConfig+0x140>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2d      	ldr	r2, [pc, #180]	@ (800579c <TIM_Base_SetConfig+0x144>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00f      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2c      	ldr	r2, [pc, #176]	@ (80057a0 <TIM_Base_SetConfig+0x148>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00b      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2b      	ldr	r2, [pc, #172]	@ (80057a4 <TIM_Base_SetConfig+0x14c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d007      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2a      	ldr	r2, [pc, #168]	@ (80057a8 <TIM_Base_SetConfig+0x150>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a29      	ldr	r2, [pc, #164]	@ (80057ac <TIM_Base_SetConfig+0x154>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d108      	bne.n	800571c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a10      	ldr	r2, [pc, #64]	@ (8005784 <TIM_Base_SetConfig+0x12c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d003      	beq.n	8005750 <TIM_Base_SetConfig+0xf8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a12      	ldr	r2, [pc, #72]	@ (8005794 <TIM_Base_SetConfig+0x13c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d103      	bne.n	8005758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d105      	bne.n	8005776 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f023 0201 	bic.w	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	611a      	str	r2, [r3, #16]
  }
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40010000 	.word	0x40010000
 8005788:	40000400 	.word	0x40000400
 800578c:	40000800 	.word	0x40000800
 8005790:	40000c00 	.word	0x40000c00
 8005794:	40010400 	.word	0x40010400
 8005798:	40014000 	.word	0x40014000
 800579c:	40014400 	.word	0x40014400
 80057a0:	40014800 	.word	0x40014800
 80057a4:	40001800 	.word	0x40001800
 80057a8:	40001c00 	.word	0x40001c00
 80057ac:	40002000 	.word	0x40002000

080057b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f023 0201 	bic.w	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0303 	bic.w	r3, r3, #3
 80057e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 0302 	bic.w	r3, r3, #2
 80057f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a20      	ldr	r2, [pc, #128]	@ (8005888 <TIM_OC1_SetConfig+0xd8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC1_SetConfig+0x64>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <TIM_OC1_SetConfig+0xdc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d10c      	bne.n	800582e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0308 	bic.w	r3, r3, #8
 800581a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f023 0304 	bic.w	r3, r3, #4
 800582c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a15      	ldr	r2, [pc, #84]	@ (8005888 <TIM_OC1_SetConfig+0xd8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_OC1_SetConfig+0x8e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a14      	ldr	r2, [pc, #80]	@ (800588c <TIM_OC1_SetConfig+0xdc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d111      	bne.n	8005862 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400

08005890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f023 0210 	bic.w	r2, r3, #16
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0320 	bic.w	r3, r3, #32
 80058da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a22      	ldr	r2, [pc, #136]	@ (8005974 <TIM_OC2_SetConfig+0xe4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC2_SetConfig+0x68>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a21      	ldr	r2, [pc, #132]	@ (8005978 <TIM_OC2_SetConfig+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10d      	bne.n	8005914 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005912:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a17      	ldr	r2, [pc, #92]	@ (8005974 <TIM_OC2_SetConfig+0xe4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC2_SetConfig+0x94>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a16      	ldr	r2, [pc, #88]	@ (8005978 <TIM_OC2_SetConfig+0xe8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d113      	bne.n	800594c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800592a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40010400 	.word	0x40010400

0800597c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a21      	ldr	r2, [pc, #132]	@ (8005a5c <TIM_OC3_SetConfig+0xe0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC3_SetConfig+0x66>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a20      	ldr	r2, [pc, #128]	@ (8005a60 <TIM_OC3_SetConfig+0xe4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10d      	bne.n	80059fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a16      	ldr	r2, [pc, #88]	@ (8005a5c <TIM_OC3_SetConfig+0xe0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC3_SetConfig+0x92>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a15      	ldr	r2, [pc, #84]	@ (8005a60 <TIM_OC3_SetConfig+0xe4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d113      	bne.n	8005a36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40010400 	.word	0x40010400

08005a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	031b      	lsls	r3, r3, #12
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a12      	ldr	r2, [pc, #72]	@ (8005b08 <TIM_OC4_SetConfig+0xa4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC4_SetConfig+0x68>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a11      	ldr	r2, [pc, #68]	@ (8005b0c <TIM_OC4_SetConfig+0xa8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d109      	bne.n	8005ae0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40010400 	.word	0x40010400

08005b10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2201      	movs	r2, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a1a      	ldr	r2, [r3, #32]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	401a      	ands	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e05a      	b.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a21      	ldr	r2, [pc, #132]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d022      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc0:	d01d      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d018      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1a      	ldr	r2, [pc, #104]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00e      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a18      	ldr	r2, [pc, #96]	@ (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a17      	ldr	r2, [pc, #92]	@ (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a15      	ldr	r2, [pc, #84]	@ (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d10c      	bne.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	40010400 	.word	0x40010400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40001800 	.word	0x40001800

08005c54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e042      	b.n	8005cec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fc ff4c 	bl	8002b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2224      	movs	r2, #36	@ 0x24
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fa09 	bl	80060b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695a      	ldr	r2, [r3, #20]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ccc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	@ 0x28
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	4613      	mov	r3, r2
 8005d02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d175      	bne.n	8005e00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <HAL_UART_Transmit+0x2c>
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e06e      	b.n	8005e02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2221      	movs	r2, #33	@ 0x21
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d32:	f7fd f897 	bl	8002e64 <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4c:	d108      	bne.n	8005d60 <HAL_UART_Transmit+0x6c>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e003      	b.n	8005d68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d68:	e02e      	b.n	8005dc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2200      	movs	r2, #0
 8005d72:	2180      	movs	r1, #128	@ 0x80
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f8df 	bl	8005f38 <UART_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e03a      	b.n	8005e02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3302      	adds	r3, #2
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	e007      	b.n	8005dba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	3301      	adds	r3, #1
 8005db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1cb      	bne.n	8005d6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2140      	movs	r1, #64	@ 0x40
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f8ab 	bl	8005f38 <UART_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d005      	beq.n	8005df4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e006      	b.n	8005e02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e000      	b.n	8005e02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005e00:	2302      	movs	r3, #2
  }
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b08a      	sub	sp, #40	@ 0x28
 8005e0e:	af02      	add	r7, sp, #8
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	f040 8081 	bne.w	8005f2e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_UART_Receive+0x2e>
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e079      	b.n	8005f30 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2222      	movs	r2, #34	@ 0x22
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e50:	f7fd f808 	bl	8002e64 <HAL_GetTick>
 8005e54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6a:	d108      	bne.n	8005e7e <HAL_UART_Receive+0x74>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d104      	bne.n	8005e7e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	e003      	b.n	8005e86 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005e86:	e047      	b.n	8005f18 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2120      	movs	r1, #32
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f850 	bl	8005f38 <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e042      	b.n	8005f30 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10c      	bne.n	8005eca <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	e01f      	b.n	8005f0a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed2:	d007      	beq.n	8005ee4 <HAL_UART_Receive+0xda>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <HAL_UART_Receive+0xe8>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	e008      	b.n	8005f04 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1b2      	bne.n	8005e88 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
  }
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f48:	e03b      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d037      	beq.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f52:	f7fc ff87 	bl	8002e64 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	6a3a      	ldr	r2, [r7, #32]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d302      	bcc.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e03a      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d023      	beq.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b80      	cmp	r3, #128	@ 0x80
 8005f7e:	d020      	beq.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b40      	cmp	r3, #64	@ 0x40
 8005f84:	d01d      	beq.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d116      	bne.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f81d 	bl	8005fea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e00f      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2301      	moveq	r3, #1
 8005fd4:	2300      	movne	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d0b4      	beq.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b095      	sub	sp, #84	@ 0x54
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006012:	643a      	str	r2, [r7, #64]	@ 0x40
 8006014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006018:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e5      	bne.n	8005ff2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3314      	adds	r3, #20
 800602c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	61fb      	str	r3, [r7, #28]
   return(result);
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3314      	adds	r3, #20
 8006044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006046:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006048:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800604c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e5      	bne.n	8006026 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	2b01      	cmp	r3, #1
 8006060:	d119      	bne.n	8006096 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	60bb      	str	r3, [r7, #8]
   return(result);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f023 0310 	bic.w	r3, r3, #16
 8006078:	647b      	str	r3, [r7, #68]	@ 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006082:	61ba      	str	r2, [r7, #24]
 8006084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6979      	ldr	r1, [r7, #20]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	613b      	str	r3, [r7, #16]
   return(result);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e5      	bne.n	8006062 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060a4:	bf00      	nop
 80060a6:	3754      	adds	r7, #84	@ 0x54
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b4:	b0c0      	sub	sp, #256	@ 0x100
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	68d9      	ldr	r1, [r3, #12]
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	ea40 0301 	orr.w	r3, r0, r1
 80060d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006108:	f021 010c 	bic.w	r1, r1, #12
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006116:	430b      	orrs	r3, r1
 8006118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612a:	6999      	ldr	r1, [r3, #24]
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	ea40 0301 	orr.w	r3, r0, r1
 8006136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b8f      	ldr	r3, [pc, #572]	@ (800637c <UART_SetConfig+0x2cc>)
 8006140:	429a      	cmp	r2, r3
 8006142:	d005      	beq.n	8006150 <UART_SetConfig+0xa0>
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b8d      	ldr	r3, [pc, #564]	@ (8006380 <UART_SetConfig+0x2d0>)
 800614c:	429a      	cmp	r2, r3
 800614e:	d104      	bne.n	800615a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006150:	f7fe fbdc 	bl	800490c <HAL_RCC_GetPCLK2Freq>
 8006154:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006158:	e003      	b.n	8006162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800615a:	f7fe fbc3 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 800615e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800616c:	f040 810c 	bne.w	8006388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006174:	2200      	movs	r2, #0
 8006176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800617a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800617e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006182:	4622      	mov	r2, r4
 8006184:	462b      	mov	r3, r5
 8006186:	1891      	adds	r1, r2, r2
 8006188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800618a:	415b      	adcs	r3, r3
 800618c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800618e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006192:	4621      	mov	r1, r4
 8006194:	eb12 0801 	adds.w	r8, r2, r1
 8006198:	4629      	mov	r1, r5
 800619a:	eb43 0901 	adc.w	r9, r3, r1
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061b2:	4690      	mov	r8, r2
 80061b4:	4699      	mov	r9, r3
 80061b6:	4623      	mov	r3, r4
 80061b8:	eb18 0303 	adds.w	r3, r8, r3
 80061bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061c0:	462b      	mov	r3, r5
 80061c2:	eb49 0303 	adc.w	r3, r9, r3
 80061c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061de:	460b      	mov	r3, r1
 80061e0:	18db      	adds	r3, r3, r3
 80061e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061e4:	4613      	mov	r3, r2
 80061e6:	eb42 0303 	adc.w	r3, r2, r3
 80061ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80061ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061f4:	f7fa fd48 	bl	8000c88 <__aeabi_uldivmod>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4b61      	ldr	r3, [pc, #388]	@ (8006384 <UART_SetConfig+0x2d4>)
 80061fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	011c      	lsls	r4, r3, #4
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006210:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	1891      	adds	r1, r2, r2
 800621e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006220:	415b      	adcs	r3, r3
 8006222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006228:	4641      	mov	r1, r8
 800622a:	eb12 0a01 	adds.w	sl, r2, r1
 800622e:	4649      	mov	r1, r9
 8006230:	eb43 0b01 	adc.w	fp, r3, r1
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006248:	4692      	mov	sl, r2
 800624a:	469b      	mov	fp, r3
 800624c:	4643      	mov	r3, r8
 800624e:	eb1a 0303 	adds.w	r3, sl, r3
 8006252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006256:	464b      	mov	r3, r9
 8006258:	eb4b 0303 	adc.w	r3, fp, r3
 800625c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800626c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006274:	460b      	mov	r3, r1
 8006276:	18db      	adds	r3, r3, r3
 8006278:	643b      	str	r3, [r7, #64]	@ 0x40
 800627a:	4613      	mov	r3, r2
 800627c:	eb42 0303 	adc.w	r3, r2, r3
 8006280:	647b      	str	r3, [r7, #68]	@ 0x44
 8006282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800628a:	f7fa fcfd 	bl	8000c88 <__aeabi_uldivmod>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4611      	mov	r1, r2
 8006294:	4b3b      	ldr	r3, [pc, #236]	@ (8006384 <UART_SetConfig+0x2d4>)
 8006296:	fba3 2301 	umull	r2, r3, r3, r1
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	2264      	movs	r2, #100	@ 0x64
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	1acb      	subs	r3, r1, r3
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062aa:	4b36      	ldr	r3, [pc, #216]	@ (8006384 <UART_SetConfig+0x2d4>)
 80062ac:	fba3 2302 	umull	r2, r3, r3, r2
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062b8:	441c      	add	r4, r3
 80062ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062cc:	4642      	mov	r2, r8
 80062ce:	464b      	mov	r3, r9
 80062d0:	1891      	adds	r1, r2, r2
 80062d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062d4:	415b      	adcs	r3, r3
 80062d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062dc:	4641      	mov	r1, r8
 80062de:	1851      	adds	r1, r2, r1
 80062e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80062e2:	4649      	mov	r1, r9
 80062e4:	414b      	adcs	r3, r1
 80062e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062f4:	4659      	mov	r1, fp
 80062f6:	00cb      	lsls	r3, r1, #3
 80062f8:	4651      	mov	r1, sl
 80062fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fe:	4651      	mov	r1, sl
 8006300:	00ca      	lsls	r2, r1, #3
 8006302:	4610      	mov	r0, r2
 8006304:	4619      	mov	r1, r3
 8006306:	4603      	mov	r3, r0
 8006308:	4642      	mov	r2, r8
 800630a:	189b      	adds	r3, r3, r2
 800630c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006310:	464b      	mov	r3, r9
 8006312:	460a      	mov	r2, r1
 8006314:	eb42 0303 	adc.w	r3, r2, r3
 8006318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006328:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800632c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006330:	460b      	mov	r3, r1
 8006332:	18db      	adds	r3, r3, r3
 8006334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006336:	4613      	mov	r3, r2
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800633e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006346:	f7fa fc9f 	bl	8000c88 <__aeabi_uldivmod>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4b0d      	ldr	r3, [pc, #52]	@ (8006384 <UART_SetConfig+0x2d4>)
 8006350:	fba3 1302 	umull	r1, r3, r3, r2
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	2164      	movs	r1, #100	@ 0x64
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	3332      	adds	r3, #50	@ 0x32
 8006362:	4a08      	ldr	r2, [pc, #32]	@ (8006384 <UART_SetConfig+0x2d4>)
 8006364:	fba2 2303 	umull	r2, r3, r2, r3
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f003 0207 	and.w	r2, r3, #7
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4422      	add	r2, r4
 8006376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006378:	e106      	b.n	8006588 <UART_SetConfig+0x4d8>
 800637a:	bf00      	nop
 800637c:	40011000 	.word	0x40011000
 8006380:	40011400 	.word	0x40011400
 8006384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800638c:	2200      	movs	r2, #0
 800638e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006392:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800639a:	4642      	mov	r2, r8
 800639c:	464b      	mov	r3, r9
 800639e:	1891      	adds	r1, r2, r2
 80063a0:	6239      	str	r1, [r7, #32]
 80063a2:	415b      	adcs	r3, r3
 80063a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063aa:	4641      	mov	r1, r8
 80063ac:	1854      	adds	r4, r2, r1
 80063ae:	4649      	mov	r1, r9
 80063b0:	eb43 0501 	adc.w	r5, r3, r1
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	00eb      	lsls	r3, r5, #3
 80063be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063c2:	00e2      	lsls	r2, r4, #3
 80063c4:	4614      	mov	r4, r2
 80063c6:	461d      	mov	r5, r3
 80063c8:	4643      	mov	r3, r8
 80063ca:	18e3      	adds	r3, r4, r3
 80063cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063d0:	464b      	mov	r3, r9
 80063d2:	eb45 0303 	adc.w	r3, r5, r3
 80063d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063f6:	4629      	mov	r1, r5
 80063f8:	008b      	lsls	r3, r1, #2
 80063fa:	4621      	mov	r1, r4
 80063fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006400:	4621      	mov	r1, r4
 8006402:	008a      	lsls	r2, r1, #2
 8006404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006408:	f7fa fc3e 	bl	8000c88 <__aeabi_uldivmod>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4b60      	ldr	r3, [pc, #384]	@ (8006594 <UART_SetConfig+0x4e4>)
 8006412:	fba3 2302 	umull	r2, r3, r3, r2
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	011c      	lsls	r4, r3, #4
 800641a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800641e:	2200      	movs	r2, #0
 8006420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	1891      	adds	r1, r2, r2
 8006432:	61b9      	str	r1, [r7, #24]
 8006434:	415b      	adcs	r3, r3
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800643c:	4641      	mov	r1, r8
 800643e:	1851      	adds	r1, r2, r1
 8006440:	6139      	str	r1, [r7, #16]
 8006442:	4649      	mov	r1, r9
 8006444:	414b      	adcs	r3, r1
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006454:	4659      	mov	r1, fp
 8006456:	00cb      	lsls	r3, r1, #3
 8006458:	4651      	mov	r1, sl
 800645a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645e:	4651      	mov	r1, sl
 8006460:	00ca      	lsls	r2, r1, #3
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	4603      	mov	r3, r0
 8006468:	4642      	mov	r2, r8
 800646a:	189b      	adds	r3, r3, r2
 800646c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006470:	464b      	mov	r3, r9
 8006472:	460a      	mov	r2, r1
 8006474:	eb42 0303 	adc.w	r3, r2, r3
 8006478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006486:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006494:	4649      	mov	r1, r9
 8006496:	008b      	lsls	r3, r1, #2
 8006498:	4641      	mov	r1, r8
 800649a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800649e:	4641      	mov	r1, r8
 80064a0:	008a      	lsls	r2, r1, #2
 80064a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064a6:	f7fa fbef 	bl	8000c88 <__aeabi_uldivmod>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4611      	mov	r1, r2
 80064b0:	4b38      	ldr	r3, [pc, #224]	@ (8006594 <UART_SetConfig+0x4e4>)
 80064b2:	fba3 2301 	umull	r2, r3, r3, r1
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	2264      	movs	r2, #100	@ 0x64
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	1acb      	subs	r3, r1, r3
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	3332      	adds	r3, #50	@ 0x32
 80064c4:	4a33      	ldr	r2, [pc, #204]	@ (8006594 <UART_SetConfig+0x4e4>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064d0:	441c      	add	r4, r3
 80064d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064d6:	2200      	movs	r2, #0
 80064d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80064da:	677a      	str	r2, [r7, #116]	@ 0x74
 80064dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	1891      	adds	r1, r2, r2
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	415b      	adcs	r3, r3
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064f0:	4641      	mov	r1, r8
 80064f2:	1851      	adds	r1, r2, r1
 80064f4:	6039      	str	r1, [r7, #0]
 80064f6:	4649      	mov	r1, r9
 80064f8:	414b      	adcs	r3, r1
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006508:	4659      	mov	r1, fp
 800650a:	00cb      	lsls	r3, r1, #3
 800650c:	4651      	mov	r1, sl
 800650e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006512:	4651      	mov	r1, sl
 8006514:	00ca      	lsls	r2, r1, #3
 8006516:	4610      	mov	r0, r2
 8006518:	4619      	mov	r1, r3
 800651a:	4603      	mov	r3, r0
 800651c:	4642      	mov	r2, r8
 800651e:	189b      	adds	r3, r3, r2
 8006520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006522:	464b      	mov	r3, r9
 8006524:	460a      	mov	r2, r1
 8006526:	eb42 0303 	adc.w	r3, r2, r3
 800652a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	663b      	str	r3, [r7, #96]	@ 0x60
 8006536:	667a      	str	r2, [r7, #100]	@ 0x64
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	f04f 0300 	mov.w	r3, #0
 8006540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006544:	4649      	mov	r1, r9
 8006546:	008b      	lsls	r3, r1, #2
 8006548:	4641      	mov	r1, r8
 800654a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654e:	4641      	mov	r1, r8
 8006550:	008a      	lsls	r2, r1, #2
 8006552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006556:	f7fa fb97 	bl	8000c88 <__aeabi_uldivmod>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <UART_SetConfig+0x4e4>)
 8006560:	fba3 1302 	umull	r1, r3, r3, r2
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	2164      	movs	r1, #100	@ 0x64
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	3332      	adds	r3, #50	@ 0x32
 8006572:	4a08      	ldr	r2, [pc, #32]	@ (8006594 <UART_SetConfig+0x4e4>)
 8006574:	fba2 2303 	umull	r2, r3, r2, r3
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	f003 020f 	and.w	r2, r3, #15
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4422      	add	r2, r4
 8006586:	609a      	str	r2, [r3, #8]
}
 8006588:	bf00      	nop
 800658a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800658e:	46bd      	mov	sp, r7
 8006590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006594:	51eb851f 	.word	0x51eb851f

08006598 <atoi>:
 8006598:	220a      	movs	r2, #10
 800659a:	2100      	movs	r1, #0
 800659c:	f000 b938 	b.w	8006810 <strtol>

080065a0 <malloc>:
 80065a0:	4b02      	ldr	r3, [pc, #8]	@ (80065ac <malloc+0xc>)
 80065a2:	4601      	mov	r1, r0
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	f000 b82d 	b.w	8006604 <_malloc_r>
 80065aa:	bf00      	nop
 80065ac:	20000064 	.word	0x20000064

080065b0 <free>:
 80065b0:	4b02      	ldr	r3, [pc, #8]	@ (80065bc <free+0xc>)
 80065b2:	4601      	mov	r1, r0
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	f000 b9ed 	b.w	8006994 <_free_r>
 80065ba:	bf00      	nop
 80065bc:	20000064 	.word	0x20000064

080065c0 <sbrk_aligned>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	4e0f      	ldr	r6, [pc, #60]	@ (8006600 <sbrk_aligned+0x40>)
 80065c4:	460c      	mov	r4, r1
 80065c6:	6831      	ldr	r1, [r6, #0]
 80065c8:	4605      	mov	r5, r0
 80065ca:	b911      	cbnz	r1, 80065d2 <sbrk_aligned+0x12>
 80065cc:	f000 f998 	bl	8006900 <_sbrk_r>
 80065d0:	6030      	str	r0, [r6, #0]
 80065d2:	4621      	mov	r1, r4
 80065d4:	4628      	mov	r0, r5
 80065d6:	f000 f993 	bl	8006900 <_sbrk_r>
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	d103      	bne.n	80065e6 <sbrk_aligned+0x26>
 80065de:	f04f 34ff 	mov.w	r4, #4294967295
 80065e2:	4620      	mov	r0, r4
 80065e4:	bd70      	pop	{r4, r5, r6, pc}
 80065e6:	1cc4      	adds	r4, r0, #3
 80065e8:	f024 0403 	bic.w	r4, r4, #3
 80065ec:	42a0      	cmp	r0, r4
 80065ee:	d0f8      	beq.n	80065e2 <sbrk_aligned+0x22>
 80065f0:	1a21      	subs	r1, r4, r0
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f984 	bl	8006900 <_sbrk_r>
 80065f8:	3001      	adds	r0, #1
 80065fa:	d1f2      	bne.n	80065e2 <sbrk_aligned+0x22>
 80065fc:	e7ef      	b.n	80065de <sbrk_aligned+0x1e>
 80065fe:	bf00      	nop
 8006600:	20000a20 	.word	0x20000a20

08006604 <_malloc_r>:
 8006604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006608:	1ccd      	adds	r5, r1, #3
 800660a:	f025 0503 	bic.w	r5, r5, #3
 800660e:	3508      	adds	r5, #8
 8006610:	2d0c      	cmp	r5, #12
 8006612:	bf38      	it	cc
 8006614:	250c      	movcc	r5, #12
 8006616:	2d00      	cmp	r5, #0
 8006618:	4606      	mov	r6, r0
 800661a:	db01      	blt.n	8006620 <_malloc_r+0x1c>
 800661c:	42a9      	cmp	r1, r5
 800661e:	d904      	bls.n	800662a <_malloc_r+0x26>
 8006620:	230c      	movs	r3, #12
 8006622:	6033      	str	r3, [r6, #0]
 8006624:	2000      	movs	r0, #0
 8006626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800662a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006700 <_malloc_r+0xfc>
 800662e:	f000 f869 	bl	8006704 <__malloc_lock>
 8006632:	f8d8 3000 	ldr.w	r3, [r8]
 8006636:	461c      	mov	r4, r3
 8006638:	bb44      	cbnz	r4, 800668c <_malloc_r+0x88>
 800663a:	4629      	mov	r1, r5
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff ffbf 	bl	80065c0 <sbrk_aligned>
 8006642:	1c43      	adds	r3, r0, #1
 8006644:	4604      	mov	r4, r0
 8006646:	d158      	bne.n	80066fa <_malloc_r+0xf6>
 8006648:	f8d8 4000 	ldr.w	r4, [r8]
 800664c:	4627      	mov	r7, r4
 800664e:	2f00      	cmp	r7, #0
 8006650:	d143      	bne.n	80066da <_malloc_r+0xd6>
 8006652:	2c00      	cmp	r4, #0
 8006654:	d04b      	beq.n	80066ee <_malloc_r+0xea>
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	4639      	mov	r1, r7
 800665a:	4630      	mov	r0, r6
 800665c:	eb04 0903 	add.w	r9, r4, r3
 8006660:	f000 f94e 	bl	8006900 <_sbrk_r>
 8006664:	4581      	cmp	r9, r0
 8006666:	d142      	bne.n	80066ee <_malloc_r+0xea>
 8006668:	6821      	ldr	r1, [r4, #0]
 800666a:	1a6d      	subs	r5, r5, r1
 800666c:	4629      	mov	r1, r5
 800666e:	4630      	mov	r0, r6
 8006670:	f7ff ffa6 	bl	80065c0 <sbrk_aligned>
 8006674:	3001      	adds	r0, #1
 8006676:	d03a      	beq.n	80066ee <_malloc_r+0xea>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	442b      	add	r3, r5
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	f8d8 3000 	ldr.w	r3, [r8]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	bb62      	cbnz	r2, 80066e0 <_malloc_r+0xdc>
 8006686:	f8c8 7000 	str.w	r7, [r8]
 800668a:	e00f      	b.n	80066ac <_malloc_r+0xa8>
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	1b52      	subs	r2, r2, r5
 8006690:	d420      	bmi.n	80066d4 <_malloc_r+0xd0>
 8006692:	2a0b      	cmp	r2, #11
 8006694:	d917      	bls.n	80066c6 <_malloc_r+0xc2>
 8006696:	1961      	adds	r1, r4, r5
 8006698:	42a3      	cmp	r3, r4
 800669a:	6025      	str	r5, [r4, #0]
 800669c:	bf18      	it	ne
 800669e:	6059      	strne	r1, [r3, #4]
 80066a0:	6863      	ldr	r3, [r4, #4]
 80066a2:	bf08      	it	eq
 80066a4:	f8c8 1000 	streq.w	r1, [r8]
 80066a8:	5162      	str	r2, [r4, r5]
 80066aa:	604b      	str	r3, [r1, #4]
 80066ac:	4630      	mov	r0, r6
 80066ae:	f000 f82f 	bl	8006710 <__malloc_unlock>
 80066b2:	f104 000b 	add.w	r0, r4, #11
 80066b6:	1d23      	adds	r3, r4, #4
 80066b8:	f020 0007 	bic.w	r0, r0, #7
 80066bc:	1ac2      	subs	r2, r0, r3
 80066be:	bf1c      	itt	ne
 80066c0:	1a1b      	subne	r3, r3, r0
 80066c2:	50a3      	strne	r3, [r4, r2]
 80066c4:	e7af      	b.n	8006626 <_malloc_r+0x22>
 80066c6:	6862      	ldr	r2, [r4, #4]
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	bf0c      	ite	eq
 80066cc:	f8c8 2000 	streq.w	r2, [r8]
 80066d0:	605a      	strne	r2, [r3, #4]
 80066d2:	e7eb      	b.n	80066ac <_malloc_r+0xa8>
 80066d4:	4623      	mov	r3, r4
 80066d6:	6864      	ldr	r4, [r4, #4]
 80066d8:	e7ae      	b.n	8006638 <_malloc_r+0x34>
 80066da:	463c      	mov	r4, r7
 80066dc:	687f      	ldr	r7, [r7, #4]
 80066de:	e7b6      	b.n	800664e <_malloc_r+0x4a>
 80066e0:	461a      	mov	r2, r3
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	42a3      	cmp	r3, r4
 80066e6:	d1fb      	bne.n	80066e0 <_malloc_r+0xdc>
 80066e8:	2300      	movs	r3, #0
 80066ea:	6053      	str	r3, [r2, #4]
 80066ec:	e7de      	b.n	80066ac <_malloc_r+0xa8>
 80066ee:	230c      	movs	r3, #12
 80066f0:	6033      	str	r3, [r6, #0]
 80066f2:	4630      	mov	r0, r6
 80066f4:	f000 f80c 	bl	8006710 <__malloc_unlock>
 80066f8:	e794      	b.n	8006624 <_malloc_r+0x20>
 80066fa:	6005      	str	r5, [r0, #0]
 80066fc:	e7d6      	b.n	80066ac <_malloc_r+0xa8>
 80066fe:	bf00      	nop
 8006700:	20000a24 	.word	0x20000a24

08006704 <__malloc_lock>:
 8006704:	4801      	ldr	r0, [pc, #4]	@ (800670c <__malloc_lock+0x8>)
 8006706:	f000 b935 	b.w	8006974 <__retarget_lock_acquire_recursive>
 800670a:	bf00      	nop
 800670c:	20000b64 	.word	0x20000b64

08006710 <__malloc_unlock>:
 8006710:	4801      	ldr	r0, [pc, #4]	@ (8006718 <__malloc_unlock+0x8>)
 8006712:	f000 b930 	b.w	8006976 <__retarget_lock_release_recursive>
 8006716:	bf00      	nop
 8006718:	20000b64 	.word	0x20000b64

0800671c <_strtol_l.constprop.0>:
 800671c:	2b24      	cmp	r3, #36	@ 0x24
 800671e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006722:	4686      	mov	lr, r0
 8006724:	4690      	mov	r8, r2
 8006726:	d801      	bhi.n	800672c <_strtol_l.constprop.0+0x10>
 8006728:	2b01      	cmp	r3, #1
 800672a:	d106      	bne.n	800673a <_strtol_l.constprop.0+0x1e>
 800672c:	f000 f8f8 	bl	8006920 <__errno>
 8006730:	2316      	movs	r3, #22
 8006732:	6003      	str	r3, [r0, #0]
 8006734:	2000      	movs	r0, #0
 8006736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673a:	4834      	ldr	r0, [pc, #208]	@ (800680c <_strtol_l.constprop.0+0xf0>)
 800673c:	460d      	mov	r5, r1
 800673e:	462a      	mov	r2, r5
 8006740:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006744:	5d06      	ldrb	r6, [r0, r4]
 8006746:	f016 0608 	ands.w	r6, r6, #8
 800674a:	d1f8      	bne.n	800673e <_strtol_l.constprop.0+0x22>
 800674c:	2c2d      	cmp	r4, #45	@ 0x2d
 800674e:	d12d      	bne.n	80067ac <_strtol_l.constprop.0+0x90>
 8006750:	782c      	ldrb	r4, [r5, #0]
 8006752:	2601      	movs	r6, #1
 8006754:	1c95      	adds	r5, r2, #2
 8006756:	f033 0210 	bics.w	r2, r3, #16
 800675a:	d109      	bne.n	8006770 <_strtol_l.constprop.0+0x54>
 800675c:	2c30      	cmp	r4, #48	@ 0x30
 800675e:	d12a      	bne.n	80067b6 <_strtol_l.constprop.0+0x9a>
 8006760:	782a      	ldrb	r2, [r5, #0]
 8006762:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006766:	2a58      	cmp	r2, #88	@ 0x58
 8006768:	d125      	bne.n	80067b6 <_strtol_l.constprop.0+0x9a>
 800676a:	786c      	ldrb	r4, [r5, #1]
 800676c:	2310      	movs	r3, #16
 800676e:	3502      	adds	r5, #2
 8006770:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006774:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006778:	2200      	movs	r2, #0
 800677a:	fbbc f9f3 	udiv	r9, ip, r3
 800677e:	4610      	mov	r0, r2
 8006780:	fb03 ca19 	mls	sl, r3, r9, ip
 8006784:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006788:	2f09      	cmp	r7, #9
 800678a:	d81b      	bhi.n	80067c4 <_strtol_l.constprop.0+0xa8>
 800678c:	463c      	mov	r4, r7
 800678e:	42a3      	cmp	r3, r4
 8006790:	dd27      	ble.n	80067e2 <_strtol_l.constprop.0+0xc6>
 8006792:	1c57      	adds	r7, r2, #1
 8006794:	d007      	beq.n	80067a6 <_strtol_l.constprop.0+0x8a>
 8006796:	4581      	cmp	r9, r0
 8006798:	d320      	bcc.n	80067dc <_strtol_l.constprop.0+0xc0>
 800679a:	d101      	bne.n	80067a0 <_strtol_l.constprop.0+0x84>
 800679c:	45a2      	cmp	sl, r4
 800679e:	db1d      	blt.n	80067dc <_strtol_l.constprop.0+0xc0>
 80067a0:	fb00 4003 	mla	r0, r0, r3, r4
 80067a4:	2201      	movs	r2, #1
 80067a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067aa:	e7eb      	b.n	8006784 <_strtol_l.constprop.0+0x68>
 80067ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80067ae:	bf04      	itt	eq
 80067b0:	782c      	ldrbeq	r4, [r5, #0]
 80067b2:	1c95      	addeq	r5, r2, #2
 80067b4:	e7cf      	b.n	8006756 <_strtol_l.constprop.0+0x3a>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1da      	bne.n	8006770 <_strtol_l.constprop.0+0x54>
 80067ba:	2c30      	cmp	r4, #48	@ 0x30
 80067bc:	bf0c      	ite	eq
 80067be:	2308      	moveq	r3, #8
 80067c0:	230a      	movne	r3, #10
 80067c2:	e7d5      	b.n	8006770 <_strtol_l.constprop.0+0x54>
 80067c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80067c8:	2f19      	cmp	r7, #25
 80067ca:	d801      	bhi.n	80067d0 <_strtol_l.constprop.0+0xb4>
 80067cc:	3c37      	subs	r4, #55	@ 0x37
 80067ce:	e7de      	b.n	800678e <_strtol_l.constprop.0+0x72>
 80067d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80067d4:	2f19      	cmp	r7, #25
 80067d6:	d804      	bhi.n	80067e2 <_strtol_l.constprop.0+0xc6>
 80067d8:	3c57      	subs	r4, #87	@ 0x57
 80067da:	e7d8      	b.n	800678e <_strtol_l.constprop.0+0x72>
 80067dc:	f04f 32ff 	mov.w	r2, #4294967295
 80067e0:	e7e1      	b.n	80067a6 <_strtol_l.constprop.0+0x8a>
 80067e2:	1c53      	adds	r3, r2, #1
 80067e4:	d108      	bne.n	80067f8 <_strtol_l.constprop.0+0xdc>
 80067e6:	2322      	movs	r3, #34	@ 0x22
 80067e8:	f8ce 3000 	str.w	r3, [lr]
 80067ec:	4660      	mov	r0, ip
 80067ee:	f1b8 0f00 	cmp.w	r8, #0
 80067f2:	d0a0      	beq.n	8006736 <_strtol_l.constprop.0+0x1a>
 80067f4:	1e69      	subs	r1, r5, #1
 80067f6:	e006      	b.n	8006806 <_strtol_l.constprop.0+0xea>
 80067f8:	b106      	cbz	r6, 80067fc <_strtol_l.constprop.0+0xe0>
 80067fa:	4240      	negs	r0, r0
 80067fc:	f1b8 0f00 	cmp.w	r8, #0
 8006800:	d099      	beq.n	8006736 <_strtol_l.constprop.0+0x1a>
 8006802:	2a00      	cmp	r2, #0
 8006804:	d1f6      	bne.n	80067f4 <_strtol_l.constprop.0+0xd8>
 8006806:	f8c8 1000 	str.w	r1, [r8]
 800680a:	e794      	b.n	8006736 <_strtol_l.constprop.0+0x1a>
 800680c:	08008571 	.word	0x08008571

08006810 <strtol>:
 8006810:	4613      	mov	r3, r2
 8006812:	460a      	mov	r2, r1
 8006814:	4601      	mov	r1, r0
 8006816:	4802      	ldr	r0, [pc, #8]	@ (8006820 <strtol+0x10>)
 8006818:	6800      	ldr	r0, [r0, #0]
 800681a:	f7ff bf7f 	b.w	800671c <_strtol_l.constprop.0>
 800681e:	bf00      	nop
 8006820:	20000064 	.word	0x20000064

08006824 <siprintf>:
 8006824:	b40e      	push	{r1, r2, r3}
 8006826:	b500      	push	{lr}
 8006828:	b09c      	sub	sp, #112	@ 0x70
 800682a:	ab1d      	add	r3, sp, #116	@ 0x74
 800682c:	9002      	str	r0, [sp, #8]
 800682e:	9006      	str	r0, [sp, #24]
 8006830:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006834:	4809      	ldr	r0, [pc, #36]	@ (800685c <siprintf+0x38>)
 8006836:	9107      	str	r1, [sp, #28]
 8006838:	9104      	str	r1, [sp, #16]
 800683a:	4909      	ldr	r1, [pc, #36]	@ (8006860 <siprintf+0x3c>)
 800683c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006840:	9105      	str	r1, [sp, #20]
 8006842:	6800      	ldr	r0, [r0, #0]
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	a902      	add	r1, sp, #8
 8006848:	f000 f94a 	bl	8006ae0 <_svfiprintf_r>
 800684c:	9b02      	ldr	r3, [sp, #8]
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	b01c      	add	sp, #112	@ 0x70
 8006854:	f85d eb04 	ldr.w	lr, [sp], #4
 8006858:	b003      	add	sp, #12
 800685a:	4770      	bx	lr
 800685c:	20000064 	.word	0x20000064
 8006860:	ffff0208 	.word	0xffff0208

08006864 <memset>:
 8006864:	4402      	add	r2, r0
 8006866:	4603      	mov	r3, r0
 8006868:	4293      	cmp	r3, r2
 800686a:	d100      	bne.n	800686e <memset+0xa>
 800686c:	4770      	bx	lr
 800686e:	f803 1b01 	strb.w	r1, [r3], #1
 8006872:	e7f9      	b.n	8006868 <memset+0x4>

08006874 <strcat>:
 8006874:	b510      	push	{r4, lr}
 8006876:	4602      	mov	r2, r0
 8006878:	7814      	ldrb	r4, [r2, #0]
 800687a:	4613      	mov	r3, r2
 800687c:	3201      	adds	r2, #1
 800687e:	2c00      	cmp	r4, #0
 8006880:	d1fa      	bne.n	8006878 <strcat+0x4>
 8006882:	3b01      	subs	r3, #1
 8006884:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006888:	f803 2f01 	strb.w	r2, [r3, #1]!
 800688c:	2a00      	cmp	r2, #0
 800688e:	d1f9      	bne.n	8006884 <strcat+0x10>
 8006890:	bd10      	pop	{r4, pc}

08006892 <strchr>:
 8006892:	b2c9      	uxtb	r1, r1
 8006894:	4603      	mov	r3, r0
 8006896:	4618      	mov	r0, r3
 8006898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800689c:	b112      	cbz	r2, 80068a4 <strchr+0x12>
 800689e:	428a      	cmp	r2, r1
 80068a0:	d1f9      	bne.n	8006896 <strchr+0x4>
 80068a2:	4770      	bx	lr
 80068a4:	2900      	cmp	r1, #0
 80068a6:	bf18      	it	ne
 80068a8:	2000      	movne	r0, #0
 80068aa:	4770      	bx	lr

080068ac <strncpy>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	3901      	subs	r1, #1
 80068b0:	4603      	mov	r3, r0
 80068b2:	b132      	cbz	r2, 80068c2 <strncpy+0x16>
 80068b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80068b8:	f803 4b01 	strb.w	r4, [r3], #1
 80068bc:	3a01      	subs	r2, #1
 80068be:	2c00      	cmp	r4, #0
 80068c0:	d1f7      	bne.n	80068b2 <strncpy+0x6>
 80068c2:	441a      	add	r2, r3
 80068c4:	2100      	movs	r1, #0
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d100      	bne.n	80068cc <strncpy+0x20>
 80068ca:	bd10      	pop	{r4, pc}
 80068cc:	f803 1b01 	strb.w	r1, [r3], #1
 80068d0:	e7f9      	b.n	80068c6 <strncpy+0x1a>

080068d2 <strstr>:
 80068d2:	780a      	ldrb	r2, [r1, #0]
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	b96a      	cbnz	r2, 80068f4 <strstr+0x22>
 80068d8:	bd70      	pop	{r4, r5, r6, pc}
 80068da:	429a      	cmp	r2, r3
 80068dc:	d109      	bne.n	80068f2 <strstr+0x20>
 80068de:	460c      	mov	r4, r1
 80068e0:	4605      	mov	r5, r0
 80068e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0f6      	beq.n	80068d8 <strstr+0x6>
 80068ea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80068ee:	429e      	cmp	r6, r3
 80068f0:	d0f7      	beq.n	80068e2 <strstr+0x10>
 80068f2:	3001      	adds	r0, #1
 80068f4:	7803      	ldrb	r3, [r0, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1ef      	bne.n	80068da <strstr+0x8>
 80068fa:	4618      	mov	r0, r3
 80068fc:	e7ec      	b.n	80068d8 <strstr+0x6>
	...

08006900 <_sbrk_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4d06      	ldr	r5, [pc, #24]	@ (800691c <_sbrk_r+0x1c>)
 8006904:	2300      	movs	r3, #0
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	f7fc f9d2 	bl	8002cb4 <_sbrk>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_sbrk_r+0x1a>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	b103      	cbz	r3, 800691a <_sbrk_r+0x1a>
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	20000b60 	.word	0x20000b60

08006920 <__errno>:
 8006920:	4b01      	ldr	r3, [pc, #4]	@ (8006928 <__errno+0x8>)
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000064 	.word	0x20000064

0800692c <__libc_init_array>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4d0d      	ldr	r5, [pc, #52]	@ (8006964 <__libc_init_array+0x38>)
 8006930:	4c0d      	ldr	r4, [pc, #52]	@ (8006968 <__libc_init_array+0x3c>)
 8006932:	1b64      	subs	r4, r4, r5
 8006934:	10a4      	asrs	r4, r4, #2
 8006936:	2600      	movs	r6, #0
 8006938:	42a6      	cmp	r6, r4
 800693a:	d109      	bne.n	8006950 <__libc_init_array+0x24>
 800693c:	4d0b      	ldr	r5, [pc, #44]	@ (800696c <__libc_init_array+0x40>)
 800693e:	4c0c      	ldr	r4, [pc, #48]	@ (8006970 <__libc_init_array+0x44>)
 8006940:	f001 fdb0 	bl	80084a4 <_init>
 8006944:	1b64      	subs	r4, r4, r5
 8006946:	10a4      	asrs	r4, r4, #2
 8006948:	2600      	movs	r6, #0
 800694a:	42a6      	cmp	r6, r4
 800694c:	d105      	bne.n	800695a <__libc_init_array+0x2e>
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	f855 3b04 	ldr.w	r3, [r5], #4
 8006954:	4798      	blx	r3
 8006956:	3601      	adds	r6, #1
 8006958:	e7ee      	b.n	8006938 <__libc_init_array+0xc>
 800695a:	f855 3b04 	ldr.w	r3, [r5], #4
 800695e:	4798      	blx	r3
 8006960:	3601      	adds	r6, #1
 8006962:	e7f2      	b.n	800694a <__libc_init_array+0x1e>
 8006964:	08008750 	.word	0x08008750
 8006968:	08008750 	.word	0x08008750
 800696c:	08008750 	.word	0x08008750
 8006970:	08008754 	.word	0x08008754

08006974 <__retarget_lock_acquire_recursive>:
 8006974:	4770      	bx	lr

08006976 <__retarget_lock_release_recursive>:
 8006976:	4770      	bx	lr

08006978 <memcpy>:
 8006978:	440a      	add	r2, r1
 800697a:	4291      	cmp	r1, r2
 800697c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006980:	d100      	bne.n	8006984 <memcpy+0xc>
 8006982:	4770      	bx	lr
 8006984:	b510      	push	{r4, lr}
 8006986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800698e:	4291      	cmp	r1, r2
 8006990:	d1f9      	bne.n	8006986 <memcpy+0xe>
 8006992:	bd10      	pop	{r4, pc}

08006994 <_free_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4605      	mov	r5, r0
 8006998:	2900      	cmp	r1, #0
 800699a:	d041      	beq.n	8006a20 <_free_r+0x8c>
 800699c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a0:	1f0c      	subs	r4, r1, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bfb8      	it	lt
 80069a6:	18e4      	addlt	r4, r4, r3
 80069a8:	f7ff feac 	bl	8006704 <__malloc_lock>
 80069ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006a24 <_free_r+0x90>)
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	b933      	cbnz	r3, 80069c0 <_free_r+0x2c>
 80069b2:	6063      	str	r3, [r4, #4]
 80069b4:	6014      	str	r4, [r2, #0]
 80069b6:	4628      	mov	r0, r5
 80069b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069bc:	f7ff bea8 	b.w	8006710 <__malloc_unlock>
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	d908      	bls.n	80069d6 <_free_r+0x42>
 80069c4:	6820      	ldr	r0, [r4, #0]
 80069c6:	1821      	adds	r1, r4, r0
 80069c8:	428b      	cmp	r3, r1
 80069ca:	bf01      	itttt	eq
 80069cc:	6819      	ldreq	r1, [r3, #0]
 80069ce:	685b      	ldreq	r3, [r3, #4]
 80069d0:	1809      	addeq	r1, r1, r0
 80069d2:	6021      	streq	r1, [r4, #0]
 80069d4:	e7ed      	b.n	80069b2 <_free_r+0x1e>
 80069d6:	461a      	mov	r2, r3
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	b10b      	cbz	r3, 80069e0 <_free_r+0x4c>
 80069dc:	42a3      	cmp	r3, r4
 80069de:	d9fa      	bls.n	80069d6 <_free_r+0x42>
 80069e0:	6811      	ldr	r1, [r2, #0]
 80069e2:	1850      	adds	r0, r2, r1
 80069e4:	42a0      	cmp	r0, r4
 80069e6:	d10b      	bne.n	8006a00 <_free_r+0x6c>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	4401      	add	r1, r0
 80069ec:	1850      	adds	r0, r2, r1
 80069ee:	4283      	cmp	r3, r0
 80069f0:	6011      	str	r1, [r2, #0]
 80069f2:	d1e0      	bne.n	80069b6 <_free_r+0x22>
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	6053      	str	r3, [r2, #4]
 80069fa:	4408      	add	r0, r1
 80069fc:	6010      	str	r0, [r2, #0]
 80069fe:	e7da      	b.n	80069b6 <_free_r+0x22>
 8006a00:	d902      	bls.n	8006a08 <_free_r+0x74>
 8006a02:	230c      	movs	r3, #12
 8006a04:	602b      	str	r3, [r5, #0]
 8006a06:	e7d6      	b.n	80069b6 <_free_r+0x22>
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	1821      	adds	r1, r4, r0
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	bf04      	itt	eq
 8006a10:	6819      	ldreq	r1, [r3, #0]
 8006a12:	685b      	ldreq	r3, [r3, #4]
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	bf04      	itt	eq
 8006a18:	1809      	addeq	r1, r1, r0
 8006a1a:	6021      	streq	r1, [r4, #0]
 8006a1c:	6054      	str	r4, [r2, #4]
 8006a1e:	e7ca      	b.n	80069b6 <_free_r+0x22>
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
 8006a22:	bf00      	nop
 8006a24:	20000a24 	.word	0x20000a24

08006a28 <__ssputs_r>:
 8006a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	688e      	ldr	r6, [r1, #8]
 8006a2e:	461f      	mov	r7, r3
 8006a30:	42be      	cmp	r6, r7
 8006a32:	680b      	ldr	r3, [r1, #0]
 8006a34:	4682      	mov	sl, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	4690      	mov	r8, r2
 8006a3a:	d82d      	bhi.n	8006a98 <__ssputs_r+0x70>
 8006a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a44:	d026      	beq.n	8006a94 <__ssputs_r+0x6c>
 8006a46:	6965      	ldr	r5, [r4, #20]
 8006a48:	6909      	ldr	r1, [r1, #16]
 8006a4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a4e:	eba3 0901 	sub.w	r9, r3, r1
 8006a52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a56:	1c7b      	adds	r3, r7, #1
 8006a58:	444b      	add	r3, r9
 8006a5a:	106d      	asrs	r5, r5, #1
 8006a5c:	429d      	cmp	r5, r3
 8006a5e:	bf38      	it	cc
 8006a60:	461d      	movcc	r5, r3
 8006a62:	0553      	lsls	r3, r2, #21
 8006a64:	d527      	bpl.n	8006ab6 <__ssputs_r+0x8e>
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7ff fdcc 	bl	8006604 <_malloc_r>
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	b360      	cbz	r0, 8006aca <__ssputs_r+0xa2>
 8006a70:	6921      	ldr	r1, [r4, #16]
 8006a72:	464a      	mov	r2, r9
 8006a74:	f7ff ff80 	bl	8006978 <memcpy>
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a82:	81a3      	strh	r3, [r4, #12]
 8006a84:	6126      	str	r6, [r4, #16]
 8006a86:	6165      	str	r5, [r4, #20]
 8006a88:	444e      	add	r6, r9
 8006a8a:	eba5 0509 	sub.w	r5, r5, r9
 8006a8e:	6026      	str	r6, [r4, #0]
 8006a90:	60a5      	str	r5, [r4, #8]
 8006a92:	463e      	mov	r6, r7
 8006a94:	42be      	cmp	r6, r7
 8006a96:	d900      	bls.n	8006a9a <__ssputs_r+0x72>
 8006a98:	463e      	mov	r6, r7
 8006a9a:	6820      	ldr	r0, [r4, #0]
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	4641      	mov	r1, r8
 8006aa0:	f000 faa8 	bl	8006ff4 <memmove>
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	1b9b      	subs	r3, r3, r6
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	4433      	add	r3, r6
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab6:	462a      	mov	r2, r5
 8006ab8:	f000 fab6 	bl	8007028 <_realloc_r>
 8006abc:	4606      	mov	r6, r0
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d1e0      	bne.n	8006a84 <__ssputs_r+0x5c>
 8006ac2:	6921      	ldr	r1, [r4, #16]
 8006ac4:	4650      	mov	r0, sl
 8006ac6:	f7ff ff65 	bl	8006994 <_free_r>
 8006aca:	230c      	movs	r3, #12
 8006acc:	f8ca 3000 	str.w	r3, [sl]
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	e7e9      	b.n	8006ab2 <__ssputs_r+0x8a>
	...

08006ae0 <_svfiprintf_r>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	4698      	mov	r8, r3
 8006ae6:	898b      	ldrh	r3, [r1, #12]
 8006ae8:	061b      	lsls	r3, r3, #24
 8006aea:	b09d      	sub	sp, #116	@ 0x74
 8006aec:	4607      	mov	r7, r0
 8006aee:	460d      	mov	r5, r1
 8006af0:	4614      	mov	r4, r2
 8006af2:	d510      	bpl.n	8006b16 <_svfiprintf_r+0x36>
 8006af4:	690b      	ldr	r3, [r1, #16]
 8006af6:	b973      	cbnz	r3, 8006b16 <_svfiprintf_r+0x36>
 8006af8:	2140      	movs	r1, #64	@ 0x40
 8006afa:	f7ff fd83 	bl	8006604 <_malloc_r>
 8006afe:	6028      	str	r0, [r5, #0]
 8006b00:	6128      	str	r0, [r5, #16]
 8006b02:	b930      	cbnz	r0, 8006b12 <_svfiprintf_r+0x32>
 8006b04:	230c      	movs	r3, #12
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	b01d      	add	sp, #116	@ 0x74
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	2340      	movs	r3, #64	@ 0x40
 8006b14:	616b      	str	r3, [r5, #20]
 8006b16:	2300      	movs	r3, #0
 8006b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b1a:	2320      	movs	r3, #32
 8006b1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b24:	2330      	movs	r3, #48	@ 0x30
 8006b26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006cc4 <_svfiprintf_r+0x1e4>
 8006b2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b2e:	f04f 0901 	mov.w	r9, #1
 8006b32:	4623      	mov	r3, r4
 8006b34:	469a      	mov	sl, r3
 8006b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b3a:	b10a      	cbz	r2, 8006b40 <_svfiprintf_r+0x60>
 8006b3c:	2a25      	cmp	r2, #37	@ 0x25
 8006b3e:	d1f9      	bne.n	8006b34 <_svfiprintf_r+0x54>
 8006b40:	ebba 0b04 	subs.w	fp, sl, r4
 8006b44:	d00b      	beq.n	8006b5e <_svfiprintf_r+0x7e>
 8006b46:	465b      	mov	r3, fp
 8006b48:	4622      	mov	r2, r4
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	f7ff ff6b 	bl	8006a28 <__ssputs_r>
 8006b52:	3001      	adds	r0, #1
 8006b54:	f000 80a7 	beq.w	8006ca6 <_svfiprintf_r+0x1c6>
 8006b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b5a:	445a      	add	r2, fp
 8006b5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 809f 	beq.w	8006ca6 <_svfiprintf_r+0x1c6>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b72:	f10a 0a01 	add.w	sl, sl, #1
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	9307      	str	r3, [sp, #28]
 8006b7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b80:	4654      	mov	r4, sl
 8006b82:	2205      	movs	r2, #5
 8006b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b88:	484e      	ldr	r0, [pc, #312]	@ (8006cc4 <_svfiprintf_r+0x1e4>)
 8006b8a:	f7f9 fb49 	bl	8000220 <memchr>
 8006b8e:	9a04      	ldr	r2, [sp, #16]
 8006b90:	b9d8      	cbnz	r0, 8006bca <_svfiprintf_r+0xea>
 8006b92:	06d0      	lsls	r0, r2, #27
 8006b94:	bf44      	itt	mi
 8006b96:	2320      	movmi	r3, #32
 8006b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b9c:	0711      	lsls	r1, r2, #28
 8006b9e:	bf44      	itt	mi
 8006ba0:	232b      	movmi	r3, #43	@ 0x2b
 8006ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8006baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bac:	d015      	beq.n	8006bda <_svfiprintf_r+0xfa>
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	4654      	mov	r4, sl
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	f04f 0c0a 	mov.w	ip, #10
 8006bb8:	4621      	mov	r1, r4
 8006bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bbe:	3b30      	subs	r3, #48	@ 0x30
 8006bc0:	2b09      	cmp	r3, #9
 8006bc2:	d94b      	bls.n	8006c5c <_svfiprintf_r+0x17c>
 8006bc4:	b1b0      	cbz	r0, 8006bf4 <_svfiprintf_r+0x114>
 8006bc6:	9207      	str	r2, [sp, #28]
 8006bc8:	e014      	b.n	8006bf4 <_svfiprintf_r+0x114>
 8006bca:	eba0 0308 	sub.w	r3, r0, r8
 8006bce:	fa09 f303 	lsl.w	r3, r9, r3
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	46a2      	mov	sl, r4
 8006bd8:	e7d2      	b.n	8006b80 <_svfiprintf_r+0xa0>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	1d19      	adds	r1, r3, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	9103      	str	r1, [sp, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bfbb      	ittet	lt
 8006be6:	425b      	neglt	r3, r3
 8006be8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bec:	9307      	strge	r3, [sp, #28]
 8006bee:	9307      	strlt	r3, [sp, #28]
 8006bf0:	bfb8      	it	lt
 8006bf2:	9204      	strlt	r2, [sp, #16]
 8006bf4:	7823      	ldrb	r3, [r4, #0]
 8006bf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bf8:	d10a      	bne.n	8006c10 <_svfiprintf_r+0x130>
 8006bfa:	7863      	ldrb	r3, [r4, #1]
 8006bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bfe:	d132      	bne.n	8006c66 <_svfiprintf_r+0x186>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	9203      	str	r2, [sp, #12]
 8006c08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c0c:	3402      	adds	r4, #2
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006cd4 <_svfiprintf_r+0x1f4>
 8006c14:	7821      	ldrb	r1, [r4, #0]
 8006c16:	2203      	movs	r2, #3
 8006c18:	4650      	mov	r0, sl
 8006c1a:	f7f9 fb01 	bl	8000220 <memchr>
 8006c1e:	b138      	cbz	r0, 8006c30 <_svfiprintf_r+0x150>
 8006c20:	9b04      	ldr	r3, [sp, #16]
 8006c22:	eba0 000a 	sub.w	r0, r0, sl
 8006c26:	2240      	movs	r2, #64	@ 0x40
 8006c28:	4082      	lsls	r2, r0
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	3401      	adds	r4, #1
 8006c2e:	9304      	str	r3, [sp, #16]
 8006c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c34:	4824      	ldr	r0, [pc, #144]	@ (8006cc8 <_svfiprintf_r+0x1e8>)
 8006c36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c3a:	2206      	movs	r2, #6
 8006c3c:	f7f9 faf0 	bl	8000220 <memchr>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d036      	beq.n	8006cb2 <_svfiprintf_r+0x1d2>
 8006c44:	4b21      	ldr	r3, [pc, #132]	@ (8006ccc <_svfiprintf_r+0x1ec>)
 8006c46:	bb1b      	cbnz	r3, 8006c90 <_svfiprintf_r+0x1b0>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	3307      	adds	r3, #7
 8006c4c:	f023 0307 	bic.w	r3, r3, #7
 8006c50:	3308      	adds	r3, #8
 8006c52:	9303      	str	r3, [sp, #12]
 8006c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c56:	4433      	add	r3, r6
 8006c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c5a:	e76a      	b.n	8006b32 <_svfiprintf_r+0x52>
 8006c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c60:	460c      	mov	r4, r1
 8006c62:	2001      	movs	r0, #1
 8006c64:	e7a8      	b.n	8006bb8 <_svfiprintf_r+0xd8>
 8006c66:	2300      	movs	r3, #0
 8006c68:	3401      	adds	r4, #1
 8006c6a:	9305      	str	r3, [sp, #20]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	f04f 0c0a 	mov.w	ip, #10
 8006c72:	4620      	mov	r0, r4
 8006c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c78:	3a30      	subs	r2, #48	@ 0x30
 8006c7a:	2a09      	cmp	r2, #9
 8006c7c:	d903      	bls.n	8006c86 <_svfiprintf_r+0x1a6>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0c6      	beq.n	8006c10 <_svfiprintf_r+0x130>
 8006c82:	9105      	str	r1, [sp, #20]
 8006c84:	e7c4      	b.n	8006c10 <_svfiprintf_r+0x130>
 8006c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e7f0      	b.n	8006c72 <_svfiprintf_r+0x192>
 8006c90:	ab03      	add	r3, sp, #12
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	462a      	mov	r2, r5
 8006c96:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd0 <_svfiprintf_r+0x1f0>)
 8006c98:	a904      	add	r1, sp, #16
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	1c42      	adds	r2, r0, #1
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	d1d6      	bne.n	8006c54 <_svfiprintf_r+0x174>
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	065b      	lsls	r3, r3, #25
 8006caa:	f53f af2d 	bmi.w	8006b08 <_svfiprintf_r+0x28>
 8006cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cb0:	e72c      	b.n	8006b0c <_svfiprintf_r+0x2c>
 8006cb2:	ab03      	add	r3, sp, #12
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	462a      	mov	r2, r5
 8006cb8:	4b05      	ldr	r3, [pc, #20]	@ (8006cd0 <_svfiprintf_r+0x1f0>)
 8006cba:	a904      	add	r1, sp, #16
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f000 f879 	bl	8006db4 <_printf_i>
 8006cc2:	e7ed      	b.n	8006ca0 <_svfiprintf_r+0x1c0>
 8006cc4:	08008671 	.word	0x08008671
 8006cc8:	0800867b 	.word	0x0800867b
 8006ccc:	00000000 	.word	0x00000000
 8006cd0:	08006a29 	.word	0x08006a29
 8006cd4:	08008677 	.word	0x08008677

08006cd8 <_printf_common>:
 8006cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cdc:	4616      	mov	r6, r2
 8006cde:	4698      	mov	r8, r3
 8006ce0:	688a      	ldr	r2, [r1, #8]
 8006ce2:	690b      	ldr	r3, [r1, #16]
 8006ce4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	bfb8      	it	lt
 8006cec:	4613      	movlt	r3, r2
 8006cee:	6033      	str	r3, [r6, #0]
 8006cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	b10a      	cbz	r2, 8006cfe <_printf_common+0x26>
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	6033      	str	r3, [r6, #0]
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	0699      	lsls	r1, r3, #26
 8006d02:	bf42      	ittt	mi
 8006d04:	6833      	ldrmi	r3, [r6, #0]
 8006d06:	3302      	addmi	r3, #2
 8006d08:	6033      	strmi	r3, [r6, #0]
 8006d0a:	6825      	ldr	r5, [r4, #0]
 8006d0c:	f015 0506 	ands.w	r5, r5, #6
 8006d10:	d106      	bne.n	8006d20 <_printf_common+0x48>
 8006d12:	f104 0a19 	add.w	sl, r4, #25
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	6832      	ldr	r2, [r6, #0]
 8006d1a:	1a9b      	subs	r3, r3, r2
 8006d1c:	42ab      	cmp	r3, r5
 8006d1e:	dc26      	bgt.n	8006d6e <_printf_common+0x96>
 8006d20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	3b00      	subs	r3, #0
 8006d28:	bf18      	it	ne
 8006d2a:	2301      	movne	r3, #1
 8006d2c:	0692      	lsls	r2, r2, #26
 8006d2e:	d42b      	bmi.n	8006d88 <_printf_common+0xb0>
 8006d30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d34:	4641      	mov	r1, r8
 8006d36:	4638      	mov	r0, r7
 8006d38:	47c8      	blx	r9
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d01e      	beq.n	8006d7c <_printf_common+0xa4>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	6922      	ldr	r2, [r4, #16]
 8006d42:	f003 0306 	and.w	r3, r3, #6
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	bf02      	ittt	eq
 8006d4a:	68e5      	ldreq	r5, [r4, #12]
 8006d4c:	6833      	ldreq	r3, [r6, #0]
 8006d4e:	1aed      	subeq	r5, r5, r3
 8006d50:	68a3      	ldr	r3, [r4, #8]
 8006d52:	bf0c      	ite	eq
 8006d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d58:	2500      	movne	r5, #0
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	bfc4      	itt	gt
 8006d5e:	1a9b      	subgt	r3, r3, r2
 8006d60:	18ed      	addgt	r5, r5, r3
 8006d62:	2600      	movs	r6, #0
 8006d64:	341a      	adds	r4, #26
 8006d66:	42b5      	cmp	r5, r6
 8006d68:	d11a      	bne.n	8006da0 <_printf_common+0xc8>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e008      	b.n	8006d80 <_printf_common+0xa8>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4652      	mov	r2, sl
 8006d72:	4641      	mov	r1, r8
 8006d74:	4638      	mov	r0, r7
 8006d76:	47c8      	blx	r9
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d103      	bne.n	8006d84 <_printf_common+0xac>
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d84:	3501      	adds	r5, #1
 8006d86:	e7c6      	b.n	8006d16 <_printf_common+0x3e>
 8006d88:	18e1      	adds	r1, r4, r3
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	2030      	movs	r0, #48	@ 0x30
 8006d8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d92:	4422      	add	r2, r4
 8006d94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	e7c7      	b.n	8006d30 <_printf_common+0x58>
 8006da0:	2301      	movs	r3, #1
 8006da2:	4622      	mov	r2, r4
 8006da4:	4641      	mov	r1, r8
 8006da6:	4638      	mov	r0, r7
 8006da8:	47c8      	blx	r9
 8006daa:	3001      	adds	r0, #1
 8006dac:	d0e6      	beq.n	8006d7c <_printf_common+0xa4>
 8006dae:	3601      	adds	r6, #1
 8006db0:	e7d9      	b.n	8006d66 <_printf_common+0x8e>
	...

08006db4 <_printf_i>:
 8006db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db8:	7e0f      	ldrb	r7, [r1, #24]
 8006dba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006dbc:	2f78      	cmp	r7, #120	@ 0x78
 8006dbe:	4691      	mov	r9, r2
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	469a      	mov	sl, r3
 8006dc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dca:	d807      	bhi.n	8006ddc <_printf_i+0x28>
 8006dcc:	2f62      	cmp	r7, #98	@ 0x62
 8006dce:	d80a      	bhi.n	8006de6 <_printf_i+0x32>
 8006dd0:	2f00      	cmp	r7, #0
 8006dd2:	f000 80d2 	beq.w	8006f7a <_printf_i+0x1c6>
 8006dd6:	2f58      	cmp	r7, #88	@ 0x58
 8006dd8:	f000 80b9 	beq.w	8006f4e <_printf_i+0x19a>
 8006ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006de0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006de4:	e03a      	b.n	8006e5c <_printf_i+0xa8>
 8006de6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dea:	2b15      	cmp	r3, #21
 8006dec:	d8f6      	bhi.n	8006ddc <_printf_i+0x28>
 8006dee:	a101      	add	r1, pc, #4	@ (adr r1, 8006df4 <_printf_i+0x40>)
 8006df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df4:	08006e4d 	.word	0x08006e4d
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006ddd 	.word	0x08006ddd
 8006e00:	08006ddd 	.word	0x08006ddd
 8006e04:	08006ddd 	.word	0x08006ddd
 8006e08:	08006ddd 	.word	0x08006ddd
 8006e0c:	08006e61 	.word	0x08006e61
 8006e10:	08006ddd 	.word	0x08006ddd
 8006e14:	08006ddd 	.word	0x08006ddd
 8006e18:	08006ddd 	.word	0x08006ddd
 8006e1c:	08006ddd 	.word	0x08006ddd
 8006e20:	08006f61 	.word	0x08006f61
 8006e24:	08006e8b 	.word	0x08006e8b
 8006e28:	08006f1b 	.word	0x08006f1b
 8006e2c:	08006ddd 	.word	0x08006ddd
 8006e30:	08006ddd 	.word	0x08006ddd
 8006e34:	08006f83 	.word	0x08006f83
 8006e38:	08006ddd 	.word	0x08006ddd
 8006e3c:	08006e8b 	.word	0x08006e8b
 8006e40:	08006ddd 	.word	0x08006ddd
 8006e44:	08006ddd 	.word	0x08006ddd
 8006e48:	08006f23 	.word	0x08006f23
 8006e4c:	6833      	ldr	r3, [r6, #0]
 8006e4e:	1d1a      	adds	r2, r3, #4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6032      	str	r2, [r6, #0]
 8006e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e09d      	b.n	8006f9c <_printf_i+0x1e8>
 8006e60:	6833      	ldr	r3, [r6, #0]
 8006e62:	6820      	ldr	r0, [r4, #0]
 8006e64:	1d19      	adds	r1, r3, #4
 8006e66:	6031      	str	r1, [r6, #0]
 8006e68:	0606      	lsls	r6, r0, #24
 8006e6a:	d501      	bpl.n	8006e70 <_printf_i+0xbc>
 8006e6c:	681d      	ldr	r5, [r3, #0]
 8006e6e:	e003      	b.n	8006e78 <_printf_i+0xc4>
 8006e70:	0645      	lsls	r5, r0, #25
 8006e72:	d5fb      	bpl.n	8006e6c <_printf_i+0xb8>
 8006e74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e78:	2d00      	cmp	r5, #0
 8006e7a:	da03      	bge.n	8006e84 <_printf_i+0xd0>
 8006e7c:	232d      	movs	r3, #45	@ 0x2d
 8006e7e:	426d      	negs	r5, r5
 8006e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e84:	4859      	ldr	r0, [pc, #356]	@ (8006fec <_printf_i+0x238>)
 8006e86:	230a      	movs	r3, #10
 8006e88:	e011      	b.n	8006eae <_printf_i+0xfa>
 8006e8a:	6821      	ldr	r1, [r4, #0]
 8006e8c:	6833      	ldr	r3, [r6, #0]
 8006e8e:	0608      	lsls	r0, r1, #24
 8006e90:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e94:	d402      	bmi.n	8006e9c <_printf_i+0xe8>
 8006e96:	0649      	lsls	r1, r1, #25
 8006e98:	bf48      	it	mi
 8006e9a:	b2ad      	uxthmi	r5, r5
 8006e9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e9e:	4853      	ldr	r0, [pc, #332]	@ (8006fec <_printf_i+0x238>)
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	bf14      	ite	ne
 8006ea4:	230a      	movne	r3, #10
 8006ea6:	2308      	moveq	r3, #8
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eae:	6866      	ldr	r6, [r4, #4]
 8006eb0:	60a6      	str	r6, [r4, #8]
 8006eb2:	2e00      	cmp	r6, #0
 8006eb4:	bfa2      	ittt	ge
 8006eb6:	6821      	ldrge	r1, [r4, #0]
 8006eb8:	f021 0104 	bicge.w	r1, r1, #4
 8006ebc:	6021      	strge	r1, [r4, #0]
 8006ebe:	b90d      	cbnz	r5, 8006ec4 <_printf_i+0x110>
 8006ec0:	2e00      	cmp	r6, #0
 8006ec2:	d04b      	beq.n	8006f5c <_printf_i+0x1a8>
 8006ec4:	4616      	mov	r6, r2
 8006ec6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eca:	fb03 5711 	mls	r7, r3, r1, r5
 8006ece:	5dc7      	ldrb	r7, [r0, r7]
 8006ed0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ed4:	462f      	mov	r7, r5
 8006ed6:	42bb      	cmp	r3, r7
 8006ed8:	460d      	mov	r5, r1
 8006eda:	d9f4      	bls.n	8006ec6 <_printf_i+0x112>
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d10b      	bne.n	8006ef8 <_printf_i+0x144>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	07df      	lsls	r7, r3, #31
 8006ee4:	d508      	bpl.n	8006ef8 <_printf_i+0x144>
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	6861      	ldr	r1, [r4, #4]
 8006eea:	4299      	cmp	r1, r3
 8006eec:	bfde      	ittt	le
 8006eee:	2330      	movle	r3, #48	@ 0x30
 8006ef0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ef4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ef8:	1b92      	subs	r2, r2, r6
 8006efa:	6122      	str	r2, [r4, #16]
 8006efc:	f8cd a000 	str.w	sl, [sp]
 8006f00:	464b      	mov	r3, r9
 8006f02:	aa03      	add	r2, sp, #12
 8006f04:	4621      	mov	r1, r4
 8006f06:	4640      	mov	r0, r8
 8006f08:	f7ff fee6 	bl	8006cd8 <_printf_common>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d14a      	bne.n	8006fa6 <_printf_i+0x1f2>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	b004      	add	sp, #16
 8006f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	f043 0320 	orr.w	r3, r3, #32
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	4833      	ldr	r0, [pc, #204]	@ (8006ff0 <_printf_i+0x23c>)
 8006f24:	2778      	movs	r7, #120	@ 0x78
 8006f26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	6831      	ldr	r1, [r6, #0]
 8006f2e:	061f      	lsls	r7, r3, #24
 8006f30:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f34:	d402      	bmi.n	8006f3c <_printf_i+0x188>
 8006f36:	065f      	lsls	r7, r3, #25
 8006f38:	bf48      	it	mi
 8006f3a:	b2ad      	uxthmi	r5, r5
 8006f3c:	6031      	str	r1, [r6, #0]
 8006f3e:	07d9      	lsls	r1, r3, #31
 8006f40:	bf44      	itt	mi
 8006f42:	f043 0320 	orrmi.w	r3, r3, #32
 8006f46:	6023      	strmi	r3, [r4, #0]
 8006f48:	b11d      	cbz	r5, 8006f52 <_printf_i+0x19e>
 8006f4a:	2310      	movs	r3, #16
 8006f4c:	e7ac      	b.n	8006ea8 <_printf_i+0xf4>
 8006f4e:	4827      	ldr	r0, [pc, #156]	@ (8006fec <_printf_i+0x238>)
 8006f50:	e7e9      	b.n	8006f26 <_printf_i+0x172>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	f023 0320 	bic.w	r3, r3, #32
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	e7f6      	b.n	8006f4a <_printf_i+0x196>
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	e7bd      	b.n	8006edc <_printf_i+0x128>
 8006f60:	6833      	ldr	r3, [r6, #0]
 8006f62:	6825      	ldr	r5, [r4, #0]
 8006f64:	6961      	ldr	r1, [r4, #20]
 8006f66:	1d18      	adds	r0, r3, #4
 8006f68:	6030      	str	r0, [r6, #0]
 8006f6a:	062e      	lsls	r6, r5, #24
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	d501      	bpl.n	8006f74 <_printf_i+0x1c0>
 8006f70:	6019      	str	r1, [r3, #0]
 8006f72:	e002      	b.n	8006f7a <_printf_i+0x1c6>
 8006f74:	0668      	lsls	r0, r5, #25
 8006f76:	d5fb      	bpl.n	8006f70 <_printf_i+0x1bc>
 8006f78:	8019      	strh	r1, [r3, #0]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	4616      	mov	r6, r2
 8006f80:	e7bc      	b.n	8006efc <_printf_i+0x148>
 8006f82:	6833      	ldr	r3, [r6, #0]
 8006f84:	1d1a      	adds	r2, r3, #4
 8006f86:	6032      	str	r2, [r6, #0]
 8006f88:	681e      	ldr	r6, [r3, #0]
 8006f8a:	6862      	ldr	r2, [r4, #4]
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7f9 f946 	bl	8000220 <memchr>
 8006f94:	b108      	cbz	r0, 8006f9a <_printf_i+0x1e6>
 8006f96:	1b80      	subs	r0, r0, r6
 8006f98:	6060      	str	r0, [r4, #4]
 8006f9a:	6863      	ldr	r3, [r4, #4]
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fa4:	e7aa      	b.n	8006efc <_printf_i+0x148>
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	4632      	mov	r2, r6
 8006faa:	4649      	mov	r1, r9
 8006fac:	4640      	mov	r0, r8
 8006fae:	47d0      	blx	sl
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d0ad      	beq.n	8006f10 <_printf_i+0x15c>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	079b      	lsls	r3, r3, #30
 8006fb8:	d413      	bmi.n	8006fe2 <_printf_i+0x22e>
 8006fba:	68e0      	ldr	r0, [r4, #12]
 8006fbc:	9b03      	ldr	r3, [sp, #12]
 8006fbe:	4298      	cmp	r0, r3
 8006fc0:	bfb8      	it	lt
 8006fc2:	4618      	movlt	r0, r3
 8006fc4:	e7a6      	b.n	8006f14 <_printf_i+0x160>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4649      	mov	r1, r9
 8006fcc:	4640      	mov	r0, r8
 8006fce:	47d0      	blx	sl
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d09d      	beq.n	8006f10 <_printf_i+0x15c>
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	9903      	ldr	r1, [sp, #12]
 8006fda:	1a5b      	subs	r3, r3, r1
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	dcf2      	bgt.n	8006fc6 <_printf_i+0x212>
 8006fe0:	e7eb      	b.n	8006fba <_printf_i+0x206>
 8006fe2:	2500      	movs	r5, #0
 8006fe4:	f104 0619 	add.w	r6, r4, #25
 8006fe8:	e7f5      	b.n	8006fd6 <_printf_i+0x222>
 8006fea:	bf00      	nop
 8006fec:	08008682 	.word	0x08008682
 8006ff0:	08008693 	.word	0x08008693

08006ff4 <memmove>:
 8006ff4:	4288      	cmp	r0, r1
 8006ff6:	b510      	push	{r4, lr}
 8006ff8:	eb01 0402 	add.w	r4, r1, r2
 8006ffc:	d902      	bls.n	8007004 <memmove+0x10>
 8006ffe:	4284      	cmp	r4, r0
 8007000:	4623      	mov	r3, r4
 8007002:	d807      	bhi.n	8007014 <memmove+0x20>
 8007004:	1e43      	subs	r3, r0, #1
 8007006:	42a1      	cmp	r1, r4
 8007008:	d008      	beq.n	800701c <memmove+0x28>
 800700a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800700e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007012:	e7f8      	b.n	8007006 <memmove+0x12>
 8007014:	4402      	add	r2, r0
 8007016:	4601      	mov	r1, r0
 8007018:	428a      	cmp	r2, r1
 800701a:	d100      	bne.n	800701e <memmove+0x2a>
 800701c:	bd10      	pop	{r4, pc}
 800701e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007026:	e7f7      	b.n	8007018 <memmove+0x24>

08007028 <_realloc_r>:
 8007028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702c:	4680      	mov	r8, r0
 800702e:	4615      	mov	r5, r2
 8007030:	460c      	mov	r4, r1
 8007032:	b921      	cbnz	r1, 800703e <_realloc_r+0x16>
 8007034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	4611      	mov	r1, r2
 800703a:	f7ff bae3 	b.w	8006604 <_malloc_r>
 800703e:	b92a      	cbnz	r2, 800704c <_realloc_r+0x24>
 8007040:	f7ff fca8 	bl	8006994 <_free_r>
 8007044:	2400      	movs	r4, #0
 8007046:	4620      	mov	r0, r4
 8007048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800704c:	f000 f81a 	bl	8007084 <_malloc_usable_size_r>
 8007050:	4285      	cmp	r5, r0
 8007052:	4606      	mov	r6, r0
 8007054:	d802      	bhi.n	800705c <_realloc_r+0x34>
 8007056:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800705a:	d8f4      	bhi.n	8007046 <_realloc_r+0x1e>
 800705c:	4629      	mov	r1, r5
 800705e:	4640      	mov	r0, r8
 8007060:	f7ff fad0 	bl	8006604 <_malloc_r>
 8007064:	4607      	mov	r7, r0
 8007066:	2800      	cmp	r0, #0
 8007068:	d0ec      	beq.n	8007044 <_realloc_r+0x1c>
 800706a:	42b5      	cmp	r5, r6
 800706c:	462a      	mov	r2, r5
 800706e:	4621      	mov	r1, r4
 8007070:	bf28      	it	cs
 8007072:	4632      	movcs	r2, r6
 8007074:	f7ff fc80 	bl	8006978 <memcpy>
 8007078:	4621      	mov	r1, r4
 800707a:	4640      	mov	r0, r8
 800707c:	f7ff fc8a 	bl	8006994 <_free_r>
 8007080:	463c      	mov	r4, r7
 8007082:	e7e0      	b.n	8007046 <_realloc_r+0x1e>

08007084 <_malloc_usable_size_r>:
 8007084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007088:	1f18      	subs	r0, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	bfbc      	itt	lt
 800708e:	580b      	ldrlt	r3, [r1, r0]
 8007090:	18c0      	addlt	r0, r0, r3
 8007092:	4770      	bx	lr

08007094 <atan2>:
 8007094:	f000 b8c4 	b.w	8007220 <__ieee754_atan2>

08007098 <pow>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	ed2d 8b02 	vpush	{d8}
 800709e:	eeb0 8a40 	vmov.f32	s16, s0
 80070a2:	eef0 8a60 	vmov.f32	s17, s1
 80070a6:	ec55 4b11 	vmov	r4, r5, d1
 80070aa:	f000 f981 	bl	80073b0 <__ieee754_pow>
 80070ae:	4622      	mov	r2, r4
 80070b0:	462b      	mov	r3, r5
 80070b2:	4620      	mov	r0, r4
 80070b4:	4629      	mov	r1, r5
 80070b6:	ec57 6b10 	vmov	r6, r7, d0
 80070ba:	f7f9 fd57 	bl	8000b6c <__aeabi_dcmpun>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d13b      	bne.n	800713a <pow+0xa2>
 80070c2:	ec51 0b18 	vmov	r0, r1, d8
 80070c6:	2200      	movs	r2, #0
 80070c8:	2300      	movs	r3, #0
 80070ca:	f7f9 fd1d 	bl	8000b08 <__aeabi_dcmpeq>
 80070ce:	b1b8      	cbz	r0, 8007100 <pow+0x68>
 80070d0:	2200      	movs	r2, #0
 80070d2:	2300      	movs	r3, #0
 80070d4:	4620      	mov	r0, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	f7f9 fd16 	bl	8000b08 <__aeabi_dcmpeq>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d146      	bne.n	800716e <pow+0xd6>
 80070e0:	ec45 4b10 	vmov	d0, r4, r5
 80070e4:	f000 f848 	bl	8007178 <finite>
 80070e8:	b338      	cbz	r0, 800713a <pow+0xa2>
 80070ea:	2200      	movs	r2, #0
 80070ec:	2300      	movs	r3, #0
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7f9 fd13 	bl	8000b1c <__aeabi_dcmplt>
 80070f6:	b300      	cbz	r0, 800713a <pow+0xa2>
 80070f8:	f7ff fc12 	bl	8006920 <__errno>
 80070fc:	2322      	movs	r3, #34	@ 0x22
 80070fe:	e01b      	b.n	8007138 <pow+0xa0>
 8007100:	ec47 6b10 	vmov	d0, r6, r7
 8007104:	f000 f838 	bl	8007178 <finite>
 8007108:	b9e0      	cbnz	r0, 8007144 <pow+0xac>
 800710a:	eeb0 0a48 	vmov.f32	s0, s16
 800710e:	eef0 0a68 	vmov.f32	s1, s17
 8007112:	f000 f831 	bl	8007178 <finite>
 8007116:	b1a8      	cbz	r0, 8007144 <pow+0xac>
 8007118:	ec45 4b10 	vmov	d0, r4, r5
 800711c:	f000 f82c 	bl	8007178 <finite>
 8007120:	b180      	cbz	r0, 8007144 <pow+0xac>
 8007122:	4632      	mov	r2, r6
 8007124:	463b      	mov	r3, r7
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 fd1f 	bl	8000b6c <__aeabi_dcmpun>
 800712e:	2800      	cmp	r0, #0
 8007130:	d0e2      	beq.n	80070f8 <pow+0x60>
 8007132:	f7ff fbf5 	bl	8006920 <__errno>
 8007136:	2321      	movs	r3, #33	@ 0x21
 8007138:	6003      	str	r3, [r0, #0]
 800713a:	ecbd 8b02 	vpop	{d8}
 800713e:	ec47 6b10 	vmov	d0, r6, r7
 8007142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007144:	2200      	movs	r2, #0
 8007146:	2300      	movs	r3, #0
 8007148:	4630      	mov	r0, r6
 800714a:	4639      	mov	r1, r7
 800714c:	f7f9 fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 8007150:	2800      	cmp	r0, #0
 8007152:	d0f2      	beq.n	800713a <pow+0xa2>
 8007154:	eeb0 0a48 	vmov.f32	s0, s16
 8007158:	eef0 0a68 	vmov.f32	s1, s17
 800715c:	f000 f80c 	bl	8007178 <finite>
 8007160:	2800      	cmp	r0, #0
 8007162:	d0ea      	beq.n	800713a <pow+0xa2>
 8007164:	ec45 4b10 	vmov	d0, r4, r5
 8007168:	f000 f806 	bl	8007178 <finite>
 800716c:	e7c3      	b.n	80070f6 <pow+0x5e>
 800716e:	4f01      	ldr	r7, [pc, #4]	@ (8007174 <pow+0xdc>)
 8007170:	2600      	movs	r6, #0
 8007172:	e7e2      	b.n	800713a <pow+0xa2>
 8007174:	3ff00000 	.word	0x3ff00000

08007178 <finite>:
 8007178:	b082      	sub	sp, #8
 800717a:	ed8d 0b00 	vstr	d0, [sp]
 800717e:	9801      	ldr	r0, [sp, #4]
 8007180:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007184:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007188:	0fc0      	lsrs	r0, r0, #31
 800718a:	b002      	add	sp, #8
 800718c:	4770      	bx	lr
	...

08007190 <round>:
 8007190:	ec51 0b10 	vmov	r0, r1, d0
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800719a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800719e:	2a13      	cmp	r2, #19
 80071a0:	460b      	mov	r3, r1
 80071a2:	4605      	mov	r5, r0
 80071a4:	dc1b      	bgt.n	80071de <round+0x4e>
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	da0b      	bge.n	80071c2 <round+0x32>
 80071aa:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80071ae:	3201      	adds	r2, #1
 80071b0:	bf04      	itt	eq
 80071b2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80071b6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80071ba:	2200      	movs	r2, #0
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	e015      	b.n	80071ee <round+0x5e>
 80071c2:	4c15      	ldr	r4, [pc, #84]	@ (8007218 <round+0x88>)
 80071c4:	4114      	asrs	r4, r2
 80071c6:	ea04 0601 	and.w	r6, r4, r1
 80071ca:	4306      	orrs	r6, r0
 80071cc:	d00f      	beq.n	80071ee <round+0x5e>
 80071ce:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80071d2:	fa41 f202 	asr.w	r2, r1, r2
 80071d6:	4413      	add	r3, r2
 80071d8:	ea23 0304 	bic.w	r3, r3, r4
 80071dc:	e7ed      	b.n	80071ba <round+0x2a>
 80071de:	2a33      	cmp	r2, #51	@ 0x33
 80071e0:	dd08      	ble.n	80071f4 <round+0x64>
 80071e2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80071e6:	d102      	bne.n	80071ee <round+0x5e>
 80071e8:	4602      	mov	r2, r0
 80071ea:	f7f9 f86f 	bl	80002cc <__adddf3>
 80071ee:	ec41 0b10 	vmov	d0, r0, r1
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80071f8:	f04f 34ff 	mov.w	r4, #4294967295
 80071fc:	40f4      	lsrs	r4, r6
 80071fe:	4204      	tst	r4, r0
 8007200:	d0f5      	beq.n	80071ee <round+0x5e>
 8007202:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8007206:	2201      	movs	r2, #1
 8007208:	408a      	lsls	r2, r1
 800720a:	1952      	adds	r2, r2, r5
 800720c:	bf28      	it	cs
 800720e:	3301      	addcs	r3, #1
 8007210:	ea22 0204 	bic.w	r2, r2, r4
 8007214:	e7d2      	b.n	80071bc <round+0x2c>
 8007216:	bf00      	nop
 8007218:	000fffff 	.word	0x000fffff
 800721c:	00000000 	.word	0x00000000

08007220 <__ieee754_atan2>:
 8007220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007224:	ec57 6b11 	vmov	r6, r7, d1
 8007228:	4273      	negs	r3, r6
 800722a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80073a8 <__ieee754_atan2+0x188>
 800722e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007232:	4333      	orrs	r3, r6
 8007234:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007238:	4543      	cmp	r3, r8
 800723a:	ec51 0b10 	vmov	r0, r1, d0
 800723e:	4635      	mov	r5, r6
 8007240:	d809      	bhi.n	8007256 <__ieee754_atan2+0x36>
 8007242:	4244      	negs	r4, r0
 8007244:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007248:	4304      	orrs	r4, r0
 800724a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800724e:	4544      	cmp	r4, r8
 8007250:	468e      	mov	lr, r1
 8007252:	4681      	mov	r9, r0
 8007254:	d907      	bls.n	8007266 <__ieee754_atan2+0x46>
 8007256:	4632      	mov	r2, r6
 8007258:	463b      	mov	r3, r7
 800725a:	f7f9 f837 	bl	80002cc <__adddf3>
 800725e:	ec41 0b10 	vmov	d0, r0, r1
 8007262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007266:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800726a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800726e:	4334      	orrs	r4, r6
 8007270:	d103      	bne.n	800727a <__ieee754_atan2+0x5a>
 8007272:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007276:	f000 bddf 	b.w	8007e38 <atan>
 800727a:	17bc      	asrs	r4, r7, #30
 800727c:	f004 0402 	and.w	r4, r4, #2
 8007280:	ea53 0909 	orrs.w	r9, r3, r9
 8007284:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007288:	d107      	bne.n	800729a <__ieee754_atan2+0x7a>
 800728a:	2c02      	cmp	r4, #2
 800728c:	d05f      	beq.n	800734e <__ieee754_atan2+0x12e>
 800728e:	2c03      	cmp	r4, #3
 8007290:	d1e5      	bne.n	800725e <__ieee754_atan2+0x3e>
 8007292:	a141      	add	r1, pc, #260	@ (adr r1, 8007398 <__ieee754_atan2+0x178>)
 8007294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007298:	e7e1      	b.n	800725e <__ieee754_atan2+0x3e>
 800729a:	4315      	orrs	r5, r2
 800729c:	d106      	bne.n	80072ac <__ieee754_atan2+0x8c>
 800729e:	f1be 0f00 	cmp.w	lr, #0
 80072a2:	da5f      	bge.n	8007364 <__ieee754_atan2+0x144>
 80072a4:	a13e      	add	r1, pc, #248	@ (adr r1, 80073a0 <__ieee754_atan2+0x180>)
 80072a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072aa:	e7d8      	b.n	800725e <__ieee754_atan2+0x3e>
 80072ac:	4542      	cmp	r2, r8
 80072ae:	d10f      	bne.n	80072d0 <__ieee754_atan2+0xb0>
 80072b0:	4293      	cmp	r3, r2
 80072b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80072b6:	d107      	bne.n	80072c8 <__ieee754_atan2+0xa8>
 80072b8:	2c02      	cmp	r4, #2
 80072ba:	d84c      	bhi.n	8007356 <__ieee754_atan2+0x136>
 80072bc:	4b34      	ldr	r3, [pc, #208]	@ (8007390 <__ieee754_atan2+0x170>)
 80072be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072c6:	e7ca      	b.n	800725e <__ieee754_atan2+0x3e>
 80072c8:	2c02      	cmp	r4, #2
 80072ca:	d848      	bhi.n	800735e <__ieee754_atan2+0x13e>
 80072cc:	4b31      	ldr	r3, [pc, #196]	@ (8007394 <__ieee754_atan2+0x174>)
 80072ce:	e7f6      	b.n	80072be <__ieee754_atan2+0x9e>
 80072d0:	4543      	cmp	r3, r8
 80072d2:	d0e4      	beq.n	800729e <__ieee754_atan2+0x7e>
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80072da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80072de:	da1e      	bge.n	800731e <__ieee754_atan2+0xfe>
 80072e0:	2f00      	cmp	r7, #0
 80072e2:	da01      	bge.n	80072e8 <__ieee754_atan2+0xc8>
 80072e4:	323c      	adds	r2, #60	@ 0x3c
 80072e6:	db1e      	blt.n	8007326 <__ieee754_atan2+0x106>
 80072e8:	4632      	mov	r2, r6
 80072ea:	463b      	mov	r3, r7
 80072ec:	f7f9 face 	bl	800088c <__aeabi_ddiv>
 80072f0:	ec41 0b10 	vmov	d0, r0, r1
 80072f4:	f000 ff38 	bl	8008168 <fabs>
 80072f8:	f000 fd9e 	bl	8007e38 <atan>
 80072fc:	ec51 0b10 	vmov	r0, r1, d0
 8007300:	2c01      	cmp	r4, #1
 8007302:	d013      	beq.n	800732c <__ieee754_atan2+0x10c>
 8007304:	2c02      	cmp	r4, #2
 8007306:	d015      	beq.n	8007334 <__ieee754_atan2+0x114>
 8007308:	2c00      	cmp	r4, #0
 800730a:	d0a8      	beq.n	800725e <__ieee754_atan2+0x3e>
 800730c:	a318      	add	r3, pc, #96	@ (adr r3, 8007370 <__ieee754_atan2+0x150>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	f7f8 ffd9 	bl	80002c8 <__aeabi_dsub>
 8007316:	a318      	add	r3, pc, #96	@ (adr r3, 8007378 <__ieee754_atan2+0x158>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	e014      	b.n	8007348 <__ieee754_atan2+0x128>
 800731e:	a118      	add	r1, pc, #96	@ (adr r1, 8007380 <__ieee754_atan2+0x160>)
 8007320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007324:	e7ec      	b.n	8007300 <__ieee754_atan2+0xe0>
 8007326:	2000      	movs	r0, #0
 8007328:	2100      	movs	r1, #0
 800732a:	e7e9      	b.n	8007300 <__ieee754_atan2+0xe0>
 800732c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007330:	4619      	mov	r1, r3
 8007332:	e794      	b.n	800725e <__ieee754_atan2+0x3e>
 8007334:	a30e      	add	r3, pc, #56	@ (adr r3, 8007370 <__ieee754_atan2+0x150>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f7f8 ffc5 	bl	80002c8 <__aeabi_dsub>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	a10d      	add	r1, pc, #52	@ (adr r1, 8007378 <__ieee754_atan2+0x158>)
 8007344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007348:	f7f8 ffbe 	bl	80002c8 <__aeabi_dsub>
 800734c:	e787      	b.n	800725e <__ieee754_atan2+0x3e>
 800734e:	a10a      	add	r1, pc, #40	@ (adr r1, 8007378 <__ieee754_atan2+0x158>)
 8007350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007354:	e783      	b.n	800725e <__ieee754_atan2+0x3e>
 8007356:	a10c      	add	r1, pc, #48	@ (adr r1, 8007388 <__ieee754_atan2+0x168>)
 8007358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800735c:	e77f      	b.n	800725e <__ieee754_atan2+0x3e>
 800735e:	2000      	movs	r0, #0
 8007360:	2100      	movs	r1, #0
 8007362:	e77c      	b.n	800725e <__ieee754_atan2+0x3e>
 8007364:	a106      	add	r1, pc, #24	@ (adr r1, 8007380 <__ieee754_atan2+0x160>)
 8007366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800736a:	e778      	b.n	800725e <__ieee754_atan2+0x3e>
 800736c:	f3af 8000 	nop.w
 8007370:	33145c07 	.word	0x33145c07
 8007374:	3ca1a626 	.word	0x3ca1a626
 8007378:	54442d18 	.word	0x54442d18
 800737c:	400921fb 	.word	0x400921fb
 8007380:	54442d18 	.word	0x54442d18
 8007384:	3ff921fb 	.word	0x3ff921fb
 8007388:	54442d18 	.word	0x54442d18
 800738c:	3fe921fb 	.word	0x3fe921fb
 8007390:	080086c0 	.word	0x080086c0
 8007394:	080086a8 	.word	0x080086a8
 8007398:	54442d18 	.word	0x54442d18
 800739c:	c00921fb 	.word	0xc00921fb
 80073a0:	54442d18 	.word	0x54442d18
 80073a4:	bff921fb 	.word	0xbff921fb
 80073a8:	7ff00000 	.word	0x7ff00000
 80073ac:	00000000 	.word	0x00000000

080073b0 <__ieee754_pow>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	b091      	sub	sp, #68	@ 0x44
 80073b6:	ed8d 1b00 	vstr	d1, [sp]
 80073ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80073be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80073c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80073c6:	ec57 6b10 	vmov	r6, r7, d0
 80073ca:	d113      	bne.n	80073f4 <__ieee754_pow+0x44>
 80073cc:	19b3      	adds	r3, r6, r6
 80073ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80073d2:	4152      	adcs	r2, r2
 80073d4:	4298      	cmp	r0, r3
 80073d6:	4b98      	ldr	r3, [pc, #608]	@ (8007638 <__ieee754_pow+0x288>)
 80073d8:	4193      	sbcs	r3, r2
 80073da:	f080 84ea 	bcs.w	8007db2 <__ieee754_pow+0xa02>
 80073de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073e2:	4630      	mov	r0, r6
 80073e4:	4639      	mov	r1, r7
 80073e6:	f7f8 ff71 	bl	80002cc <__adddf3>
 80073ea:	ec41 0b10 	vmov	d0, r0, r1
 80073ee:	b011      	add	sp, #68	@ 0x44
 80073f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f4:	4a91      	ldr	r2, [pc, #580]	@ (800763c <__ieee754_pow+0x28c>)
 80073f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80073fa:	4590      	cmp	r8, r2
 80073fc:	463d      	mov	r5, r7
 80073fe:	4633      	mov	r3, r6
 8007400:	d806      	bhi.n	8007410 <__ieee754_pow+0x60>
 8007402:	d101      	bne.n	8007408 <__ieee754_pow+0x58>
 8007404:	2e00      	cmp	r6, #0
 8007406:	d1ea      	bne.n	80073de <__ieee754_pow+0x2e>
 8007408:	4592      	cmp	sl, r2
 800740a:	d801      	bhi.n	8007410 <__ieee754_pow+0x60>
 800740c:	d10e      	bne.n	800742c <__ieee754_pow+0x7c>
 800740e:	b169      	cbz	r1, 800742c <__ieee754_pow+0x7c>
 8007410:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007414:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007418:	431d      	orrs	r5, r3
 800741a:	d1e0      	bne.n	80073de <__ieee754_pow+0x2e>
 800741c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007420:	18db      	adds	r3, r3, r3
 8007422:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007426:	4152      	adcs	r2, r2
 8007428:	429d      	cmp	r5, r3
 800742a:	e7d4      	b.n	80073d6 <__ieee754_pow+0x26>
 800742c:	2d00      	cmp	r5, #0
 800742e:	46c3      	mov	fp, r8
 8007430:	da3a      	bge.n	80074a8 <__ieee754_pow+0xf8>
 8007432:	4a83      	ldr	r2, [pc, #524]	@ (8007640 <__ieee754_pow+0x290>)
 8007434:	4592      	cmp	sl, r2
 8007436:	d84d      	bhi.n	80074d4 <__ieee754_pow+0x124>
 8007438:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800743c:	4592      	cmp	sl, r2
 800743e:	f240 84c7 	bls.w	8007dd0 <__ieee754_pow+0xa20>
 8007442:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007446:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800744a:	2a14      	cmp	r2, #20
 800744c:	dd0f      	ble.n	800746e <__ieee754_pow+0xbe>
 800744e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007452:	fa21 f402 	lsr.w	r4, r1, r2
 8007456:	fa04 f202 	lsl.w	r2, r4, r2
 800745a:	428a      	cmp	r2, r1
 800745c:	f040 84b8 	bne.w	8007dd0 <__ieee754_pow+0xa20>
 8007460:	f004 0401 	and.w	r4, r4, #1
 8007464:	f1c4 0402 	rsb	r4, r4, #2
 8007468:	2900      	cmp	r1, #0
 800746a:	d158      	bne.n	800751e <__ieee754_pow+0x16e>
 800746c:	e00e      	b.n	800748c <__ieee754_pow+0xdc>
 800746e:	2900      	cmp	r1, #0
 8007470:	d154      	bne.n	800751c <__ieee754_pow+0x16c>
 8007472:	f1c2 0214 	rsb	r2, r2, #20
 8007476:	fa4a f402 	asr.w	r4, sl, r2
 800747a:	fa04 f202 	lsl.w	r2, r4, r2
 800747e:	4552      	cmp	r2, sl
 8007480:	f040 84a3 	bne.w	8007dca <__ieee754_pow+0xa1a>
 8007484:	f004 0401 	and.w	r4, r4, #1
 8007488:	f1c4 0402 	rsb	r4, r4, #2
 800748c:	4a6d      	ldr	r2, [pc, #436]	@ (8007644 <__ieee754_pow+0x294>)
 800748e:	4592      	cmp	sl, r2
 8007490:	d12e      	bne.n	80074f0 <__ieee754_pow+0x140>
 8007492:	f1b9 0f00 	cmp.w	r9, #0
 8007496:	f280 8494 	bge.w	8007dc2 <__ieee754_pow+0xa12>
 800749a:	496a      	ldr	r1, [pc, #424]	@ (8007644 <__ieee754_pow+0x294>)
 800749c:	4632      	mov	r2, r6
 800749e:	463b      	mov	r3, r7
 80074a0:	2000      	movs	r0, #0
 80074a2:	f7f9 f9f3 	bl	800088c <__aeabi_ddiv>
 80074a6:	e7a0      	b.n	80073ea <__ieee754_pow+0x3a>
 80074a8:	2400      	movs	r4, #0
 80074aa:	bbc1      	cbnz	r1, 800751e <__ieee754_pow+0x16e>
 80074ac:	4a63      	ldr	r2, [pc, #396]	@ (800763c <__ieee754_pow+0x28c>)
 80074ae:	4592      	cmp	sl, r2
 80074b0:	d1ec      	bne.n	800748c <__ieee754_pow+0xdc>
 80074b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80074b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80074ba:	431a      	orrs	r2, r3
 80074bc:	f000 8479 	beq.w	8007db2 <__ieee754_pow+0xa02>
 80074c0:	4b61      	ldr	r3, [pc, #388]	@ (8007648 <__ieee754_pow+0x298>)
 80074c2:	4598      	cmp	r8, r3
 80074c4:	d908      	bls.n	80074d8 <__ieee754_pow+0x128>
 80074c6:	f1b9 0f00 	cmp.w	r9, #0
 80074ca:	f2c0 8476 	blt.w	8007dba <__ieee754_pow+0xa0a>
 80074ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074d2:	e78a      	b.n	80073ea <__ieee754_pow+0x3a>
 80074d4:	2402      	movs	r4, #2
 80074d6:	e7e8      	b.n	80074aa <__ieee754_pow+0xfa>
 80074d8:	f1b9 0f00 	cmp.w	r9, #0
 80074dc:	f04f 0000 	mov.w	r0, #0
 80074e0:	f04f 0100 	mov.w	r1, #0
 80074e4:	da81      	bge.n	80073ea <__ieee754_pow+0x3a>
 80074e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80074ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80074ee:	e77c      	b.n	80073ea <__ieee754_pow+0x3a>
 80074f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80074f4:	d106      	bne.n	8007504 <__ieee754_pow+0x154>
 80074f6:	4632      	mov	r2, r6
 80074f8:	463b      	mov	r3, r7
 80074fa:	4630      	mov	r0, r6
 80074fc:	4639      	mov	r1, r7
 80074fe:	f7f9 f89b 	bl	8000638 <__aeabi_dmul>
 8007502:	e772      	b.n	80073ea <__ieee754_pow+0x3a>
 8007504:	4a51      	ldr	r2, [pc, #324]	@ (800764c <__ieee754_pow+0x29c>)
 8007506:	4591      	cmp	r9, r2
 8007508:	d109      	bne.n	800751e <__ieee754_pow+0x16e>
 800750a:	2d00      	cmp	r5, #0
 800750c:	db07      	blt.n	800751e <__ieee754_pow+0x16e>
 800750e:	ec47 6b10 	vmov	d0, r6, r7
 8007512:	b011      	add	sp, #68	@ 0x44
 8007514:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	f000 beea 	b.w	80082f0 <__ieee754_sqrt>
 800751c:	2400      	movs	r4, #0
 800751e:	ec47 6b10 	vmov	d0, r6, r7
 8007522:	9302      	str	r3, [sp, #8]
 8007524:	f000 fe20 	bl	8008168 <fabs>
 8007528:	9b02      	ldr	r3, [sp, #8]
 800752a:	ec51 0b10 	vmov	r0, r1, d0
 800752e:	bb53      	cbnz	r3, 8007586 <__ieee754_pow+0x1d6>
 8007530:	4b44      	ldr	r3, [pc, #272]	@ (8007644 <__ieee754_pow+0x294>)
 8007532:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007536:	429a      	cmp	r2, r3
 8007538:	d002      	beq.n	8007540 <__ieee754_pow+0x190>
 800753a:	f1b8 0f00 	cmp.w	r8, #0
 800753e:	d122      	bne.n	8007586 <__ieee754_pow+0x1d6>
 8007540:	f1b9 0f00 	cmp.w	r9, #0
 8007544:	da05      	bge.n	8007552 <__ieee754_pow+0x1a2>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	2000      	movs	r0, #0
 800754c:	493d      	ldr	r1, [pc, #244]	@ (8007644 <__ieee754_pow+0x294>)
 800754e:	f7f9 f99d 	bl	800088c <__aeabi_ddiv>
 8007552:	2d00      	cmp	r5, #0
 8007554:	f6bf af49 	bge.w	80073ea <__ieee754_pow+0x3a>
 8007558:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800755c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007560:	ea58 0804 	orrs.w	r8, r8, r4
 8007564:	d108      	bne.n	8007578 <__ieee754_pow+0x1c8>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4610      	mov	r0, r2
 800756c:	4619      	mov	r1, r3
 800756e:	f7f8 feab 	bl	80002c8 <__aeabi_dsub>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	e794      	b.n	80074a2 <__ieee754_pow+0xf2>
 8007578:	2c01      	cmp	r4, #1
 800757a:	f47f af36 	bne.w	80073ea <__ieee754_pow+0x3a>
 800757e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007582:	4619      	mov	r1, r3
 8007584:	e731      	b.n	80073ea <__ieee754_pow+0x3a>
 8007586:	0feb      	lsrs	r3, r5, #31
 8007588:	3b01      	subs	r3, #1
 800758a:	ea53 0204 	orrs.w	r2, r3, r4
 800758e:	d102      	bne.n	8007596 <__ieee754_pow+0x1e6>
 8007590:	4632      	mov	r2, r6
 8007592:	463b      	mov	r3, r7
 8007594:	e7e9      	b.n	800756a <__ieee754_pow+0x1ba>
 8007596:	3c01      	subs	r4, #1
 8007598:	431c      	orrs	r4, r3
 800759a:	d016      	beq.n	80075ca <__ieee754_pow+0x21a>
 800759c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007628 <__ieee754_pow+0x278>
 80075a0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80075a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075a8:	f240 8112 	bls.w	80077d0 <__ieee754_pow+0x420>
 80075ac:	4b28      	ldr	r3, [pc, #160]	@ (8007650 <__ieee754_pow+0x2a0>)
 80075ae:	459a      	cmp	sl, r3
 80075b0:	4b25      	ldr	r3, [pc, #148]	@ (8007648 <__ieee754_pow+0x298>)
 80075b2:	d916      	bls.n	80075e2 <__ieee754_pow+0x232>
 80075b4:	4598      	cmp	r8, r3
 80075b6:	d80b      	bhi.n	80075d0 <__ieee754_pow+0x220>
 80075b8:	f1b9 0f00 	cmp.w	r9, #0
 80075bc:	da0b      	bge.n	80075d6 <__ieee754_pow+0x226>
 80075be:	2000      	movs	r0, #0
 80075c0:	b011      	add	sp, #68	@ 0x44
 80075c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c6:	f000 be8b 	b.w	80082e0 <__math_oflow>
 80075ca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007630 <__ieee754_pow+0x280>
 80075ce:	e7e7      	b.n	80075a0 <__ieee754_pow+0x1f0>
 80075d0:	f1b9 0f00 	cmp.w	r9, #0
 80075d4:	dcf3      	bgt.n	80075be <__ieee754_pow+0x20e>
 80075d6:	2000      	movs	r0, #0
 80075d8:	b011      	add	sp, #68	@ 0x44
 80075da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075de:	f000 be77 	b.w	80082d0 <__math_uflow>
 80075e2:	4598      	cmp	r8, r3
 80075e4:	d20c      	bcs.n	8007600 <__ieee754_pow+0x250>
 80075e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ea:	2200      	movs	r2, #0
 80075ec:	2300      	movs	r3, #0
 80075ee:	f7f9 fa95 	bl	8000b1c <__aeabi_dcmplt>
 80075f2:	3800      	subs	r0, #0
 80075f4:	bf18      	it	ne
 80075f6:	2001      	movne	r0, #1
 80075f8:	f1b9 0f00 	cmp.w	r9, #0
 80075fc:	daec      	bge.n	80075d8 <__ieee754_pow+0x228>
 80075fe:	e7df      	b.n	80075c0 <__ieee754_pow+0x210>
 8007600:	4b10      	ldr	r3, [pc, #64]	@ (8007644 <__ieee754_pow+0x294>)
 8007602:	4598      	cmp	r8, r3
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	d924      	bls.n	8007654 <__ieee754_pow+0x2a4>
 800760a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760e:	2300      	movs	r3, #0
 8007610:	f7f9 fa84 	bl	8000b1c <__aeabi_dcmplt>
 8007614:	3800      	subs	r0, #0
 8007616:	bf18      	it	ne
 8007618:	2001      	movne	r0, #1
 800761a:	f1b9 0f00 	cmp.w	r9, #0
 800761e:	dccf      	bgt.n	80075c0 <__ieee754_pow+0x210>
 8007620:	e7da      	b.n	80075d8 <__ieee754_pow+0x228>
 8007622:	bf00      	nop
 8007624:	f3af 8000 	nop.w
 8007628:	00000000 	.word	0x00000000
 800762c:	3ff00000 	.word	0x3ff00000
 8007630:	00000000 	.word	0x00000000
 8007634:	bff00000 	.word	0xbff00000
 8007638:	fff00000 	.word	0xfff00000
 800763c:	7ff00000 	.word	0x7ff00000
 8007640:	433fffff 	.word	0x433fffff
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	3fefffff 	.word	0x3fefffff
 800764c:	3fe00000 	.word	0x3fe00000
 8007650:	43f00000 	.word	0x43f00000
 8007654:	4b5a      	ldr	r3, [pc, #360]	@ (80077c0 <__ieee754_pow+0x410>)
 8007656:	f7f8 fe37 	bl	80002c8 <__aeabi_dsub>
 800765a:	a351      	add	r3, pc, #324	@ (adr r3, 80077a0 <__ieee754_pow+0x3f0>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	4604      	mov	r4, r0
 8007662:	460d      	mov	r5, r1
 8007664:	f7f8 ffe8 	bl	8000638 <__aeabi_dmul>
 8007668:	a34f      	add	r3, pc, #316	@ (adr r3, 80077a8 <__ieee754_pow+0x3f8>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	4606      	mov	r6, r0
 8007670:	460f      	mov	r7, r1
 8007672:	4620      	mov	r0, r4
 8007674:	4629      	mov	r1, r5
 8007676:	f7f8 ffdf 	bl	8000638 <__aeabi_dmul>
 800767a:	4b52      	ldr	r3, [pc, #328]	@ (80077c4 <__ieee754_pow+0x414>)
 800767c:	4682      	mov	sl, r0
 800767e:	468b      	mov	fp, r1
 8007680:	2200      	movs	r2, #0
 8007682:	4620      	mov	r0, r4
 8007684:	4629      	mov	r1, r5
 8007686:	f7f8 ffd7 	bl	8000638 <__aeabi_dmul>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	a148      	add	r1, pc, #288	@ (adr r1, 80077b0 <__ieee754_pow+0x400>)
 8007690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007694:	f7f8 fe18 	bl	80002c8 <__aeabi_dsub>
 8007698:	4622      	mov	r2, r4
 800769a:	462b      	mov	r3, r5
 800769c:	f7f8 ffcc 	bl	8000638 <__aeabi_dmul>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	2000      	movs	r0, #0
 80076a6:	4948      	ldr	r1, [pc, #288]	@ (80077c8 <__ieee754_pow+0x418>)
 80076a8:	f7f8 fe0e 	bl	80002c8 <__aeabi_dsub>
 80076ac:	4622      	mov	r2, r4
 80076ae:	4680      	mov	r8, r0
 80076b0:	4689      	mov	r9, r1
 80076b2:	462b      	mov	r3, r5
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	f7f8 ffbe 	bl	8000638 <__aeabi_dmul>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4640      	mov	r0, r8
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f8 ffb8 	bl	8000638 <__aeabi_dmul>
 80076c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80077b8 <__ieee754_pow+0x408>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f7f8 ffb3 	bl	8000638 <__aeabi_dmul>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	4650      	mov	r0, sl
 80076d8:	4659      	mov	r1, fp
 80076da:	f7f8 fdf5 	bl	80002c8 <__aeabi_dsub>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4680      	mov	r8, r0
 80076e4:	4689      	mov	r9, r1
 80076e6:	4630      	mov	r0, r6
 80076e8:	4639      	mov	r1, r7
 80076ea:	f7f8 fdef 	bl	80002cc <__adddf3>
 80076ee:	2400      	movs	r4, #0
 80076f0:	4632      	mov	r2, r6
 80076f2:	463b      	mov	r3, r7
 80076f4:	4620      	mov	r0, r4
 80076f6:	460d      	mov	r5, r1
 80076f8:	f7f8 fde6 	bl	80002c8 <__aeabi_dsub>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4640      	mov	r0, r8
 8007702:	4649      	mov	r1, r9
 8007704:	f7f8 fde0 	bl	80002c8 <__aeabi_dsub>
 8007708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800770c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007710:	2300      	movs	r3, #0
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007718:	4606      	mov	r6, r0
 800771a:	460f      	mov	r7, r1
 800771c:	4652      	mov	r2, sl
 800771e:	465b      	mov	r3, fp
 8007720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007724:	f7f8 fdd0 	bl	80002c8 <__aeabi_dsub>
 8007728:	4622      	mov	r2, r4
 800772a:	462b      	mov	r3, r5
 800772c:	f7f8 ff84 	bl	8000638 <__aeabi_dmul>
 8007730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007734:	4680      	mov	r8, r0
 8007736:	4689      	mov	r9, r1
 8007738:	4630      	mov	r0, r6
 800773a:	4639      	mov	r1, r7
 800773c:	f7f8 ff7c 	bl	8000638 <__aeabi_dmul>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4640      	mov	r0, r8
 8007746:	4649      	mov	r1, r9
 8007748:	f7f8 fdc0 	bl	80002cc <__adddf3>
 800774c:	4652      	mov	r2, sl
 800774e:	465b      	mov	r3, fp
 8007750:	4606      	mov	r6, r0
 8007752:	460f      	mov	r7, r1
 8007754:	4620      	mov	r0, r4
 8007756:	4629      	mov	r1, r5
 8007758:	f7f8 ff6e 	bl	8000638 <__aeabi_dmul>
 800775c:	460b      	mov	r3, r1
 800775e:	4602      	mov	r2, r0
 8007760:	4680      	mov	r8, r0
 8007762:	4689      	mov	r9, r1
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	f7f8 fdb0 	bl	80002cc <__adddf3>
 800776c:	4b17      	ldr	r3, [pc, #92]	@ (80077cc <__ieee754_pow+0x41c>)
 800776e:	4299      	cmp	r1, r3
 8007770:	4604      	mov	r4, r0
 8007772:	460d      	mov	r5, r1
 8007774:	468a      	mov	sl, r1
 8007776:	468b      	mov	fp, r1
 8007778:	f340 82ef 	ble.w	8007d5a <__ieee754_pow+0x9aa>
 800777c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007780:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007784:	4303      	orrs	r3, r0
 8007786:	f000 81e8 	beq.w	8007b5a <__ieee754_pow+0x7aa>
 800778a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800778e:	2200      	movs	r2, #0
 8007790:	2300      	movs	r3, #0
 8007792:	f7f9 f9c3 	bl	8000b1c <__aeabi_dcmplt>
 8007796:	3800      	subs	r0, #0
 8007798:	bf18      	it	ne
 800779a:	2001      	movne	r0, #1
 800779c:	e710      	b.n	80075c0 <__ieee754_pow+0x210>
 800779e:	bf00      	nop
 80077a0:	60000000 	.word	0x60000000
 80077a4:	3ff71547 	.word	0x3ff71547
 80077a8:	f85ddf44 	.word	0xf85ddf44
 80077ac:	3e54ae0b 	.word	0x3e54ae0b
 80077b0:	55555555 	.word	0x55555555
 80077b4:	3fd55555 	.word	0x3fd55555
 80077b8:	652b82fe 	.word	0x652b82fe
 80077bc:	3ff71547 	.word	0x3ff71547
 80077c0:	3ff00000 	.word	0x3ff00000
 80077c4:	3fd00000 	.word	0x3fd00000
 80077c8:	3fe00000 	.word	0x3fe00000
 80077cc:	408fffff 	.word	0x408fffff
 80077d0:	4bd5      	ldr	r3, [pc, #852]	@ (8007b28 <__ieee754_pow+0x778>)
 80077d2:	402b      	ands	r3, r5
 80077d4:	2200      	movs	r2, #0
 80077d6:	b92b      	cbnz	r3, 80077e4 <__ieee754_pow+0x434>
 80077d8:	4bd4      	ldr	r3, [pc, #848]	@ (8007b2c <__ieee754_pow+0x77c>)
 80077da:	f7f8 ff2d 	bl	8000638 <__aeabi_dmul>
 80077de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80077e2:	468b      	mov	fp, r1
 80077e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80077e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80077ec:	4413      	add	r3, r2
 80077ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f0:	4bcf      	ldr	r3, [pc, #828]	@ (8007b30 <__ieee754_pow+0x780>)
 80077f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80077f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80077fa:	459b      	cmp	fp, r3
 80077fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007800:	dd08      	ble.n	8007814 <__ieee754_pow+0x464>
 8007802:	4bcc      	ldr	r3, [pc, #816]	@ (8007b34 <__ieee754_pow+0x784>)
 8007804:	459b      	cmp	fp, r3
 8007806:	f340 81a5 	ble.w	8007b54 <__ieee754_pow+0x7a4>
 800780a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800780c:	3301      	adds	r3, #1
 800780e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007810:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007814:	f04f 0a00 	mov.w	sl, #0
 8007818:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800781c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800781e:	4bc6      	ldr	r3, [pc, #792]	@ (8007b38 <__ieee754_pow+0x788>)
 8007820:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007824:	ed93 7b00 	vldr	d7, [r3]
 8007828:	4629      	mov	r1, r5
 800782a:	ec53 2b17 	vmov	r2, r3, d7
 800782e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007832:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007836:	f7f8 fd47 	bl	80002c8 <__aeabi_dsub>
 800783a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800783e:	4606      	mov	r6, r0
 8007840:	460f      	mov	r7, r1
 8007842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007846:	f7f8 fd41 	bl	80002cc <__adddf3>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	2000      	movs	r0, #0
 8007850:	49ba      	ldr	r1, [pc, #744]	@ (8007b3c <__ieee754_pow+0x78c>)
 8007852:	f7f9 f81b 	bl	800088c <__aeabi_ddiv>
 8007856:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4630      	mov	r0, r6
 8007860:	4639      	mov	r1, r7
 8007862:	f7f8 fee9 	bl	8000638 <__aeabi_dmul>
 8007866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800786a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800786e:	106d      	asrs	r5, r5, #1
 8007870:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007874:	f04f 0b00 	mov.w	fp, #0
 8007878:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800787c:	4661      	mov	r1, ip
 800787e:	2200      	movs	r2, #0
 8007880:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007884:	4658      	mov	r0, fp
 8007886:	46e1      	mov	r9, ip
 8007888:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800788c:	4614      	mov	r4, r2
 800788e:	461d      	mov	r5, r3
 8007890:	f7f8 fed2 	bl	8000638 <__aeabi_dmul>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f8 fd14 	bl	80002c8 <__aeabi_dsub>
 80078a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078a4:	4606      	mov	r6, r0
 80078a6:	460f      	mov	r7, r1
 80078a8:	4620      	mov	r0, r4
 80078aa:	4629      	mov	r1, r5
 80078ac:	f7f8 fd0c 	bl	80002c8 <__aeabi_dsub>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078b8:	f7f8 fd06 	bl	80002c8 <__aeabi_dsub>
 80078bc:	465a      	mov	r2, fp
 80078be:	464b      	mov	r3, r9
 80078c0:	f7f8 feba 	bl	8000638 <__aeabi_dmul>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4630      	mov	r0, r6
 80078ca:	4639      	mov	r1, r7
 80078cc:	f7f8 fcfc 	bl	80002c8 <__aeabi_dsub>
 80078d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80078d4:	f7f8 feb0 	bl	8000638 <__aeabi_dmul>
 80078d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80078e0:	4610      	mov	r0, r2
 80078e2:	4619      	mov	r1, r3
 80078e4:	f7f8 fea8 	bl	8000638 <__aeabi_dmul>
 80078e8:	a37d      	add	r3, pc, #500	@ (adr r3, 8007ae0 <__ieee754_pow+0x730>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	4604      	mov	r4, r0
 80078f0:	460d      	mov	r5, r1
 80078f2:	f7f8 fea1 	bl	8000638 <__aeabi_dmul>
 80078f6:	a37c      	add	r3, pc, #496	@ (adr r3, 8007ae8 <__ieee754_pow+0x738>)
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f7f8 fce6 	bl	80002cc <__adddf3>
 8007900:	4622      	mov	r2, r4
 8007902:	462b      	mov	r3, r5
 8007904:	f7f8 fe98 	bl	8000638 <__aeabi_dmul>
 8007908:	a379      	add	r3, pc, #484	@ (adr r3, 8007af0 <__ieee754_pow+0x740>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f8 fcdd 	bl	80002cc <__adddf3>
 8007912:	4622      	mov	r2, r4
 8007914:	462b      	mov	r3, r5
 8007916:	f7f8 fe8f 	bl	8000638 <__aeabi_dmul>
 800791a:	a377      	add	r3, pc, #476	@ (adr r3, 8007af8 <__ieee754_pow+0x748>)
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f7f8 fcd4 	bl	80002cc <__adddf3>
 8007924:	4622      	mov	r2, r4
 8007926:	462b      	mov	r3, r5
 8007928:	f7f8 fe86 	bl	8000638 <__aeabi_dmul>
 800792c:	a374      	add	r3, pc, #464	@ (adr r3, 8007b00 <__ieee754_pow+0x750>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f8 fccb 	bl	80002cc <__adddf3>
 8007936:	4622      	mov	r2, r4
 8007938:	462b      	mov	r3, r5
 800793a:	f7f8 fe7d 	bl	8000638 <__aeabi_dmul>
 800793e:	a372      	add	r3, pc, #456	@ (adr r3, 8007b08 <__ieee754_pow+0x758>)
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f7f8 fcc2 	bl	80002cc <__adddf3>
 8007948:	4622      	mov	r2, r4
 800794a:	4606      	mov	r6, r0
 800794c:	460f      	mov	r7, r1
 800794e:	462b      	mov	r3, r5
 8007950:	4620      	mov	r0, r4
 8007952:	4629      	mov	r1, r5
 8007954:	f7f8 fe70 	bl	8000638 <__aeabi_dmul>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4630      	mov	r0, r6
 800795e:	4639      	mov	r1, r7
 8007960:	f7f8 fe6a 	bl	8000638 <__aeabi_dmul>
 8007964:	465a      	mov	r2, fp
 8007966:	4604      	mov	r4, r0
 8007968:	460d      	mov	r5, r1
 800796a:	464b      	mov	r3, r9
 800796c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007970:	f7f8 fcac 	bl	80002cc <__adddf3>
 8007974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007978:	f7f8 fe5e 	bl	8000638 <__aeabi_dmul>
 800797c:	4622      	mov	r2, r4
 800797e:	462b      	mov	r3, r5
 8007980:	f7f8 fca4 	bl	80002cc <__adddf3>
 8007984:	465a      	mov	r2, fp
 8007986:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800798a:	464b      	mov	r3, r9
 800798c:	4658      	mov	r0, fp
 800798e:	4649      	mov	r1, r9
 8007990:	f7f8 fe52 	bl	8000638 <__aeabi_dmul>
 8007994:	4b6a      	ldr	r3, [pc, #424]	@ (8007b40 <__ieee754_pow+0x790>)
 8007996:	2200      	movs	r2, #0
 8007998:	4606      	mov	r6, r0
 800799a:	460f      	mov	r7, r1
 800799c:	f7f8 fc96 	bl	80002cc <__adddf3>
 80079a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079a4:	f7f8 fc92 	bl	80002cc <__adddf3>
 80079a8:	46d8      	mov	r8, fp
 80079aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80079ae:	460d      	mov	r5, r1
 80079b0:	465a      	mov	r2, fp
 80079b2:	460b      	mov	r3, r1
 80079b4:	4640      	mov	r0, r8
 80079b6:	4649      	mov	r1, r9
 80079b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80079bc:	f7f8 fe3c 	bl	8000638 <__aeabi_dmul>
 80079c0:	465c      	mov	r4, fp
 80079c2:	4680      	mov	r8, r0
 80079c4:	4689      	mov	r9, r1
 80079c6:	4b5e      	ldr	r3, [pc, #376]	@ (8007b40 <__ieee754_pow+0x790>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	4620      	mov	r0, r4
 80079cc:	4629      	mov	r1, r5
 80079ce:	f7f8 fc7b 	bl	80002c8 <__aeabi_dsub>
 80079d2:	4632      	mov	r2, r6
 80079d4:	463b      	mov	r3, r7
 80079d6:	f7f8 fc77 	bl	80002c8 <__aeabi_dsub>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079e2:	f7f8 fc71 	bl	80002c8 <__aeabi_dsub>
 80079e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079ea:	f7f8 fe25 	bl	8000638 <__aeabi_dmul>
 80079ee:	4622      	mov	r2, r4
 80079f0:	4606      	mov	r6, r0
 80079f2:	460f      	mov	r7, r1
 80079f4:	462b      	mov	r3, r5
 80079f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079fa:	f7f8 fe1d 	bl	8000638 <__aeabi_dmul>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f8 fc61 	bl	80002cc <__adddf3>
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4640      	mov	r0, r8
 8007a14:	4649      	mov	r1, r9
 8007a16:	f7f8 fc59 	bl	80002cc <__adddf3>
 8007a1a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007a1e:	a33c      	add	r3, pc, #240	@ (adr r3, 8007b10 <__ieee754_pow+0x760>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	4658      	mov	r0, fp
 8007a26:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007a2a:	460d      	mov	r5, r1
 8007a2c:	f7f8 fe04 	bl	8000638 <__aeabi_dmul>
 8007a30:	465c      	mov	r4, fp
 8007a32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a36:	4642      	mov	r2, r8
 8007a38:	464b      	mov	r3, r9
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f7f8 fc43 	bl	80002c8 <__aeabi_dsub>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4630      	mov	r0, r6
 8007a48:	4639      	mov	r1, r7
 8007a4a:	f7f8 fc3d 	bl	80002c8 <__aeabi_dsub>
 8007a4e:	a332      	add	r3, pc, #200	@ (adr r3, 8007b18 <__ieee754_pow+0x768>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f7f8 fdf0 	bl	8000638 <__aeabi_dmul>
 8007a58:	a331      	add	r3, pc, #196	@ (adr r3, 8007b20 <__ieee754_pow+0x770>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460f      	mov	r7, r1
 8007a62:	4620      	mov	r0, r4
 8007a64:	4629      	mov	r1, r5
 8007a66:	f7f8 fde7 	bl	8000638 <__aeabi_dmul>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4630      	mov	r0, r6
 8007a70:	4639      	mov	r1, r7
 8007a72:	f7f8 fc2b 	bl	80002cc <__adddf3>
 8007a76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a78:	4b32      	ldr	r3, [pc, #200]	@ (8007b44 <__ieee754_pow+0x794>)
 8007a7a:	4413      	add	r3, r2
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	f7f8 fc24 	bl	80002cc <__adddf3>
 8007a84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a8a:	f7f8 fd6b 	bl	8000564 <__aeabi_i2d>
 8007a8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a90:	4b2d      	ldr	r3, [pc, #180]	@ (8007b48 <__ieee754_pow+0x798>)
 8007a92:	4413      	add	r3, r2
 8007a94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a98:	4606      	mov	r6, r0
 8007a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a9e:	460f      	mov	r7, r1
 8007aa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aa4:	f7f8 fc12 	bl	80002cc <__adddf3>
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	f7f8 fc0e 	bl	80002cc <__adddf3>
 8007ab0:	4632      	mov	r2, r6
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	f7f8 fc0a 	bl	80002cc <__adddf3>
 8007ab8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007abc:	4632      	mov	r2, r6
 8007abe:	463b      	mov	r3, r7
 8007ac0:	4658      	mov	r0, fp
 8007ac2:	460d      	mov	r5, r1
 8007ac4:	f7f8 fc00 	bl	80002c8 <__aeabi_dsub>
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	f7f8 fbfc 	bl	80002c8 <__aeabi_dsub>
 8007ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ad4:	f7f8 fbf8 	bl	80002c8 <__aeabi_dsub>
 8007ad8:	465c      	mov	r4, fp
 8007ada:	4602      	mov	r2, r0
 8007adc:	e036      	b.n	8007b4c <__ieee754_pow+0x79c>
 8007ade:	bf00      	nop
 8007ae0:	4a454eef 	.word	0x4a454eef
 8007ae4:	3fca7e28 	.word	0x3fca7e28
 8007ae8:	93c9db65 	.word	0x93c9db65
 8007aec:	3fcd864a 	.word	0x3fcd864a
 8007af0:	a91d4101 	.word	0xa91d4101
 8007af4:	3fd17460 	.word	0x3fd17460
 8007af8:	518f264d 	.word	0x518f264d
 8007afc:	3fd55555 	.word	0x3fd55555
 8007b00:	db6fabff 	.word	0xdb6fabff
 8007b04:	3fdb6db6 	.word	0x3fdb6db6
 8007b08:	33333303 	.word	0x33333303
 8007b0c:	3fe33333 	.word	0x3fe33333
 8007b10:	e0000000 	.word	0xe0000000
 8007b14:	3feec709 	.word	0x3feec709
 8007b18:	dc3a03fd 	.word	0xdc3a03fd
 8007b1c:	3feec709 	.word	0x3feec709
 8007b20:	145b01f5 	.word	0x145b01f5
 8007b24:	be3e2fe0 	.word	0xbe3e2fe0
 8007b28:	7ff00000 	.word	0x7ff00000
 8007b2c:	43400000 	.word	0x43400000
 8007b30:	0003988e 	.word	0x0003988e
 8007b34:	000bb679 	.word	0x000bb679
 8007b38:	080086f8 	.word	0x080086f8
 8007b3c:	3ff00000 	.word	0x3ff00000
 8007b40:	40080000 	.word	0x40080000
 8007b44:	080086d8 	.word	0x080086d8
 8007b48:	080086e8 	.word	0x080086e8
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b52:	e5d7      	b.n	8007704 <__ieee754_pow+0x354>
 8007b54:	f04f 0a01 	mov.w	sl, #1
 8007b58:	e65e      	b.n	8007818 <__ieee754_pow+0x468>
 8007b5a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8007e2c <__ieee754_pow+0xa7c>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f8 fbb2 	bl	80002cc <__adddf3>
 8007b68:	4642      	mov	r2, r8
 8007b6a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b6e:	464b      	mov	r3, r9
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 fba8 	bl	80002c8 <__aeabi_dsub>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b80:	f7f8 ffea 	bl	8000b58 <__aeabi_dcmpgt>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	f47f ae00 	bne.w	800778a <__ieee754_pow+0x3da>
 8007b8a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007b8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007b92:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007b96:	fa43 fa0a 	asr.w	sl, r3, sl
 8007b9a:	44da      	add	sl, fp
 8007b9c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007ba0:	489d      	ldr	r0, [pc, #628]	@ (8007e18 <__ieee754_pow+0xa68>)
 8007ba2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007ba6:	4108      	asrs	r0, r1
 8007ba8:	ea00 030a 	and.w	r3, r0, sl
 8007bac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007bb0:	f1c1 0114 	rsb	r1, r1, #20
 8007bb4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007bb8:	fa4a fa01 	asr.w	sl, sl, r1
 8007bbc:	f1bb 0f00 	cmp.w	fp, #0
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	bfb8      	it	lt
 8007bca:	f1ca 0a00 	rsblt	sl, sl, #0
 8007bce:	f7f8 fb7b 	bl	80002c8 <__aeabi_dsub>
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	4689      	mov	r9, r1
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	463b      	mov	r3, r7
 8007bda:	4640      	mov	r0, r8
 8007bdc:	4649      	mov	r1, r9
 8007bde:	f7f8 fb75 	bl	80002cc <__adddf3>
 8007be2:	2400      	movs	r4, #0
 8007be4:	a37c      	add	r3, pc, #496	@ (adr r3, 8007dd8 <__ieee754_pow+0xa28>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	4620      	mov	r0, r4
 8007bec:	460d      	mov	r5, r1
 8007bee:	f7f8 fd23 	bl	8000638 <__aeabi_dmul>
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	e9cd 0100 	strd	r0, r1, [sp]
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	f7f8 fb63 	bl	80002c8 <__aeabi_dsub>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4630      	mov	r0, r6
 8007c08:	4639      	mov	r1, r7
 8007c0a:	f7f8 fb5d 	bl	80002c8 <__aeabi_dsub>
 8007c0e:	a374      	add	r3, pc, #464	@ (adr r3, 8007de0 <__ieee754_pow+0xa30>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f7f8 fd10 	bl	8000638 <__aeabi_dmul>
 8007c18:	a373      	add	r3, pc, #460	@ (adr r3, 8007de8 <__ieee754_pow+0xa38>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	4680      	mov	r8, r0
 8007c20:	4689      	mov	r9, r1
 8007c22:	4620      	mov	r0, r4
 8007c24:	4629      	mov	r1, r5
 8007c26:	f7f8 fd07 	bl	8000638 <__aeabi_dmul>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4640      	mov	r0, r8
 8007c30:	4649      	mov	r1, r9
 8007c32:	f7f8 fb4b 	bl	80002cc <__adddf3>
 8007c36:	4604      	mov	r4, r0
 8007c38:	460d      	mov	r5, r1
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c42:	f7f8 fb43 	bl	80002cc <__adddf3>
 8007c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	4689      	mov	r9, r1
 8007c4e:	f7f8 fb3b 	bl	80002c8 <__aeabi_dsub>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 fb35 	bl	80002c8 <__aeabi_dsub>
 8007c5e:	4642      	mov	r2, r8
 8007c60:	4606      	mov	r6, r0
 8007c62:	460f      	mov	r7, r1
 8007c64:	464b      	mov	r3, r9
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f7f8 fce5 	bl	8000638 <__aeabi_dmul>
 8007c6e:	a360      	add	r3, pc, #384	@ (adr r3, 8007df0 <__ieee754_pow+0xa40>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
 8007c78:	f7f8 fcde 	bl	8000638 <__aeabi_dmul>
 8007c7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007df8 <__ieee754_pow+0xa48>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fb21 	bl	80002c8 <__aeabi_dsub>
 8007c86:	4622      	mov	r2, r4
 8007c88:	462b      	mov	r3, r5
 8007c8a:	f7f8 fcd5 	bl	8000638 <__aeabi_dmul>
 8007c8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007e00 <__ieee754_pow+0xa50>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f7f8 fb1a 	bl	80002cc <__adddf3>
 8007c98:	4622      	mov	r2, r4
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	f7f8 fccc 	bl	8000638 <__aeabi_dmul>
 8007ca0:	a359      	add	r3, pc, #356	@ (adr r3, 8007e08 <__ieee754_pow+0xa58>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fb0f 	bl	80002c8 <__aeabi_dsub>
 8007caa:	4622      	mov	r2, r4
 8007cac:	462b      	mov	r3, r5
 8007cae:	f7f8 fcc3 	bl	8000638 <__aeabi_dmul>
 8007cb2:	a357      	add	r3, pc, #348	@ (adr r3, 8007e10 <__ieee754_pow+0xa60>)
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	f7f8 fb08 	bl	80002cc <__adddf3>
 8007cbc:	4622      	mov	r2, r4
 8007cbe:	462b      	mov	r3, r5
 8007cc0:	f7f8 fcba 	bl	8000638 <__aeabi_dmul>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4640      	mov	r0, r8
 8007cca:	4649      	mov	r1, r9
 8007ccc:	f7f8 fafc 	bl	80002c8 <__aeabi_dsub>
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4640      	mov	r0, r8
 8007cda:	4649      	mov	r1, r9
 8007cdc:	f7f8 fcac 	bl	8000638 <__aeabi_dmul>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ce6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007cea:	4620      	mov	r0, r4
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f8 faeb 	bl	80002c8 <__aeabi_dsub>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cfa:	f7f8 fdc7 	bl	800088c <__aeabi_ddiv>
 8007cfe:	4632      	mov	r2, r6
 8007d00:	4604      	mov	r4, r0
 8007d02:	460d      	mov	r5, r1
 8007d04:	463b      	mov	r3, r7
 8007d06:	4640      	mov	r0, r8
 8007d08:	4649      	mov	r1, r9
 8007d0a:	f7f8 fc95 	bl	8000638 <__aeabi_dmul>
 8007d0e:	4632      	mov	r2, r6
 8007d10:	463b      	mov	r3, r7
 8007d12:	f7f8 fadb 	bl	80002cc <__adddf3>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	f7f8 fad3 	bl	80002c8 <__aeabi_dsub>
 8007d22:	4642      	mov	r2, r8
 8007d24:	464b      	mov	r3, r9
 8007d26:	f7f8 facf 	bl	80002c8 <__aeabi_dsub>
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	493b      	ldr	r1, [pc, #236]	@ (8007e1c <__ieee754_pow+0xa6c>)
 8007d30:	2000      	movs	r0, #0
 8007d32:	f7f8 fac9 	bl	80002c8 <__aeabi_dsub>
 8007d36:	ec41 0b10 	vmov	d0, r0, r1
 8007d3a:	ee10 3a90 	vmov	r3, s1
 8007d3e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d46:	da30      	bge.n	8007daa <__ieee754_pow+0x9fa>
 8007d48:	4650      	mov	r0, sl
 8007d4a:	f000 fa15 	bl	8008178 <scalbn>
 8007d4e:	ec51 0b10 	vmov	r0, r1, d0
 8007d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d56:	f7ff bbd2 	b.w	80074fe <__ieee754_pow+0x14e>
 8007d5a:	4c31      	ldr	r4, [pc, #196]	@ (8007e20 <__ieee754_pow+0xa70>)
 8007d5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	d91a      	bls.n	8007d9a <__ieee754_pow+0x9ea>
 8007d64:	4b2f      	ldr	r3, [pc, #188]	@ (8007e24 <__ieee754_pow+0xa74>)
 8007d66:	440b      	add	r3, r1
 8007d68:	4303      	orrs	r3, r0
 8007d6a:	d009      	beq.n	8007d80 <__ieee754_pow+0x9d0>
 8007d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d70:	2200      	movs	r2, #0
 8007d72:	2300      	movs	r3, #0
 8007d74:	f7f8 fed2 	bl	8000b1c <__aeabi_dcmplt>
 8007d78:	3800      	subs	r0, #0
 8007d7a:	bf18      	it	ne
 8007d7c:	2001      	movne	r0, #1
 8007d7e:	e42b      	b.n	80075d8 <__ieee754_pow+0x228>
 8007d80:	4642      	mov	r2, r8
 8007d82:	464b      	mov	r3, r9
 8007d84:	f7f8 faa0 	bl	80002c8 <__aeabi_dsub>
 8007d88:	4632      	mov	r2, r6
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	f7f8 feda 	bl	8000b44 <__aeabi_dcmpge>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d1eb      	bne.n	8007d6c <__ieee754_pow+0x9bc>
 8007d94:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8007e34 <__ieee754_pow+0xa84>
 8007d98:	e6f7      	b.n	8007b8a <__ieee754_pow+0x7da>
 8007d9a:	469a      	mov	sl, r3
 8007d9c:	4b22      	ldr	r3, [pc, #136]	@ (8007e28 <__ieee754_pow+0xa78>)
 8007d9e:	459a      	cmp	sl, r3
 8007da0:	f63f aef3 	bhi.w	8007b8a <__ieee754_pow+0x7da>
 8007da4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007da8:	e715      	b.n	8007bd6 <__ieee754_pow+0x826>
 8007daa:	ec51 0b10 	vmov	r0, r1, d0
 8007dae:	4619      	mov	r1, r3
 8007db0:	e7cf      	b.n	8007d52 <__ieee754_pow+0x9a2>
 8007db2:	491a      	ldr	r1, [pc, #104]	@ (8007e1c <__ieee754_pow+0xa6c>)
 8007db4:	2000      	movs	r0, #0
 8007db6:	f7ff bb18 	b.w	80073ea <__ieee754_pow+0x3a>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	f7ff bb14 	b.w	80073ea <__ieee754_pow+0x3a>
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	f7ff bb10 	b.w	80073ea <__ieee754_pow+0x3a>
 8007dca:	460c      	mov	r4, r1
 8007dcc:	f7ff bb5e 	b.w	800748c <__ieee754_pow+0xdc>
 8007dd0:	2400      	movs	r4, #0
 8007dd2:	f7ff bb49 	b.w	8007468 <__ieee754_pow+0xb8>
 8007dd6:	bf00      	nop
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	3fe62e43 	.word	0x3fe62e43
 8007de0:	fefa39ef 	.word	0xfefa39ef
 8007de4:	3fe62e42 	.word	0x3fe62e42
 8007de8:	0ca86c39 	.word	0x0ca86c39
 8007dec:	be205c61 	.word	0xbe205c61
 8007df0:	72bea4d0 	.word	0x72bea4d0
 8007df4:	3e663769 	.word	0x3e663769
 8007df8:	c5d26bf1 	.word	0xc5d26bf1
 8007dfc:	3ebbbd41 	.word	0x3ebbbd41
 8007e00:	af25de2c 	.word	0xaf25de2c
 8007e04:	3f11566a 	.word	0x3f11566a
 8007e08:	16bebd93 	.word	0x16bebd93
 8007e0c:	3f66c16c 	.word	0x3f66c16c
 8007e10:	5555553e 	.word	0x5555553e
 8007e14:	3fc55555 	.word	0x3fc55555
 8007e18:	fff00000 	.word	0xfff00000
 8007e1c:	3ff00000 	.word	0x3ff00000
 8007e20:	4090cbff 	.word	0x4090cbff
 8007e24:	3f6f3400 	.word	0x3f6f3400
 8007e28:	3fe00000 	.word	0x3fe00000
 8007e2c:	652b82fe 	.word	0x652b82fe
 8007e30:	3c971547 	.word	0x3c971547
 8007e34:	4090cc00 	.word	0x4090cc00

08007e38 <atan>:
 8007e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	ec55 4b10 	vmov	r4, r5, d0
 8007e40:	4bbf      	ldr	r3, [pc, #764]	@ (8008140 <atan+0x308>)
 8007e42:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007e46:	429e      	cmp	r6, r3
 8007e48:	46ab      	mov	fp, r5
 8007e4a:	d918      	bls.n	8007e7e <atan+0x46>
 8007e4c:	4bbd      	ldr	r3, [pc, #756]	@ (8008144 <atan+0x30c>)
 8007e4e:	429e      	cmp	r6, r3
 8007e50:	d801      	bhi.n	8007e56 <atan+0x1e>
 8007e52:	d109      	bne.n	8007e68 <atan+0x30>
 8007e54:	b144      	cbz	r4, 8007e68 <atan+0x30>
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f7f8 fa35 	bl	80002cc <__adddf3>
 8007e62:	4604      	mov	r4, r0
 8007e64:	460d      	mov	r5, r1
 8007e66:	e006      	b.n	8007e76 <atan+0x3e>
 8007e68:	f1bb 0f00 	cmp.w	fp, #0
 8007e6c:	f340 812b 	ble.w	80080c6 <atan+0x28e>
 8007e70:	a597      	add	r5, pc, #604	@ (adr r5, 80080d0 <atan+0x298>)
 8007e72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e76:	ec45 4b10 	vmov	d0, r4, r5
 8007e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	4bb2      	ldr	r3, [pc, #712]	@ (8008148 <atan+0x310>)
 8007e80:	429e      	cmp	r6, r3
 8007e82:	d813      	bhi.n	8007eac <atan+0x74>
 8007e84:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007e88:	429e      	cmp	r6, r3
 8007e8a:	d80c      	bhi.n	8007ea6 <atan+0x6e>
 8007e8c:	a392      	add	r3, pc, #584	@ (adr r3, 80080d8 <atan+0x2a0>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	4620      	mov	r0, r4
 8007e94:	4629      	mov	r1, r5
 8007e96:	f7f8 fa19 	bl	80002cc <__adddf3>
 8007e9a:	4bac      	ldr	r3, [pc, #688]	@ (800814c <atan+0x314>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f7f8 fe5b 	bl	8000b58 <__aeabi_dcmpgt>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d1e7      	bne.n	8007e76 <atan+0x3e>
 8007ea6:	f04f 3aff 	mov.w	sl, #4294967295
 8007eaa:	e029      	b.n	8007f00 <atan+0xc8>
 8007eac:	f000 f95c 	bl	8008168 <fabs>
 8007eb0:	4ba7      	ldr	r3, [pc, #668]	@ (8008150 <atan+0x318>)
 8007eb2:	429e      	cmp	r6, r3
 8007eb4:	ec55 4b10 	vmov	r4, r5, d0
 8007eb8:	f200 80bc 	bhi.w	8008034 <atan+0x1fc>
 8007ebc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007ec0:	429e      	cmp	r6, r3
 8007ec2:	f200 809e 	bhi.w	8008002 <atan+0x1ca>
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	462b      	mov	r3, r5
 8007eca:	4620      	mov	r0, r4
 8007ecc:	4629      	mov	r1, r5
 8007ece:	f7f8 f9fd 	bl	80002cc <__adddf3>
 8007ed2:	4b9e      	ldr	r3, [pc, #632]	@ (800814c <atan+0x314>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f7f8 f9f7 	bl	80002c8 <__aeabi_dsub>
 8007eda:	2200      	movs	r2, #0
 8007edc:	4606      	mov	r6, r0
 8007ede:	460f      	mov	r7, r1
 8007ee0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f7f8 f9f0 	bl	80002cc <__adddf3>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 fcca 	bl	800088c <__aeabi_ddiv>
 8007ef8:	f04f 0a00 	mov.w	sl, #0
 8007efc:	4604      	mov	r4, r0
 8007efe:	460d      	mov	r5, r1
 8007f00:	4622      	mov	r2, r4
 8007f02:	462b      	mov	r3, r5
 8007f04:	4620      	mov	r0, r4
 8007f06:	4629      	mov	r1, r5
 8007f08:	f7f8 fb96 	bl	8000638 <__aeabi_dmul>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4680      	mov	r8, r0
 8007f12:	4689      	mov	r9, r1
 8007f14:	f7f8 fb90 	bl	8000638 <__aeabi_dmul>
 8007f18:	a371      	add	r3, pc, #452	@ (adr r3, 80080e0 <atan+0x2a8>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	4606      	mov	r6, r0
 8007f20:	460f      	mov	r7, r1
 8007f22:	f7f8 fb89 	bl	8000638 <__aeabi_dmul>
 8007f26:	a370      	add	r3, pc, #448	@ (adr r3, 80080e8 <atan+0x2b0>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 f9ce 	bl	80002cc <__adddf3>
 8007f30:	4632      	mov	r2, r6
 8007f32:	463b      	mov	r3, r7
 8007f34:	f7f8 fb80 	bl	8000638 <__aeabi_dmul>
 8007f38:	a36d      	add	r3, pc, #436	@ (adr r3, 80080f0 <atan+0x2b8>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 f9c5 	bl	80002cc <__adddf3>
 8007f42:	4632      	mov	r2, r6
 8007f44:	463b      	mov	r3, r7
 8007f46:	f7f8 fb77 	bl	8000638 <__aeabi_dmul>
 8007f4a:	a36b      	add	r3, pc, #428	@ (adr r3, 80080f8 <atan+0x2c0>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 f9bc 	bl	80002cc <__adddf3>
 8007f54:	4632      	mov	r2, r6
 8007f56:	463b      	mov	r3, r7
 8007f58:	f7f8 fb6e 	bl	8000638 <__aeabi_dmul>
 8007f5c:	a368      	add	r3, pc, #416	@ (adr r3, 8008100 <atan+0x2c8>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f9b3 	bl	80002cc <__adddf3>
 8007f66:	4632      	mov	r2, r6
 8007f68:	463b      	mov	r3, r7
 8007f6a:	f7f8 fb65 	bl	8000638 <__aeabi_dmul>
 8007f6e:	a366      	add	r3, pc, #408	@ (adr r3, 8008108 <atan+0x2d0>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 f9aa 	bl	80002cc <__adddf3>
 8007f78:	4642      	mov	r2, r8
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	f7f8 fb5c 	bl	8000638 <__aeabi_dmul>
 8007f80:	a363      	add	r3, pc, #396	@ (adr r3, 8008110 <atan+0x2d8>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	4680      	mov	r8, r0
 8007f88:	4689      	mov	r9, r1
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	f7f8 fb53 	bl	8000638 <__aeabi_dmul>
 8007f92:	a361      	add	r3, pc, #388	@ (adr r3, 8008118 <atan+0x2e0>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f996 	bl	80002c8 <__aeabi_dsub>
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	f7f8 fb4a 	bl	8000638 <__aeabi_dmul>
 8007fa4:	a35e      	add	r3, pc, #376	@ (adr r3, 8008120 <atan+0x2e8>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f98d 	bl	80002c8 <__aeabi_dsub>
 8007fae:	4632      	mov	r2, r6
 8007fb0:	463b      	mov	r3, r7
 8007fb2:	f7f8 fb41 	bl	8000638 <__aeabi_dmul>
 8007fb6:	a35c      	add	r3, pc, #368	@ (adr r3, 8008128 <atan+0x2f0>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 f984 	bl	80002c8 <__aeabi_dsub>
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	f7f8 fb38 	bl	8000638 <__aeabi_dmul>
 8007fc8:	a359      	add	r3, pc, #356	@ (adr r3, 8008130 <atan+0x2f8>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	f7f8 f97b 	bl	80002c8 <__aeabi_dsub>
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	f7f8 fb2f 	bl	8000638 <__aeabi_dmul>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4640      	mov	r0, r8
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	f7f8 f973 	bl	80002cc <__adddf3>
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	462b      	mov	r3, r5
 8007fea:	f7f8 fb25 	bl	8000638 <__aeabi_dmul>
 8007fee:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	d148      	bne.n	800808a <atan+0x252>
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	f7f8 f964 	bl	80002c8 <__aeabi_dsub>
 8008000:	e72f      	b.n	8007e62 <atan+0x2a>
 8008002:	4b52      	ldr	r3, [pc, #328]	@ (800814c <atan+0x314>)
 8008004:	2200      	movs	r2, #0
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 f95d 	bl	80002c8 <__aeabi_dsub>
 800800e:	4b4f      	ldr	r3, [pc, #316]	@ (800814c <atan+0x314>)
 8008010:	4606      	mov	r6, r0
 8008012:	460f      	mov	r7, r1
 8008014:	2200      	movs	r2, #0
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	f7f8 f957 	bl	80002cc <__adddf3>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4630      	mov	r0, r6
 8008024:	4639      	mov	r1, r7
 8008026:	f7f8 fc31 	bl	800088c <__aeabi_ddiv>
 800802a:	f04f 0a01 	mov.w	sl, #1
 800802e:	4604      	mov	r4, r0
 8008030:	460d      	mov	r5, r1
 8008032:	e765      	b.n	8007f00 <atan+0xc8>
 8008034:	4b47      	ldr	r3, [pc, #284]	@ (8008154 <atan+0x31c>)
 8008036:	429e      	cmp	r6, r3
 8008038:	d21c      	bcs.n	8008074 <atan+0x23c>
 800803a:	4b47      	ldr	r3, [pc, #284]	@ (8008158 <atan+0x320>)
 800803c:	2200      	movs	r2, #0
 800803e:	4620      	mov	r0, r4
 8008040:	4629      	mov	r1, r5
 8008042:	f7f8 f941 	bl	80002c8 <__aeabi_dsub>
 8008046:	4b44      	ldr	r3, [pc, #272]	@ (8008158 <atan+0x320>)
 8008048:	4606      	mov	r6, r0
 800804a:	460f      	mov	r7, r1
 800804c:	2200      	movs	r2, #0
 800804e:	4620      	mov	r0, r4
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 faf1 	bl	8000638 <__aeabi_dmul>
 8008056:	4b3d      	ldr	r3, [pc, #244]	@ (800814c <atan+0x314>)
 8008058:	2200      	movs	r2, #0
 800805a:	f7f8 f937 	bl	80002cc <__adddf3>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4630      	mov	r0, r6
 8008064:	4639      	mov	r1, r7
 8008066:	f7f8 fc11 	bl	800088c <__aeabi_ddiv>
 800806a:	f04f 0a02 	mov.w	sl, #2
 800806e:	4604      	mov	r4, r0
 8008070:	460d      	mov	r5, r1
 8008072:	e745      	b.n	8007f00 <atan+0xc8>
 8008074:	4622      	mov	r2, r4
 8008076:	462b      	mov	r3, r5
 8008078:	4938      	ldr	r1, [pc, #224]	@ (800815c <atan+0x324>)
 800807a:	2000      	movs	r0, #0
 800807c:	f7f8 fc06 	bl	800088c <__aeabi_ddiv>
 8008080:	f04f 0a03 	mov.w	sl, #3
 8008084:	4604      	mov	r4, r0
 8008086:	460d      	mov	r5, r1
 8008088:	e73a      	b.n	8007f00 <atan+0xc8>
 800808a:	4b35      	ldr	r3, [pc, #212]	@ (8008160 <atan+0x328>)
 800808c:	4e35      	ldr	r6, [pc, #212]	@ (8008164 <atan+0x32c>)
 800808e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008096:	f7f8 f917 	bl	80002c8 <__aeabi_dsub>
 800809a:	4622      	mov	r2, r4
 800809c:	462b      	mov	r3, r5
 800809e:	f7f8 f913 	bl	80002c8 <__aeabi_dsub>
 80080a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80080ae:	f7f8 f90b 	bl	80002c8 <__aeabi_dsub>
 80080b2:	f1bb 0f00 	cmp.w	fp, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
 80080ba:	f6bf aedc 	bge.w	8007e76 <atan+0x3e>
 80080be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080c2:	461d      	mov	r5, r3
 80080c4:	e6d7      	b.n	8007e76 <atan+0x3e>
 80080c6:	a51c      	add	r5, pc, #112	@ (adr r5, 8008138 <atan+0x300>)
 80080c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080cc:	e6d3      	b.n	8007e76 <atan+0x3e>
 80080ce:	bf00      	nop
 80080d0:	54442d18 	.word	0x54442d18
 80080d4:	3ff921fb 	.word	0x3ff921fb
 80080d8:	8800759c 	.word	0x8800759c
 80080dc:	7e37e43c 	.word	0x7e37e43c
 80080e0:	e322da11 	.word	0xe322da11
 80080e4:	3f90ad3a 	.word	0x3f90ad3a
 80080e8:	24760deb 	.word	0x24760deb
 80080ec:	3fa97b4b 	.word	0x3fa97b4b
 80080f0:	a0d03d51 	.word	0xa0d03d51
 80080f4:	3fb10d66 	.word	0x3fb10d66
 80080f8:	c54c206e 	.word	0xc54c206e
 80080fc:	3fb745cd 	.word	0x3fb745cd
 8008100:	920083ff 	.word	0x920083ff
 8008104:	3fc24924 	.word	0x3fc24924
 8008108:	5555550d 	.word	0x5555550d
 800810c:	3fd55555 	.word	0x3fd55555
 8008110:	2c6a6c2f 	.word	0x2c6a6c2f
 8008114:	bfa2b444 	.word	0xbfa2b444
 8008118:	52defd9a 	.word	0x52defd9a
 800811c:	3fadde2d 	.word	0x3fadde2d
 8008120:	af749a6d 	.word	0xaf749a6d
 8008124:	3fb3b0f2 	.word	0x3fb3b0f2
 8008128:	fe231671 	.word	0xfe231671
 800812c:	3fbc71c6 	.word	0x3fbc71c6
 8008130:	9998ebc4 	.word	0x9998ebc4
 8008134:	3fc99999 	.word	0x3fc99999
 8008138:	54442d18 	.word	0x54442d18
 800813c:	bff921fb 	.word	0xbff921fb
 8008140:	440fffff 	.word	0x440fffff
 8008144:	7ff00000 	.word	0x7ff00000
 8008148:	3fdbffff 	.word	0x3fdbffff
 800814c:	3ff00000 	.word	0x3ff00000
 8008150:	3ff2ffff 	.word	0x3ff2ffff
 8008154:	40038000 	.word	0x40038000
 8008158:	3ff80000 	.word	0x3ff80000
 800815c:	bff00000 	.word	0xbff00000
 8008160:	08008708 	.word	0x08008708
 8008164:	08008728 	.word	0x08008728

08008168 <fabs>:
 8008168:	ec51 0b10 	vmov	r0, r1, d0
 800816c:	4602      	mov	r2, r0
 800816e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008172:	ec43 2b10 	vmov	d0, r2, r3
 8008176:	4770      	bx	lr

08008178 <scalbn>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	ec55 4b10 	vmov	r4, r5, d0
 800817e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008182:	4606      	mov	r6, r0
 8008184:	462b      	mov	r3, r5
 8008186:	b991      	cbnz	r1, 80081ae <scalbn+0x36>
 8008188:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800818c:	4323      	orrs	r3, r4
 800818e:	d03d      	beq.n	800820c <scalbn+0x94>
 8008190:	4b35      	ldr	r3, [pc, #212]	@ (8008268 <scalbn+0xf0>)
 8008192:	4620      	mov	r0, r4
 8008194:	4629      	mov	r1, r5
 8008196:	2200      	movs	r2, #0
 8008198:	f7f8 fa4e 	bl	8000638 <__aeabi_dmul>
 800819c:	4b33      	ldr	r3, [pc, #204]	@ (800826c <scalbn+0xf4>)
 800819e:	429e      	cmp	r6, r3
 80081a0:	4604      	mov	r4, r0
 80081a2:	460d      	mov	r5, r1
 80081a4:	da0f      	bge.n	80081c6 <scalbn+0x4e>
 80081a6:	a328      	add	r3, pc, #160	@ (adr r3, 8008248 <scalbn+0xd0>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	e01e      	b.n	80081ec <scalbn+0x74>
 80081ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80081b2:	4291      	cmp	r1, r2
 80081b4:	d10b      	bne.n	80081ce <scalbn+0x56>
 80081b6:	4622      	mov	r2, r4
 80081b8:	4620      	mov	r0, r4
 80081ba:	4629      	mov	r1, r5
 80081bc:	f7f8 f886 	bl	80002cc <__adddf3>
 80081c0:	4604      	mov	r4, r0
 80081c2:	460d      	mov	r5, r1
 80081c4:	e022      	b.n	800820c <scalbn+0x94>
 80081c6:	460b      	mov	r3, r1
 80081c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80081cc:	3936      	subs	r1, #54	@ 0x36
 80081ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80081d2:	4296      	cmp	r6, r2
 80081d4:	dd0d      	ble.n	80081f2 <scalbn+0x7a>
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008250 <scalbn+0xd8>)
 80081da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081de:	da02      	bge.n	80081e6 <scalbn+0x6e>
 80081e0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008258 <scalbn+0xe0>)
 80081e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081e6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008250 <scalbn+0xd8>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f8 fa24 	bl	8000638 <__aeabi_dmul>
 80081f0:	e7e6      	b.n	80081c0 <scalbn+0x48>
 80081f2:	1872      	adds	r2, r6, r1
 80081f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80081f8:	428a      	cmp	r2, r1
 80081fa:	dcec      	bgt.n	80081d6 <scalbn+0x5e>
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	dd08      	ble.n	8008212 <scalbn+0x9a>
 8008200:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008204:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008208:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800820c:	ec45 4b10 	vmov	d0, r4, r5
 8008210:	bd70      	pop	{r4, r5, r6, pc}
 8008212:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008216:	da08      	bge.n	800822a <scalbn+0xb2>
 8008218:	2d00      	cmp	r5, #0
 800821a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008248 <scalbn+0xd0>)
 800821c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008220:	dac1      	bge.n	80081a6 <scalbn+0x2e>
 8008222:	a10f      	add	r1, pc, #60	@ (adr r1, 8008260 <scalbn+0xe8>)
 8008224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008228:	e7bd      	b.n	80081a6 <scalbn+0x2e>
 800822a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800822e:	3236      	adds	r2, #54	@ 0x36
 8008230:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008234:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008238:	4620      	mov	r0, r4
 800823a:	4b0d      	ldr	r3, [pc, #52]	@ (8008270 <scalbn+0xf8>)
 800823c:	4629      	mov	r1, r5
 800823e:	2200      	movs	r2, #0
 8008240:	e7d4      	b.n	80081ec <scalbn+0x74>
 8008242:	bf00      	nop
 8008244:	f3af 8000 	nop.w
 8008248:	c2f8f359 	.word	0xc2f8f359
 800824c:	01a56e1f 	.word	0x01a56e1f
 8008250:	8800759c 	.word	0x8800759c
 8008254:	7e37e43c 	.word	0x7e37e43c
 8008258:	8800759c 	.word	0x8800759c
 800825c:	fe37e43c 	.word	0xfe37e43c
 8008260:	c2f8f359 	.word	0xc2f8f359
 8008264:	81a56e1f 	.word	0x81a56e1f
 8008268:	43500000 	.word	0x43500000
 800826c:	ffff3cb0 	.word	0xffff3cb0
 8008270:	3c900000 	.word	0x3c900000

08008274 <with_errno>:
 8008274:	b510      	push	{r4, lr}
 8008276:	ed2d 8b02 	vpush	{d8}
 800827a:	eeb0 8a40 	vmov.f32	s16, s0
 800827e:	eef0 8a60 	vmov.f32	s17, s1
 8008282:	4604      	mov	r4, r0
 8008284:	f7fe fb4c 	bl	8006920 <__errno>
 8008288:	eeb0 0a48 	vmov.f32	s0, s16
 800828c:	eef0 0a68 	vmov.f32	s1, s17
 8008290:	ecbd 8b02 	vpop	{d8}
 8008294:	6004      	str	r4, [r0, #0]
 8008296:	bd10      	pop	{r4, pc}

08008298 <xflow>:
 8008298:	4603      	mov	r3, r0
 800829a:	b507      	push	{r0, r1, r2, lr}
 800829c:	ec51 0b10 	vmov	r0, r1, d0
 80082a0:	b183      	cbz	r3, 80082c4 <xflow+0x2c>
 80082a2:	4602      	mov	r2, r0
 80082a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082a8:	e9cd 2300 	strd	r2, r3, [sp]
 80082ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082b0:	f7f8 f9c2 	bl	8000638 <__aeabi_dmul>
 80082b4:	ec41 0b10 	vmov	d0, r0, r1
 80082b8:	2022      	movs	r0, #34	@ 0x22
 80082ba:	b003      	add	sp, #12
 80082bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80082c0:	f7ff bfd8 	b.w	8008274 <with_errno>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	e7ee      	b.n	80082a8 <xflow+0x10>
 80082ca:	0000      	movs	r0, r0
 80082cc:	0000      	movs	r0, r0
	...

080082d0 <__math_uflow>:
 80082d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80082d8 <__math_uflow+0x8>
 80082d4:	f7ff bfe0 	b.w	8008298 <xflow>
 80082d8:	00000000 	.word	0x00000000
 80082dc:	10000000 	.word	0x10000000

080082e0 <__math_oflow>:
 80082e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80082e8 <__math_oflow+0x8>
 80082e4:	f7ff bfd8 	b.w	8008298 <xflow>
 80082e8:	00000000 	.word	0x00000000
 80082ec:	70000000 	.word	0x70000000

080082f0 <__ieee754_sqrt>:
 80082f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	4a68      	ldr	r2, [pc, #416]	@ (8008498 <__ieee754_sqrt+0x1a8>)
 80082f6:	ec55 4b10 	vmov	r4, r5, d0
 80082fa:	43aa      	bics	r2, r5
 80082fc:	462b      	mov	r3, r5
 80082fe:	4621      	mov	r1, r4
 8008300:	d110      	bne.n	8008324 <__ieee754_sqrt+0x34>
 8008302:	4622      	mov	r2, r4
 8008304:	4620      	mov	r0, r4
 8008306:	4629      	mov	r1, r5
 8008308:	f7f8 f996 	bl	8000638 <__aeabi_dmul>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4620      	mov	r0, r4
 8008312:	4629      	mov	r1, r5
 8008314:	f7f7 ffda 	bl	80002cc <__adddf3>
 8008318:	4604      	mov	r4, r0
 800831a:	460d      	mov	r5, r1
 800831c:	ec45 4b10 	vmov	d0, r4, r5
 8008320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008324:	2d00      	cmp	r5, #0
 8008326:	dc0e      	bgt.n	8008346 <__ieee754_sqrt+0x56>
 8008328:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800832c:	4322      	orrs	r2, r4
 800832e:	d0f5      	beq.n	800831c <__ieee754_sqrt+0x2c>
 8008330:	b19d      	cbz	r5, 800835a <__ieee754_sqrt+0x6a>
 8008332:	4622      	mov	r2, r4
 8008334:	4620      	mov	r0, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f7f7 ffc6 	bl	80002c8 <__aeabi_dsub>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	f7f8 faa4 	bl	800088c <__aeabi_ddiv>
 8008344:	e7e8      	b.n	8008318 <__ieee754_sqrt+0x28>
 8008346:	152a      	asrs	r2, r5, #20
 8008348:	d115      	bne.n	8008376 <__ieee754_sqrt+0x86>
 800834a:	2000      	movs	r0, #0
 800834c:	e009      	b.n	8008362 <__ieee754_sqrt+0x72>
 800834e:	0acb      	lsrs	r3, r1, #11
 8008350:	3a15      	subs	r2, #21
 8008352:	0549      	lsls	r1, r1, #21
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0fa      	beq.n	800834e <__ieee754_sqrt+0x5e>
 8008358:	e7f7      	b.n	800834a <__ieee754_sqrt+0x5a>
 800835a:	462a      	mov	r2, r5
 800835c:	e7fa      	b.n	8008354 <__ieee754_sqrt+0x64>
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	3001      	adds	r0, #1
 8008362:	02dc      	lsls	r4, r3, #11
 8008364:	d5fb      	bpl.n	800835e <__ieee754_sqrt+0x6e>
 8008366:	1e44      	subs	r4, r0, #1
 8008368:	1b12      	subs	r2, r2, r4
 800836a:	f1c0 0420 	rsb	r4, r0, #32
 800836e:	fa21 f404 	lsr.w	r4, r1, r4
 8008372:	4323      	orrs	r3, r4
 8008374:	4081      	lsls	r1, r0
 8008376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800837a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800837e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008382:	07d2      	lsls	r2, r2, #31
 8008384:	bf5c      	itt	pl
 8008386:	005b      	lslpl	r3, r3, #1
 8008388:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800838c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008390:	bf58      	it	pl
 8008392:	0049      	lslpl	r1, r1, #1
 8008394:	2600      	movs	r6, #0
 8008396:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800839a:	106d      	asrs	r5, r5, #1
 800839c:	0049      	lsls	r1, r1, #1
 800839e:	2016      	movs	r0, #22
 80083a0:	4632      	mov	r2, r6
 80083a2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80083a6:	1917      	adds	r7, r2, r4
 80083a8:	429f      	cmp	r7, r3
 80083aa:	bfde      	ittt	le
 80083ac:	193a      	addle	r2, r7, r4
 80083ae:	1bdb      	suble	r3, r3, r7
 80083b0:	1936      	addle	r6, r6, r4
 80083b2:	0fcf      	lsrs	r7, r1, #31
 80083b4:	3801      	subs	r0, #1
 80083b6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80083ba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80083be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80083c2:	d1f0      	bne.n	80083a6 <__ieee754_sqrt+0xb6>
 80083c4:	4604      	mov	r4, r0
 80083c6:	2720      	movs	r7, #32
 80083c8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80083cc:	429a      	cmp	r2, r3
 80083ce:	eb00 0e0c 	add.w	lr, r0, ip
 80083d2:	db02      	blt.n	80083da <__ieee754_sqrt+0xea>
 80083d4:	d113      	bne.n	80083fe <__ieee754_sqrt+0x10e>
 80083d6:	458e      	cmp	lr, r1
 80083d8:	d811      	bhi.n	80083fe <__ieee754_sqrt+0x10e>
 80083da:	f1be 0f00 	cmp.w	lr, #0
 80083de:	eb0e 000c 	add.w	r0, lr, ip
 80083e2:	da42      	bge.n	800846a <__ieee754_sqrt+0x17a>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	db40      	blt.n	800846a <__ieee754_sqrt+0x17a>
 80083e8:	f102 0801 	add.w	r8, r2, #1
 80083ec:	1a9b      	subs	r3, r3, r2
 80083ee:	458e      	cmp	lr, r1
 80083f0:	bf88      	it	hi
 80083f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80083f6:	eba1 010e 	sub.w	r1, r1, lr
 80083fa:	4464      	add	r4, ip
 80083fc:	4642      	mov	r2, r8
 80083fe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008402:	3f01      	subs	r7, #1
 8008404:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008408:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800840c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008410:	d1dc      	bne.n	80083cc <__ieee754_sqrt+0xdc>
 8008412:	4319      	orrs	r1, r3
 8008414:	d01b      	beq.n	800844e <__ieee754_sqrt+0x15e>
 8008416:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800849c <__ieee754_sqrt+0x1ac>
 800841a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80084a0 <__ieee754_sqrt+0x1b0>
 800841e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008422:	e9db 2300 	ldrd	r2, r3, [fp]
 8008426:	f7f7 ff4f 	bl	80002c8 <__aeabi_dsub>
 800842a:	e9da 8900 	ldrd	r8, r9, [sl]
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4640      	mov	r0, r8
 8008434:	4649      	mov	r1, r9
 8008436:	f7f8 fb7b 	bl	8000b30 <__aeabi_dcmple>
 800843a:	b140      	cbz	r0, 800844e <__ieee754_sqrt+0x15e>
 800843c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008440:	e9da 0100 	ldrd	r0, r1, [sl]
 8008444:	e9db 2300 	ldrd	r2, r3, [fp]
 8008448:	d111      	bne.n	800846e <__ieee754_sqrt+0x17e>
 800844a:	3601      	adds	r6, #1
 800844c:	463c      	mov	r4, r7
 800844e:	1072      	asrs	r2, r6, #1
 8008450:	0863      	lsrs	r3, r4, #1
 8008452:	07f1      	lsls	r1, r6, #31
 8008454:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008458:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800845c:	bf48      	it	mi
 800845e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008462:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008466:	4618      	mov	r0, r3
 8008468:	e756      	b.n	8008318 <__ieee754_sqrt+0x28>
 800846a:	4690      	mov	r8, r2
 800846c:	e7be      	b.n	80083ec <__ieee754_sqrt+0xfc>
 800846e:	f7f7 ff2d 	bl	80002cc <__adddf3>
 8008472:	e9da 8900 	ldrd	r8, r9, [sl]
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4640      	mov	r0, r8
 800847c:	4649      	mov	r1, r9
 800847e:	f7f8 fb4d 	bl	8000b1c <__aeabi_dcmplt>
 8008482:	b120      	cbz	r0, 800848e <__ieee754_sqrt+0x19e>
 8008484:	1ca0      	adds	r0, r4, #2
 8008486:	bf08      	it	eq
 8008488:	3601      	addeq	r6, #1
 800848a:	3402      	adds	r4, #2
 800848c:	e7df      	b.n	800844e <__ieee754_sqrt+0x15e>
 800848e:	1c63      	adds	r3, r4, #1
 8008490:	f023 0401 	bic.w	r4, r3, #1
 8008494:	e7db      	b.n	800844e <__ieee754_sqrt+0x15e>
 8008496:	bf00      	nop
 8008498:	7ff00000 	.word	0x7ff00000
 800849c:	200000c0 	.word	0x200000c0
 80084a0:	200000b8 	.word	0x200000b8

080084a4 <_init>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	bf00      	nop
 80084a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084aa:	bc08      	pop	{r3}
 80084ac:	469e      	mov	lr, r3
 80084ae:	4770      	bx	lr

080084b0 <_fini>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr
