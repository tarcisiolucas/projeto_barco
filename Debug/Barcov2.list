
Barcov2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080085a0  080085a0  000095a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008828  08008828  0000a0c8  2**0
                  CONTENTS
  4 .ARM          00000008  08008828  08008828  00009828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008830  08008830  0000a0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008830  08008830  00009830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008834  08008834  00009834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08008838  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa0  200000c8  08008900  0000a0c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  08008900  0000ab68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013142  00000000  00000000  0000a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf4  00000000  00000000  0001d23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0001ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dfa  00000000  00000000  00021100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002418d  00000000  00000000  00021efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d4d  00000000  00000000  00046087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5241  00000000  00000000  0005ddd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133015  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005680  00000000  00000000  00133058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001386d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008584 	.word	0x08008584

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	08008584 	.word	0x08008584

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HMC5883L_initialize+0x28>)
 8000f7e:	221e      	movs	r2, #30
 8000f80:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <HMC5883L_initialize+0x28>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2270      	movs	r2, #112	@ 0x70
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f8c4 	bl	8001118 <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 f807 	bl	8000fa4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 f818 	bl	8000fcc <HMC5883L_setMode>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000e4 	.word	0x200000e4

08000fa4 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HMC5883L_setGain+0x24>)
 8000fb0:	7818      	ldrb	r0, [r3, #0]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	015b      	lsls	r3, r3, #5
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2101      	movs	r1, #1
 8000fbc:	f000 f8ac 	bl	8001118 <I2Cdev_writeByte>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000e4 	.word	0x200000e4

08000fcc <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <HMC5883L_setMode+0x28>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f89a 	bl	8001118 <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HMC5883L_setMode+0x2c>)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	7013      	strb	r3, [r2, #0]
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000e4 	.word	0x200000e4
 8000ff8:	200000ee 	.word	0x200000ee

08000ffc <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t *x, int16_t *y, int16_t *z) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
    I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer, 0);
 8001008:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <HMC5883L_getHeading+0x80>)
 800100a:	7818      	ldrb	r0, [r3, #0]
 800100c:	2300      	movs	r3, #0
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001012:	2206      	movs	r2, #6
 8001014:	2103      	movs	r1, #3
 8001016:	f000 f847 	bl	80010a8 <I2Cdev_readBytes>
    if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <HMC5883L_getHeading+0x88>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d106      	bne.n	8001030 <HMC5883L_getHeading+0x34>
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HMC5883L_getHeading+0x80>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2201      	movs	r2, #1
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f874 	bl	8001118 <I2Cdev_writeByte>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <HMC5883L_getHeading+0x84>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001050:	795b      	ldrb	r3, [r3, #5]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HMC5883L_getHeading+0x84>)
 800105e:	789b      	ldrb	r3, [r3, #2]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HMC5883L_getHeading+0x84>)
 8001066:	78db      	ldrb	r3, [r3, #3]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	801a      	strh	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000e4 	.word	0x200000e4
 8001080:	200000e8 	.word	0x200000e8
 8001084:	200000ee 	.word	0x200000ee

08001088 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <I2Cdev_init+0x1c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200000f0 	.word	0x200000f0

080010a8 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	460b      	mov	r3, r1
 80010b6:	71bb      	strb	r3, [r7, #6]
 80010b8:	4613      	mov	r3, r2
 80010ba:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80010bc:	8b3b      	ldrh	r3, [r7, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <I2Cdev_readBytes+0x1e>
 80010c2:	8b3b      	ldrh	r3, [r7, #24]
 80010c4:	e001      	b.n	80010ca <I2Cdev_readBytes+0x22>
 80010c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ca:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <I2Cdev_readBytes+0x6c>)
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	b299      	uxth	r1, r3
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	1dba      	adds	r2, r7, #6
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	f002 fb38 	bl	8003754 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <I2Cdev_readBytes+0x6c>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	b299      	uxth	r1, r3
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	4613      	mov	r3, r2
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f002 fc28 	bl	8003950 <HAL_I2C_Master_Receive>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <I2Cdev_readBytes+0x62>
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	e000      	b.n	800110c <I2Cdev_readBytes+0x64>
    return -1;
 800110a:	23ff      	movs	r3, #255	@ 0xff
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200000f0 	.word	0x200000f0

08001118 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	460b      	mov	r3, r1
 8001124:	71bb      	strb	r3, [r7, #6]
 8001126:	4613      	mov	r3, r2
 8001128:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 800112a:	1d7b      	adds	r3, r7, #5
 800112c:	79b9      	ldrb	r1, [r7, #6]
 800112e:	79f8      	ldrb	r0, [r7, #7]
 8001130:	2201      	movs	r2, #1
 8001132:	f000 f805 	bl	8001140 <I2Cdev_writeBytes>
 8001136:	4603      	mov	r3, r0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af04      	add	r7, sp, #16
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	460b      	mov	r3, r1
 800114e:	71bb      	strb	r3, [r7, #6]
 8001150:	4613      	mov	r3, r2
 8001152:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <I2Cdev_writeBytes+0x54>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	b29b      	uxth	r3, r3
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	b299      	uxth	r1, r3
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	b29a      	uxth	r2, r3
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	b29b      	uxth	r3, r3
 8001168:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800116c:	9402      	str	r4, [sp, #8]
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	f002 fe1d 	bl	8003db4 <HAL_I2C_Mem_Write>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	200000f0 	.word	0x200000f0

08001198 <BLE_SendInstruction>:

void BLE_Init(UART_HandleTypeDef* huart){
	huart_ble = huart;
}

void BLE_SendInstruction (AtInstruction_t instruction, char* parameter, UART_HandleTypeDef* huart) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	73fb      	strb	r3, [r7, #15]
	char *instructionPrefix = atInstructions[instruction];
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <BLE_SendInstruction+0x54>)
 80011aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ae:	617b      	str	r3, [r7, #20]
	char *completeInstruction = (char*) malloc(30 * sizeof(char));
 80011b0:	201e      	movs	r0, #30
 80011b2:	f005 fa65 	bl	8006680 <malloc>
 80011b6:	4603      	mov	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]
	sprintf(completeInstruction, "%s%s\r\n", instructionPrefix, parameter);
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <BLE_SendInstruction+0x58>)
 80011c0:	6938      	ldr	r0, [r7, #16]
 80011c2:	f005 fb9f 	bl	8006904 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t *) completeInstruction, strlen(completeInstruction), HAL_MAX_DELAY);
 80011c6:	6938      	ldr	r0, [r7, #16]
 80011c8:	f7ff f822 	bl	8000210 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	6939      	ldr	r1, [r7, #16]
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f004 fdfc 	bl	8005dd4 <HAL_UART_Transmit>
	free(completeInstruction);
 80011dc:	6938      	ldr	r0, [r7, #16]
 80011de:	f005 fa57 	bl	8006690 <free>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000
 80011f0:	080085e4 	.word	0x080085e4

080011f4 <BLE_ScanDevices>:

void BLE_ScanDevices(UART_HandleTypeDef* huart){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
//	char *allText = (char *) malloc(1000 * sizeof(char));
//	buffer = allText;
	uint32_t start_time = HAL_GetTick();
 80011fc:	f001 fea2 	bl	8002f44 <HAL_GetTick>
 8001200:	60f8      	str	r0, [r7, #12]
	BLE_SendInstruction(SCAN_SLAVES, "", huart);
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	491e      	ldr	r1, [pc, #120]	@ (8001280 <BLE_ScanDevices+0x8c>)
 8001206:	2005      	movs	r0, #5
 8001208:	f7ff ffc6 	bl	8001198 <BLE_SendInstruction>
	memset(uartBuffer, 0, sizeof(uartBuffer));
 800120c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001210:	2100      	movs	r1, #0
 8001212:	481c      	ldr	r0, [pc, #112]	@ (8001284 <BLE_ScanDevices+0x90>)
 8001214:	f005 fb96 	bl	8006944 <memset>
	while(!((strstr(uartBuffer, "STOP:SCAN") != NULL))) {
 8001218:	e01a      	b.n	8001250 <BLE_ScanDevices+0x5c>
		if (HAL_GetTick() - start_time >= 500) {
 800121a:	f001 fe93 	bl	8002f44 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001228:	d21a      	bcs.n	8001260 <BLE_ScanDevices+0x6c>
			break;
		}
		HAL_UART_Receive(huart, (uint8_t *) inputBuffer, 1, 500);
 800122a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800122e:	2201      	movs	r2, #1
 8001230:	4915      	ldr	r1, [pc, #84]	@ (8001288 <BLE_ScanDevices+0x94>)
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f004 fe59 	bl	8005eea <HAL_UART_Receive>
//		strcat(allText, inputBuffer);
		if (strlen(uartBuffer) + 1 < MAX_SIZE_UART_BUFFER) {
 8001238:	4812      	ldr	r0, [pc, #72]	@ (8001284 <BLE_ScanDevices+0x90>)
 800123a:	f7fe ffe9 	bl	8000210 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	3301      	adds	r3, #1
 8001242:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001246:	d203      	bcs.n	8001250 <BLE_ScanDevices+0x5c>
		    strcat(uartBuffer, inputBuffer);
 8001248:	490f      	ldr	r1, [pc, #60]	@ (8001288 <BLE_ScanDevices+0x94>)
 800124a:	480e      	ldr	r0, [pc, #56]	@ (8001284 <BLE_ScanDevices+0x90>)
 800124c:	f005 fb82 	bl	8006954 <strcat>
	while(!((strstr(uartBuffer, "STOP:SCAN") != NULL))) {
 8001250:	490e      	ldr	r1, [pc, #56]	@ (800128c <BLE_ScanDevices+0x98>)
 8001252:	480c      	ldr	r0, [pc, #48]	@ (8001284 <BLE_ScanDevices+0x90>)
 8001254:	f005 fbad 	bl	80069b2 <strstr>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0dd      	beq.n	800121a <BLE_ScanDevices+0x26>
 800125e:	e000      	b.n	8001262 <BLE_ScanDevices+0x6e>
			break;
 8001260:	bf00      	nop
		}
	}
//	strcpy(lendo,allText);
	JDY18Driver_ParseScanResponse(uartBuffer, &scannedDevices);
 8001262:	490b      	ldr	r1, [pc, #44]	@ (8001290 <BLE_ScanDevices+0x9c>)
 8001264:	4807      	ldr	r0, [pc, #28]	@ (8001284 <BLE_ScanDevices+0x90>)
 8001266:	f000 f8e9 	bl	800143c <JDY18Driver_ParseScanResponse>
	memset(uartBuffer, 0, sizeof(uartBuffer));
 800126a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800126e:	2100      	movs	r1, #0
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <BLE_ScanDevices+0x90>)
 8001272:	f005 fb67 	bl	8006944 <memset>
//	free(allText);
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	080085ec 	.word	0x080085ec
 8001284:	200003a4 	.word	0x200003a4
 8001288:	200000f4 	.word	0x200000f4
 800128c:	080085f0 	.word	0x080085f0
 8001290:	200000f8 	.word	0x200000f8

08001294 <JDY18Driver_LoadDeviceInfo>:

void JDY18Driver_LoadDeviceInfo(char* start, char* end, device_t* device)
{
 8001294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001298:	b091      	sub	sp, #68	@ 0x44
 800129a:	af00      	add	r7, sp, #0
 800129c:	6178      	str	r0, [r7, #20]
 800129e:	6139      	str	r1, [r7, #16]
 80012a0:	60fa      	str	r2, [r7, #12]
 80012a2:	466b      	mov	r3, sp
 80012a4:	60bb      	str	r3, [r7, #8]

    if (start == NULL || end == NULL || device == NULL) {
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80c0 	beq.w	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80bc 	beq.w	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80b8 	beq.w	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Protege contra ponteiros nulos
    }

    size_t size = end - start;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (size <= 7) { // Tamanho insuficiente para conter dados válidos
 80012c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	f240 80a7 	bls.w	800141c <JDY18Driver_LoadDeviceInfo+0x188>
        return;
    }

    char temp[size + 1]; // Buffer temporário
 80012ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d0:	1c5e      	adds	r6, r3, #1
 80012d2:	4633      	mov	r3, r6
 80012d4:	3b01      	subs	r3, #1
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012d8:	2300      	movs	r3, #0
 80012da:	603e      	str	r6, [r7, #0]
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	00cb      	lsls	r3, r1, #3
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012f0:	6839      	ldr	r1, [r7, #0]
 80012f2:	00ca      	lsls	r2, r1, #3
 80012f4:	2300      	movs	r3, #0
 80012f6:	46b2      	mov	sl, r6
 80012f8:	469b      	mov	fp, r3
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001306:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800130a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800130e:	1df3      	adds	r3, r6, #7
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	ebad 0d03 	sub.w	sp, sp, r3
 8001318:	466b      	mov	r3, sp
 800131a:	3300      	adds	r3, #0
 800131c:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(temp, start, size);
 800131e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001324:	f005 fb98 	bl	8006a58 <memcpy>
    temp[size] = '\0'; // Garante que a string esteja terminada em nulo
 8001328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800132a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800132c:	4413      	add	r3, r2
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]

    char* macAddressPointer = temp + 7; // MAC começa após "+DEV:"
 8001332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001334:	3307      	adds	r3, #7
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
    if (macAddressPointer >= temp + size || macAddressPointer + MAC_ADDRESS_SIZE > temp + size) {
 8001338:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800133a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800133c:	4413      	add	r3, r2
 800133e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001340:	429a      	cmp	r2, r3
 8001342:	d26d      	bcs.n	8001420 <JDY18Driver_LoadDeviceInfo+0x18c>
 8001344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001346:	f103 020c 	add.w	r2, r3, #12
 800134a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800134c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800134e:	440b      	add	r3, r1
 8001350:	429a      	cmp	r2, r3
 8001352:	d865      	bhi.n	8001420 <JDY18Driver_LoadDeviceInfo+0x18c>
        return; // Verifica se o MAC está dentro dos limites
    }

    char* rssiPointer = macAddressPointer + MAC_ADDRESS_SIZE + 1; // RSSI após MAC
 8001354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001356:	330d      	adds	r3, #13
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (rssiPointer >= temp + size) {
 800135a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800135c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800135e:	4413      	add	r3, r2
 8001360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001362:	429a      	cmp	r2, r3
 8001364:	d25e      	bcs.n	8001424 <JDY18Driver_LoadDeviceInfo+0x190>
        return; // Verifica se o RSSI está dentro dos limites
    }

    char* namePointer = strstr(rssiPointer, ",");
 8001366:	212c      	movs	r1, #44	@ 0x2c
 8001368:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800136a:	f005 fb02 	bl	8006972 <strchr>
 800136e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (namePointer == NULL) {
 8001370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001372:	2b00      	cmp	r3, #0
 8001374:	d058      	beq.n	8001428 <JDY18Driver_LoadDeviceInfo+0x194>
        return; // Nome inválido ou delimitador ausente
    }
    namePointer += 1; // Salta a vírgula
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	3301      	adds	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Calcula o tamanho do RSSI
    size_t rssiSize = namePointer - rssiPointer - 1;
 800137c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800137e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
    if (rssiSize >= sizeof(temp)) {
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	429e      	cmp	r6, r3
 800138a:	d94f      	bls.n	800142c <JDY18Driver_LoadDeviceInfo+0x198>
        return; // Tamanho do RSSI fora dos limites
    }

    // Buffers temporários
    char rssiStr[rssiSize + 1];
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	1c59      	adds	r1, r3, #1
 8001390:	460b      	mov	r3, r1
 8001392:	3b01      	subs	r3, #1
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	2300      	movs	r3, #0
 8001398:	4688      	mov	r8, r1
 800139a:	4699      	mov	r9, r3
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013b0:	2300      	movs	r3, #0
 80013b2:	460c      	mov	r4, r1
 80013b4:	461d      	mov	r5, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	00eb      	lsls	r3, r5, #3
 80013c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013c4:	00e2      	lsls	r2, r4, #3
 80013c6:	1dcb      	adds	r3, r1, #7
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	ebad 0d03 	sub.w	sp, sp, r3
 80013d0:	466b      	mov	r3, sp
 80013d2:	3300      	adds	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    memcpy(rssiStr, rssiPointer, rssiSize);
 80013d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80013da:	69f8      	ldr	r0, [r7, #28]
 80013dc:	f005 fb3c 	bl	8006a58 <memcpy>
    rssiStr[rssiSize] = '\0';
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	4413      	add	r3, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]

    // Copia os dados para o dispositivo
//    memset(device->mac, 0, MAC_ADDRESS_SIZE); // Limpa o MAC antes de copiar
//    memcpy(device->mac, macAddressPointer, MAC_ADDRESS_SIZE);

    memset(device->name, 0, MAX_DEVICE_NAME_SIZE); // Limpa o nome antes de copiar
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2232      	movs	r2, #50	@ 0x32
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 faa7 	bl	8006944 <memset>
    strncpy(device->name, namePointer, MAX_DEVICE_NAME_SIZE - 1);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2231      	movs	r2, #49	@ 0x31
 80013fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013fc:	4618      	mov	r0, r3
 80013fe:	f005 fac5 	bl	800698c <strncpy>
    device->name[MAX_DEVICE_NAME_SIZE - 1] = '\0'; // Garante terminação nula
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    device->rssi = atoi(rssiStr); // Converte RSSI para inteiro
 800140a:	69f8      	ldr	r0, [r7, #28]
 800140c:	f005 f934 	bl	8006678 <atoi>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40
 8001416:	f8d7 d008 	ldr.w	sp, [r7, #8]
 800141a:	e00a      	b.n	8001432 <JDY18Driver_LoadDeviceInfo+0x19e>
        return;
 800141c:	bf00      	nop
 800141e:	e006      	b.n	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Verifica se o MAC está dentro dos limites
 8001420:	bf00      	nop
 8001422:	e004      	b.n	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Verifica se o RSSI está dentro dos limites
 8001424:	bf00      	nop
 8001426:	e002      	b.n	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Nome inválido ou delimitador ausente
 8001428:	bf00      	nop
 800142a:	e000      	b.n	800142e <JDY18Driver_LoadDeviceInfo+0x19a>
        return; // Tamanho do RSSI fora dos limites
 800142c:	bf00      	nop
        return; // Protege contra ponteiros nulos
 800142e:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8001432:	3744      	adds	r7, #68	@ 0x44
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800143c <JDY18Driver_ParseScanResponse>:

void JDY18Driver_ParseScanResponse(char* scanResponse, scan_t* scan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
//			scan->size++;
//		}
//	}

    char *start, *end;
    memset(scan, 0, sizeof(scan_t));
 8001446:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 800144a:	2100      	movs	r1, #0
 800144c:	6838      	ldr	r0, [r7, #0]
 800144e:	f005 fa79 	bl	8006944 <memset>
    scan->size = 0;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8

    if ((start = strstr(scanResponse, INIT_MODULE_RESPONSE_SCAN))) {
 800145a:	4926      	ldr	r1, [pc, #152]	@ (80014f4 <JDY18Driver_ParseScanResponse+0xb8>)
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f005 faa8 	bl	80069b2 <strstr>
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d040      	beq.n	80014ec <JDY18Driver_ParseScanResponse+0xb0>
        while ((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 800146a:	e016      	b.n	800149a <JDY18Driver_ParseScanResponse+0x5e>
            JDY18Driver_LoadDeviceInfo(start, end, &scan->devices[scan->size]);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f8d3 22a8 	ldr.w	r2, [r3, #680]	@ 0x2a8
 8001472:	4613      	mov	r3, r2
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	461a      	mov	r2, r3
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff ff06 	bl	8001294 <JDY18Driver_LoadDeviceInfo>
            start = end;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60fb      	str	r3, [r7, #12]
            scan->size++;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
        while ((end = strstr(start + 1, INIT_MODULE_RESPONSE_SCAN))) {
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3301      	adds	r3, #1
 800149e:	4915      	ldr	r1, [pc, #84]	@ (80014f4 <JDY18Driver_ParseScanResponse+0xb8>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 fa86 	bl	80069b2 <strstr>
 80014a6:	60b8      	str	r0, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1de      	bne.n	800146c <JDY18Driver_ParseScanResponse+0x30>
        }
        // Verifica se o próximo caractere após o último marcador é nulo
        if (*(start + strlen(INIT_MODULE_RESPONSE_SCAN)) == '\0') {
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3305      	adds	r3, #5
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d119      	bne.n	80014ec <JDY18Driver_ParseScanResponse+0xb0>
            JDY18Driver_LoadDeviceInfo(start, start + strlen(start), &scan->devices[scan->size]);
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f7fe fea9 	bl	8000210 <strlen>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1899      	adds	r1, r3, r2
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f8d3 22a8 	ldr.w	r2, [r3, #680]	@ 0x2a8
 80014ca:	4613      	mov	r3, r2
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	461a      	mov	r2, r3
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f7ff fedb 	bl	8001294 <JDY18Driver_LoadDeviceInfo>
            scan->size++;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
        }
    }
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	080085fc 	.word	0x080085fc

080014f8 <BLE_GetScannedDevices>:

void BLE_GetScannedDevices(scan_t* devices) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	*devices = scannedDevices;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a06      	ldr	r2, [pc, #24]	@ (800151c <BLE_GetScannedDevices+0x24>)
 8001504:	4618      	mov	r0, r3
 8001506:	4611      	mov	r1, r2
 8001508:	f44f 732b 	mov.w	r3, #684	@ 0x2ac
 800150c:	461a      	mov	r2, r3
 800150e:	f005 faa3 	bl	8006a58 <memcpy>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200000f8 	.word	0x200000f8

08001520 <PID_Create>:
#include <math.h>
#include "PID.h"

void PID_Create(PID_Controller_t *controller, float kp, float ki, float kd,
		int periodMs) {
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6178      	str	r0, [r7, #20]
 8001528:	ed87 0a04 	vstr	s0, [r7, #16]
 800152c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001530:	ed87 1a02 	vstr	s2, [r7, #8]
 8001534:	6079      	str	r1, [r7, #4]
	controller->Kp = kp;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	601a      	str	r2, [r3, #0]
	controller->Ki = ki;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	605a      	str	r2, [r3, #4]
	controller->Kd = kd;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	609a      	str	r2, [r3, #8]

	controller->setpoint = 0;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
	controller->measured = 0;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	611a      	str	r2, [r3, #16]

	controller->errorIntegral = 0;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	@ 0x24
	controller->errorDerivative = 0;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28

	controller->errorArray[PID_CURRENT] = 0;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
	controller->errorArray[PID_LAST] = 0;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	621a      	str	r2, [r3, #32]

	controller->periodMs = periodMs;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	62da      	str	r2, [r3, #44]	@ 0x2c

	// no saturation limits by default
	controller->maxOutput = INFINITY;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f04f 42ff 	mov.w	r2, #2139095040	@ 0x7f800000
 8001584:	615a      	str	r2, [r3, #20]
	controller->minOutput = -INFINITY;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <PID_Create+0x78>)
 800158a:	619a      	str	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	ff800000 	.word	0xff800000

0800159c <PID_SetSaturationLimits>:

void PID_SetSaturationLimits(PID_Controller_t *controller, float min, float max) {
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80015a8:	edc7 0a01 	vstr	s1, [r7, #4]
	controller->minOutput = min;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	619a      	str	r2, [r3, #24]
	controller->maxOutput = max;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	615a      	str	r2, [r3, #20]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <PID_SetSetpoint>:

void PID_SetSetpoint(PID_Controller_t *controller, float setpoint) {
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
	controller->setpoint = setpoint;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	60da      	str	r2, [r3, #12]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PID_ProcessInput>:

void PID_ProcessInput(PID_Controller_t *controller, float input) {
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	ed87 0a00 	vstr	s0, [r7]
	float error = controller->setpoint - input;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80015f4:	edd7 7a00 	vldr	s15, [r7]
 80015f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fc:	edc7 7a03 	vstr	s15, [r7, #12]

	controller->errorIntegral += (error * controller->periodMs)/2;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001612:	edd7 7a03 	vldr	s15, [r7, #12]
 8001616:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800161a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800161e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	controller->errorArray[PID_LAST] = controller->errorArray[PID_CURRENT];
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	621a      	str	r2, [r3, #32]
	controller->errorArray[PID_CURRENT] = error;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	61da      	str	r2, [r3, #28]

	controller->errorDerivative = (controller->errorArray[PID_CURRENT]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	ed93 7a07 	vldr	s14, [r3, #28]
			- controller->errorArray[PID_LAST]) / controller->periodMs;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edd3 7a08 	vldr	s15, [r3, #32]
 8001646:	ee77 6a67 	vsub.f32	s13, s14, s15
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
	controller->errorDerivative = (controller->errorArray[PID_CURRENT]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <startCompassCalibration>:

// Diferença entre o Polo Magnético e o Geográfico
float declination = 0;

// seta os parâmetros iniciais para calibração
void startCompassCalibration() {
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  xMax = yMax = -32768;
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <startCompassCalibration+0x34>)
 8001672:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001676:	801a      	strh	r2, [r3, #0]
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <startCompassCalibration+0x34>)
 800167a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <startCompassCalibration+0x38>)
 8001680:	801a      	strh	r2, [r3, #0]
  xMin = yMin = 32767;
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <startCompassCalibration+0x3c>)
 8001684:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001688:	801a      	strh	r2, [r3, #0]
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <startCompassCalibration+0x3c>)
 800168c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <startCompassCalibration+0x40>)
 8001692:	801a      	strh	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000792 	.word	0x20000792
 80016a4:	20000790 	.word	0x20000790
 80016a8:	2000078e 	.word	0x2000078e
 80016ac:	2000078c 	.word	0x2000078c

080016b0 <endCompassCalibration>:

// seta os parâmetros finais para calibração
void endCompassCalibration(){
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
	 // Offset para centralizar leituras em zero
	  offX = (xMax + xMin) / 2;
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <endCompassCalibration+0xd8>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b33      	ldr	r3, [pc, #204]	@ (800178c <endCompassCalibration+0xdc>)
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	4413      	add	r3, r2
 80016c6:	0fda      	lsrs	r2, r3, #31
 80016c8:	4413      	add	r3, r2
 80016ca:	105b      	asrs	r3, r3, #1
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <endCompassCalibration+0xe0>)
 80016d0:	801a      	strh	r2, [r3, #0]
	  offY = (yMax + yMin) / 2;
 80016d2:	4b30      	ldr	r3, [pc, #192]	@ (8001794 <endCompassCalibration+0xe4>)
 80016d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <endCompassCalibration+0xe8>)
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	4413      	add	r3, r2
 80016e2:	0fda      	lsrs	r2, r3, #31
 80016e4:	4413      	add	r3, r2
 80016e6:	105b      	asrs	r3, r3, #1
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <endCompassCalibration+0xec>)
 80016ec:	801a      	strh	r2, [r3, #0]

	  // Escala para ter a mesma variação nos dois eixos
	  int16_t varX = xMax - xMin;
 80016ee:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <endCompassCalibration+0xd8>)
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b25      	ldr	r3, [pc, #148]	@ (800178c <endCompassCalibration+0xdc>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	80fb      	strh	r3, [r7, #6]
	  int16_t varY = yMax - yMin;
 8001704:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <endCompassCalibration+0xe4>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <endCompassCalibration+0xe8>)
 800170e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001712:	b29b      	uxth	r3, r3
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	b29b      	uxth	r3, r3
 8001718:	80bb      	strh	r3, [r7, #4]
	  if (varY > varX) {
 800171a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	429a      	cmp	r2, r3
 8001724:	dd15      	ble.n	8001752 <endCompassCalibration+0xa2>
	    escY = 1.0;
 8001726:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <endCompassCalibration+0xf0>)
 8001728:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800172c:	601a      	str	r2, [r3, #0]
	    escX = (float) varY / varX;
 800172e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800173a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <endCompassCalibration+0xf4>)
 800174c:	edc3 7a00 	vstr	s15, [r3]
	  } else {
	    escX = 1.0;
	    escY = (float) varX / varY;
	  }
}
 8001750:	e014      	b.n	800177c <endCompassCalibration+0xcc>
	    escX = 1.0;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <endCompassCalibration+0xf4>)
 8001754:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001758:	601a      	str	r2, [r3, #0]
	    escY = (float) varX / varY;
 800175a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001766:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <endCompassCalibration+0xf0>)
 8001778:	edc3 7a00 	vstr	s15, [r3]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	20000790 	.word	0x20000790
 800178c:	2000078c 	.word	0x2000078c
 8001790:	20000794 	.word	0x20000794
 8001794:	20000792 	.word	0x20000792
 8001798:	2000078e 	.word	0x2000078e
 800179c:	20000796 	.word	0x20000796
 80017a0:	20000024 	.word	0x20000024
 80017a4:	20000020 	.word	0x20000020

080017a8 <readDirection>:

// mostra o ângulo para o qual o barco está apontando, sendo 0º o Norte
int16_t readDirection(void) {
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
  int16_t x, y, z;
  int16_t PI = 3.14;
 80017ae:	2303      	movs	r3, #3
 80017b0:	827b      	strh	r3, [r7, #18]

  HMC5883L_getHeading(&x, &y, &z);
 80017b2:	1cba      	adds	r2, r7, #2
 80017b4:	1d39      	adds	r1, r7, #4
 80017b6:	1dbb      	adds	r3, r7, #6
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fc1f 	bl	8000ffc <HMC5883L_getHeading>

  // Registra mínimo e máximo para a calibração
  if (x < xMin) {
 80017be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017c2:	4b7a      	ldr	r3, [pc, #488]	@ (80019ac <readDirection+0x204>)
 80017c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	da03      	bge.n	80017d4 <readDirection+0x2c>
    xMin = x;
 80017cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017d0:	4b76      	ldr	r3, [pc, #472]	@ (80019ac <readDirection+0x204>)
 80017d2:	801a      	strh	r2, [r3, #0]
  }
  if (xMax < x) {
 80017d4:	4b76      	ldr	r3, [pc, #472]	@ (80019b0 <readDirection+0x208>)
 80017d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017de:	429a      	cmp	r2, r3
 80017e0:	da03      	bge.n	80017ea <readDirection+0x42>
    xMax = x;
 80017e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017e6:	4b72      	ldr	r3, [pc, #456]	@ (80019b0 <readDirection+0x208>)
 80017e8:	801a      	strh	r2, [r3, #0]
  }
  if (y < yMin) {
 80017ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017ee:	4b71      	ldr	r3, [pc, #452]	@ (80019b4 <readDirection+0x20c>)
 80017f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	da03      	bge.n	8001800 <readDirection+0x58>
    yMin = y;
 80017f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017fc:	4b6d      	ldr	r3, [pc, #436]	@ (80019b4 <readDirection+0x20c>)
 80017fe:	801a      	strh	r2, [r3, #0]
  }
  if (yMax < y) {
 8001800:	4b6d      	ldr	r3, [pc, #436]	@ (80019b8 <readDirection+0x210>)
 8001802:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001806:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	da03      	bge.n	8001816 <readDirection+0x6e>
    yMax = y;
 800180e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001812:	4b69      	ldr	r3, [pc, #420]	@ (80019b8 <readDirection+0x210>)
 8001814:	801a      	strh	r2, [r3, #0]
  }

  // corrige e calcula o angulo em radianos
  float xC = (x - offX) * escX;
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	461a      	mov	r2, r3
 800181c:	4b67      	ldr	r3, [pc, #412]	@ (80019bc <readDirection+0x214>)
 800181e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182c:	4b64      	ldr	r3, [pc, #400]	@ (80019c0 <readDirection+0x218>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001836:	edc7 7a03 	vstr	s15, [r7, #12]
  float yC = (y - offY) * escY;
 800183a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800183e:	461a      	mov	r2, r3
 8001840:	4b60      	ldr	r3, [pc, #384]	@ (80019c4 <readDirection+0x21c>)
 8001842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001850:	4b5d      	ldr	r3, [pc, #372]	@ (80019c8 <readDirection+0x220>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185a:	edc7 7a02 	vstr	s15, [r7, #8]
  float angulo = atan2 (xC, yC) + declination;
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7fe fe92 	bl	8000588 <__aeabi_f2d>
 8001864:	4604      	mov	r4, r0
 8001866:	460d      	mov	r5, r1
 8001868:	68b8      	ldr	r0, [r7, #8]
 800186a:	f7fe fe8d 	bl	8000588 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	ec43 2b11 	vmov	d1, r2, r3
 8001876:	ec45 4b10 	vmov	d0, r4, r5
 800187a:	f005 fc7b 	bl	8007174 <atan2>
 800187e:	ec55 4b10 	vmov	r4, r5, d0
 8001882:	4b52      	ldr	r3, [pc, #328]	@ (80019cc <readDirection+0x224>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe7e 	bl	8000588 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	f7fe fd1a 	bl	80002cc <__adddf3>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f9a2 	bl	8000be8 <__aeabi_d2f>
 80018a4:	4603      	mov	r3, r0
 80018a6:	617b      	str	r3, [r7, #20]

  // Garante que está entre 0 e 2*PI
  if (angulo < 0) {
 80018a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d51c      	bpl.n	80018f0 <readDirection+0x148>
    angulo += 2.0 * PI;
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7fe fe66 	bl	8000588 <__aeabi_f2d>
 80018bc:	4604      	mov	r4, r0
 80018be:	460d      	mov	r5, r1
 80018c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe4d 	bl	8000564 <__aeabi_i2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	f7fe fcfd 	bl	80002cc <__adddf3>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4620      	mov	r0, r4
 80018d8:	4629      	mov	r1, r5
 80018da:	f7fe fcf7 	bl	80002cc <__adddf3>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f97f 	bl	8000be8 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e029      	b.n	8001944 <readDirection+0x19c>
  } else if (angulo >= 2 * PI) {
 80018f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	db1b      	blt.n	8001944 <readDirection+0x19c>
    angulo -= 2.0 * PI;
 800190c:	6978      	ldr	r0, [r7, #20]
 800190e:	f7fe fe3b 	bl	8000588 <__aeabi_f2d>
 8001912:	4604      	mov	r4, r0
 8001914:	460d      	mov	r5, r1
 8001916:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe22 	bl	8000564 <__aeabi_i2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	f7fe fcd2 	bl	80002cc <__adddf3>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fcca 	bl	80002c8 <__aeabi_dsub>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f954 	bl	8000be8 <__aeabi_d2f>
 8001940:	4603      	mov	r3, r0
 8001942:	617b      	str	r3, [r7, #20]
  }

  // Converte para graus
  return round (360 - ((angulo * 180.0) / PI));
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f7fe fe1f 	bl	8000588 <__aeabi_f2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <readDirection+0x228>)
 8001950:	f7fe fe72 	bl	8000638 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
 800195c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdff 	bl	8000564 <__aeabi_i2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4620      	mov	r0, r4
 800196c:	4629      	mov	r1, r5
 800196e:	f7fe ff8d 	bl	800088c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	f04f 0000 	mov.w	r0, #0
 800197a:	4916      	ldr	r1, [pc, #88]	@ (80019d4 <readDirection+0x22c>)
 800197c:	f7fe fca4 	bl	80002c8 <__aeabi_dsub>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	ec43 2b17 	vmov	d7, r2, r3
 8001988:	eeb0 0a47 	vmov.f32	s0, s14
 800198c:	eef0 0a67 	vmov.f32	s1, s15
 8001990:	f005 fc6e 	bl	8007270 <round>
 8001994:	ec53 2b10 	vmov	r2, r3, d0
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f8fc 	bl	8000b98 <__aeabi_d2iz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b21b      	sxth	r3, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bdb0      	pop	{r4, r5, r7, pc}
 80019ac:	2000078c 	.word	0x2000078c
 80019b0:	20000790 	.word	0x20000790
 80019b4:	2000078e 	.word	0x2000078e
 80019b8:	20000792 	.word	0x20000792
 80019bc:	20000794 	.word	0x20000794
 80019c0:	20000020 	.word	0x20000020
 80019c4:	20000796 	.word	0x20000796
 80019c8:	20000024 	.word	0x20000024
 80019cc:	20000798 	.word	0x20000798
 80019d0:	40668000 	.word	0x40668000
 80019d4:	40768000 	.word	0x40768000

080019d8 <processCompassCalibration>:

// realiza o processo de calibração
void processCompassCalibration(){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
    int pos = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]

    // Inicia o processo de calibração da bússola
    startCompassCalibration();
 80019e2:	f7ff fe43 	bl	800166c <startCompassCalibration>

//    HMC5883L_setMode(HMC5883L_MODE_CONTINUOUS);
    // Calcula o tempo final para a calibração (20 segundos a partir de agora)
    uint32_t tmpFim = HAL_GetTick() + 10000;
 80019e6:	f001 faad 	bl	8002f44 <HAL_GetTick>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80019f0:	3310      	adds	r3, #16
 80019f2:	603b      	str	r3, [r7, #0]

    // Loop de calibração
    while (HAL_GetTick() < tmpFim) {
 80019f4:	e00d      	b.n	8001a12 <processCompassCalibration+0x3a>
        // Lê a direção da bússola
    	readDirection();
 80019f6:	f7ff fed7 	bl	80017a8 <readDirection>

        // Incrementa a posição
        pos += 5;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3305      	adds	r3, #5
 80019fe:	607b      	str	r3, [r7, #4]
        if (pos == 360) {
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001a06:	d101      	bne.n	8001a0c <processCompassCalibration+0x34>
            pos = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
        }

        // Aguarda 10ms
        HAL_Delay(10);
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f001 faa5 	bl	8002f5c <HAL_Delay>
    while (HAL_GetTick() < tmpFim) {
 8001a12:	f001 fa97 	bl	8002f44 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d8eb      	bhi.n	80019f6 <processCompassCalibration+0x1e>
    }

    // Finaliza a calibração
    endCompassCalibration();
 8001a1e:	f7ff fe47 	bl	80016b0 <endCompassCalibration>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <changeDCMotorSpeed>:
 */

#include "boatEngine.h"

void changeDCMotorSpeed(uint16_t speed, TIM_HandleTypeDef* htim)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	6039      	str	r1, [r7, #0]
 8001a34:	80fb      	strh	r3, [r7, #6]
  if (speed > 16800)
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	f244 12a0 	movw	r2, #16800	@ 0x41a0
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d902      	bls.n	8001a46 <changeDCMotorSpeed+0x1c>
    speed = 16800;
 8001a40:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 8001a44:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, speed);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	88fa      	ldrh	r2, [r7, #6]
 8001a4c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <changeDCMotorDirection>:

void changeDCMotorDirection(char d)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if (d == 'f')
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b66      	cmp	r3, #102	@ 0x66
 8001a6a:	d13b      	bne.n	8001ae4 <changeDCMotorDirection+0x88>
  {
    // Vetor dos bits a serem enviados
    uint8_t data_bits[] = {0, 1, 0, 1, 0, 1, 0, 1};
 8001a6c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b68 <changeDCMotorDirection+0x10c>)
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a76:	e883 0003 	stmia.w	r3, {r0, r1}

    // Ativar troca dos valores
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a80:	483a      	ldr	r0, [pc, #232]	@ (8001b6c <changeDCMotorDirection+0x110>)
 8001a82:	f001 fd09 	bl	8003498 <HAL_GPIO_WritePin>

    // Loop para enviar os bits
    for (uint8_t i = 0; i < 8; i++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	77fb      	strb	r3, [r7, #31]
 8001a8a:	e01a      	b.n	8001ac2 <changeDCMotorDirection+0x66>
    {
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, data_bits[i]); // Configura o dado
 8001a8c:	7ffb      	ldrb	r3, [r7, #31]
 8001a8e:	3320      	adds	r3, #32
 8001a90:	443b      	add	r3, r7
 8001a92:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001a96:	461a      	mov	r2, r3
 8001a98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a9c:	4833      	ldr	r0, [pc, #204]	@ (8001b6c <changeDCMotorDirection+0x110>)
 8001a9e:	f001 fcfb 	bl	8003498 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);            // Pulso de clock
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	4832      	ldr	r0, [pc, #200]	@ (8001b70 <changeDCMotorDirection+0x114>)
 8001aa8:	f001 fcf6 	bl	8003498 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f001 fa55 	bl	8002f5c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // Finaliza o clock
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	482e      	ldr	r0, [pc, #184]	@ (8001b70 <changeDCMotorDirection+0x114>)
 8001ab8:	f001 fcee 	bl	8003498 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 8; i++)
 8001abc:	7ffb      	ldrb	r3, [r7, #31]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	77fb      	strb	r3, [r7, #31]
 8001ac2:	7ffb      	ldrb	r3, [r7, #31]
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	d9e1      	bls.n	8001a8c <changeDCMotorDirection+0x30>
    }

    // Atualizar saída
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2140      	movs	r1, #64	@ 0x40
 8001acc:	4827      	ldr	r0, [pc, #156]	@ (8001b6c <changeDCMotorDirection+0x110>)
 8001ace:	f001 fce3 	bl	8003498 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f001 fa42 	bl	8002f5c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2140      	movs	r1, #64	@ 0x40
 8001adc:	4823      	ldr	r0, [pc, #140]	@ (8001b6c <changeDCMotorDirection+0x110>)
 8001ade:	f001 fcdb 	bl	8003498 <HAL_GPIO_WritePin>
    // Atualizar saída
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
    HAL_Delay(1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
  }
}
 8001ae2:	e03d      	b.n	8001b60 <changeDCMotorDirection+0x104>
  else if (d == 't')
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b74      	cmp	r3, #116	@ 0x74
 8001ae8:	d13a      	bne.n	8001b60 <changeDCMotorDirection+0x104>
    uint8_t data_bits[] = {1, 0, 1, 0, 1, 0, 1, 0};
 8001aea:	4a22      	ldr	r2, [pc, #136]	@ (8001b74 <changeDCMotorDirection+0x118>)
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001af4:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001afe:	481b      	ldr	r0, [pc, #108]	@ (8001b6c <changeDCMotorDirection+0x110>)
 8001b00:	f001 fcca 	bl	8003498 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 8; i++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	77bb      	strb	r3, [r7, #30]
 8001b08:	e01a      	b.n	8001b40 <changeDCMotorDirection+0xe4>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, data_bits[i]); // Configura o dado
 8001b0a:	7fbb      	ldrb	r3, [r7, #30]
 8001b0c:	3320      	adds	r3, #32
 8001b0e:	443b      	add	r3, r7
 8001b10:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b1a:	4814      	ldr	r0, [pc, #80]	@ (8001b6c <changeDCMotorDirection+0x110>)
 8001b1c:	f001 fcbc 	bl	8003498 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);            // Pulso de clock
 8001b20:	2201      	movs	r2, #1
 8001b22:	2120      	movs	r1, #32
 8001b24:	4812      	ldr	r0, [pc, #72]	@ (8001b70 <changeDCMotorDirection+0x114>)
 8001b26:	f001 fcb7 	bl	8003498 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f001 fa16 	bl	8002f5c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); // Finaliza o clock
 8001b30:	2200      	movs	r2, #0
 8001b32:	2120      	movs	r1, #32
 8001b34:	480e      	ldr	r0, [pc, #56]	@ (8001b70 <changeDCMotorDirection+0x114>)
 8001b36:	f001 fcaf 	bl	8003498 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 8; i++)
 8001b3a:	7fbb      	ldrb	r3, [r7, #30]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	77bb      	strb	r3, [r7, #30]
 8001b40:	7fbb      	ldrb	r3, [r7, #30]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d9e1      	bls.n	8001b0a <changeDCMotorDirection+0xae>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001b46:	2201      	movs	r2, #1
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4808      	ldr	r0, [pc, #32]	@ (8001b6c <changeDCMotorDirection+0x110>)
 8001b4c:	f001 fca4 	bl	8003498 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f001 fa03 	bl	8002f5c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2140      	movs	r1, #64	@ 0x40
 8001b5a:	4804      	ldr	r0, [pc, #16]	@ (8001b6c <changeDCMotorDirection+0x110>)
 8001b5c:	f001 fc9c 	bl	8003498 <HAL_GPIO_WritePin>
}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	08008604 	.word	0x08008604
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400
 8001b74:	0800860c 	.word	0x0800860c

08001b78 <setPWM>:
 */

#include "boatServo.h"

void setPWM(TIM_HandleTypeDef* timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	460b      	mov	r3, r1
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	80bb      	strh	r3, [r7, #4]
  HAL_TIM_PWM_Stop(timer, channel); // stop generation of pwm
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f003 fc9f 	bl	80054d4 <HAL_TIM_PWM_Stop>
  TIM_OC_InitTypeDef sConfigOC;
  timer->Init.Period = period; // set the period duration
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Init(timer);   // reinititialise with new period value
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f003 fb81 	bl	80052a4 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba2:	2360      	movs	r3, #96	@ 0x60
 8001ba4:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = pulse; // set the pulse duration
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_TIM_PWM_ConfigChannel(timer, &sConfigOC, channel);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f003 fcfa 	bl	80055b4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(timer, channel); // start pwm generation
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f003 fbbe 	bl	8005344 <HAL_TIM_PWM_Start>
}
 8001bc8:	bf00      	nop
 8001bca:	3730      	adds	r7, #48	@ 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <setServoPosition>:

void setServoPosition(uint16_t angle, TIM_HandleTypeDef* htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	80fb      	strh	r3, [r7, #6]
  // Define pulse and angle limits
  uint16_t pulseMin = 44;
 8001bdc:	232c      	movs	r3, #44	@ 0x2c
 8001bde:	82fb      	strh	r3, [r7, #22]
  uint16_t pulseMax = 144;
 8001be0:	2390      	movs	r3, #144	@ 0x90
 8001be2:	82bb      	strh	r3, [r7, #20]
  uint16_t angleMin = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	827b      	strh	r3, [r7, #18]
  uint16_t angleMax = 180;
 8001be8:	23b4      	movs	r3, #180	@ 0xb4
 8001bea:	823b      	strh	r3, [r7, #16]

  // Ensure the angle is within limits
  if (angle > angleMax)
 8001bec:	88fa      	ldrh	r2, [r7, #6]
 8001bee:	8a3b      	ldrh	r3, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d901      	bls.n	8001bf8 <setServoPosition+0x28>
  {
    angle = angleMax;
 8001bf4:	8a3b      	ldrh	r3, [r7, #16]
 8001bf6:	80fb      	strh	r3, [r7, #6]
  }

  if (angle < angleMin)
 8001bf8:	88fa      	ldrh	r2, [r7, #6]
 8001bfa:	8a7b      	ldrh	r3, [r7, #18]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d201      	bcs.n	8001c04 <setServoPosition+0x34>
  {
    angle = angleMin;
 8001c00:	8a7b      	ldrh	r3, [r7, #18]
 8001c02:	80fb      	strh	r3, [r7, #6]
  }

  // Convert the angle to pulse value
  uint16_t pulse = pulseMin + ((pulseMax - pulseMin) * angle) / (angleMax - angleMin);
 8001c04:	8aba      	ldrh	r2, [r7, #20]
 8001c06:	8afb      	ldrh	r3, [r7, #22]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	88fa      	ldrh	r2, [r7, #6]
 8001c0c:	fb03 f202 	mul.w	r2, r3, r2
 8001c10:	8a39      	ldrh	r1, [r7, #16]
 8001c12:	8a7b      	ldrh	r3, [r7, #18]
 8001c14:	1acb      	subs	r3, r1, r3
 8001c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	8afb      	ldrh	r3, [r7, #22]
 8001c1e:	4413      	add	r3, r2
 8001c20:	81fb      	strh	r3, [r7, #14]

  setPWM(htim, TIM_CHANNEL_1, 12500, pulse);
 8001c22:	89fb      	ldrh	r3, [r7, #14]
 8001c24:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001c28:	2100      	movs	r1, #0
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f7ff ffa4 	bl	8001b78 <setPWM>
}
 8001c30:	bf00      	nop
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <DataFilterService_InitBuffer>:
 */

#include "data_filter_service.h"

void DataFilterService_InitBuffer(buffer_t* buffer)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	buffer->size = 0;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	62da      	str	r2, [r3, #44]	@ 0x2c
	buffer->sum = 0;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	@ 0x28
	buffer->position = 0;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <DataFilterService_MovingAverage>:

float DataFilterService_MovingAverage(buffer_t* buffer, float newValue) {
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	ed87 0a00 	vstr	s0, [r7]
	if (buffer->size <= MAX_BUFFER_SIZE) buffer->size++;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c70:	2b0a      	cmp	r3, #10
 8001c72:	d804      	bhi.n	8001c7e <DataFilterService_MovingAverage+0x1e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  buffer->sum += newValue - buffer->data[buffer->position];
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	edd7 6a00 	vldr	s13, [r7]
 8001c96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  buffer->data[buffer->position] = newValue;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	601a      	str	r2, [r3, #0]
  buffer->position = (buffer->position + 1) % MAX_BUFFER_SIZE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	1c59      	adds	r1, r3, #1
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <DataFilterService_MovingAverage+0x98>)
 8001cba:	fba3 2301 	umull	r2, r3, r3, r1
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	1aca      	subs	r2, r1, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	631a      	str	r2, [r3, #48]	@ 0x30
  return (float)buffer->sum / buffer->size;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ce4:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	cccccccd 	.word	0xcccccccd
 8001cfc:	00000000 	.word	0x00000000

08001d00 <LocationService_Init>:

float b1Distance = 0, b2Distance = 0, b3Distance = 0;
float b1OldDistance = -1, b2OldDistance = -1, b3OldDistance = -1;

void LocationService_Init(UART_HandleTypeDef *huart)
{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	DataFilterService_InitBuffer(&b1Buffer);
 8001d08:	4861      	ldr	r0, [pc, #388]	@ (8001e90 <LocationService_Init+0x190>)
 8001d0a:	f7ff ff95 	bl	8001c38 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b2Buffer);
 8001d0e:	4861      	ldr	r0, [pc, #388]	@ (8001e94 <LocationService_Init+0x194>)
 8001d10:	f7ff ff92 	bl	8001c38 <DataFilterService_InitBuffer>
	DataFilterService_InitBuffer(&b3Buffer);
 8001d14:	4860      	ldr	r0, [pc, #384]	@ (8001e98 <LocationService_Init+0x198>)
 8001d16:	f7ff ff8f 	bl	8001c38 <DataFilterService_InitBuffer>

	trilaterationCalcCPartial = - pow(slaveBeaconLocationB1.longitude, 2) + pow(slaveBeaconLocationB2.longitude, 2) - pow(slaveBeaconLocationB1.latitude, 2) + pow(slaveBeaconLocationB2.latitude, 2);
 8001d1a:	4b60      	ldr	r3, [pc, #384]	@ (8001e9c <LocationService_Init+0x19c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fc32 	bl	8000588 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8001e88 <LocationService_Init+0x188>
 8001d2c:	ec43 2b10 	vmov	d0, r2, r3
 8001d30:	f005 fa22 	bl	8007178 <pow>
 8001d34:	ec55 4b10 	vmov	r4, r5, d0
 8001d38:	4b59      	ldr	r3, [pc, #356]	@ (8001ea0 <LocationService_Init+0x1a0>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc23 	bl	8000588 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	ed9f 1b50 	vldr	d1, [pc, #320]	@ 8001e88 <LocationService_Init+0x188>
 8001d4a:	ec43 2b10 	vmov	d0, r2, r3
 8001d4e:	f005 fa13 	bl	8007178 <pow>
 8001d52:	ec53 2b10 	vmov	r2, r3, d0
 8001d56:	4620      	mov	r0, r4
 8001d58:	4629      	mov	r1, r5
 8001d5a:	f7fe fab5 	bl	80002c8 <__aeabi_dsub>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4614      	mov	r4, r2
 8001d64:	461d      	mov	r5, r3
 8001d66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea0 <LocationService_Init+0x1a0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fc0c 	bl	8000588 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	ed9f 1b44 	vldr	d1, [pc, #272]	@ 8001e88 <LocationService_Init+0x188>
 8001d78:	ec43 2b10 	vmov	d0, r2, r3
 8001d7c:	f005 f9fc 	bl	8007178 <pow>
 8001d80:	ec53 2b10 	vmov	r2, r3, d0
 8001d84:	4620      	mov	r0, r4
 8001d86:	4629      	mov	r1, r5
 8001d88:	f7fe fa9e 	bl	80002c8 <__aeabi_dsub>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <LocationService_Init+0x19c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbf5 	bl	8000588 <__aeabi_f2d>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8001e88 <LocationService_Init+0x188>
 8001da6:	ec43 2b10 	vmov	d0, r2, r3
 8001daa:	f005 f9e5 	bl	8007178 <pow>
 8001dae:	ec53 2b10 	vmov	r2, r3, d0
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	f7fe fa89 	bl	80002cc <__adddf3>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe ff11 	bl	8000be8 <__aeabi_d2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a36      	ldr	r2, [pc, #216]	@ (8001ea4 <LocationService_Init+0x1a4>)
 8001dca:	6013      	str	r3, [r2, #0]
	trilaterationCalcFPartial = - pow(slaveBeaconLocationB2.longitude, 2) + pow(slaveBeaconLocationB3.longitude, 2) - pow(slaveBeaconLocationB2.latitude, 2) + pow(slaveBeaconLocationB3.latitude, 2);
 8001dcc:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <LocationService_Init+0x1a8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbd9 	bl	8000588 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8001e88 <LocationService_Init+0x188>
 8001dde:	ec43 2b10 	vmov	d0, r2, r3
 8001de2:	f005 f9c9 	bl	8007178 <pow>
 8001de6:	ec55 4b10 	vmov	r4, r5, d0
 8001dea:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <LocationService_Init+0x19c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbca 	bl	8000588 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8001e88 <LocationService_Init+0x188>
 8001dfc:	ec43 2b10 	vmov	d0, r2, r3
 8001e00:	f005 f9ba 	bl	8007178 <pow>
 8001e04:	ec53 2b10 	vmov	r2, r3, d0
 8001e08:	4620      	mov	r0, r4
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	f7fe fa5c 	bl	80002c8 <__aeabi_dsub>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4614      	mov	r4, r2
 8001e16:	461d      	mov	r5, r3
 8001e18:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <LocationService_Init+0x19c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fbb3 	bl	8000588 <__aeabi_f2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001e88 <LocationService_Init+0x188>
 8001e2a:	ec43 2b10 	vmov	d0, r2, r3
 8001e2e:	f005 f9a3 	bl	8007178 <pow>
 8001e32:	ec53 2b10 	vmov	r2, r3, d0
 8001e36:	4620      	mov	r0, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7fe fa45 	bl	80002c8 <__aeabi_dsub>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4614      	mov	r4, r2
 8001e44:	461d      	mov	r5, r3
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <LocationService_Init+0x1a8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb9c 	bl	8000588 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8001e88 <LocationService_Init+0x188>
 8001e58:	ec43 2b10 	vmov	d0, r2, r3
 8001e5c:	f005 f98c 	bl	8007178 <pow>
 8001e60:	ec53 2b10 	vmov	r2, r3, d0
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fa30 	bl	80002cc <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7fe feb8 	bl	8000be8 <__aeabi_d2f>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001eac <LocationService_Init+0x1ac>)
 8001e7c:	6013      	str	r3, [r2, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdb0      	pop	{r4, r5, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40000000 	.word	0x40000000
 8001e90:	2000079c 	.word	0x2000079c
 8001e94:	200007d0 	.word	0x200007d0
 8001e98:	20000804 	.word	0x20000804
 8001e9c:	20000030 	.word	0x20000030
 8001ea0:	20000028 	.word	0x20000028
 8001ea4:	20000840 	.word	0x20000840
 8001ea8:	20000038 	.word	0x20000038
 8001eac:	20000844 	.word	0x20000844

08001eb0 <LocationService_CalculateDistance>:

float LocationService_CalculateDistance(int rssi)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
//	float value = pow(10, ((MEASURED_POWER - rssi) / 20));
	if (rssi == 0) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <LocationService_CalculateDistance+0x12>
		return -1.0f; // Retorna -1 como erro
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <LocationService_CalculateDistance+0x70>)
 8001ec0:	e021      	b.n	8001f06 <LocationService_CalculateDistance+0x56>
	}

	// Calcula a distância usando a fórmula
	float exponent = (MEASURED_POWER - rssi) / 20.0f;
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	f06f 0338 	mvn.w	r3, #56	@ 0x38
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed2:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eda:	edc7 7a03 	vstr	s15, [r7, #12]
	float distance = pow(10.0f, exponent);
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f7fe fb52 	bl	8000588 <__aeabi_f2d>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	ec43 2b11 	vmov	d1, r2, r3
 8001eec:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001f18 <LocationService_CalculateDistance+0x68>
 8001ef0:	f005 f942 	bl	8007178 <pow>
 8001ef4:	ec53 2b10 	vmov	r2, r3, d0
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fe74 	bl	8000be8 <__aeabi_d2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	60bb      	str	r3, [r7, #8]

	return distance;
 8001f04:	68bb      	ldr	r3, [r7, #8]
}
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	f3af 8000 	nop.w
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	40240000 	.word	0x40240000
 8001f20:	bf800000 	.word	0xbf800000
 8001f24:	00000000 	.word	0x00000000

08001f28 <LocationService_UpdateLocation>:

void LocationService_UpdateLocation(UART_HandleTypeDef *huart)
{
 8001f28:	b5b0      	push	{r4, r5, r7, lr}
 8001f2a:	f5ad 7d36 	sub.w	sp, sp, #728	@ 0x2d8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001f34:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8001f38:	6018      	str	r0, [r3, #0]
	scan_t scan;
	memset(&scan, 0, sizeof(scan_t));
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f004 fcfd 	bl	8006944 <memset>

	BLE_ScanDevices(huart);
 8001f4a:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001f4e:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	f7ff f94e 	bl	80011f4 <BLE_ScanDevices>
	BLE_GetScannedDevices(&scan);
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff facb 	bl	80014f8 <BLE_GetScannedDevices>

	for(size_t i = 0; i < scan.size; i++) {
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001f68:	e094      	b.n	8002094 <LocationService_UpdateLocation+0x16c>
		if (i >= MAX_DEVICE_LIST) {
 8001f6a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001f6e:	2b09      	cmp	r3, #9
 8001f70:	f200 809c 	bhi.w	80020ac <LocationService_UpdateLocation+0x184>
			break; // Protege contra acesso fora dos limites
		}

		char* deviceName = scan.devices[i].name;
 8001f74:	f107 0108 	add.w	r1, r7, #8
 8001f78:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
		int rssi = scan.devices[i].rssi;
 8001f8a:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001f8e:	f5a3 7134 	sub.w	r1, r3, #720	@ 0x2d0
 8001f92:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3340      	adds	r3, #64	@ 0x40
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc

		if(strstr(deviceName, SLAVE_BEACON_NAME_B1) != NULL) {
 8001fa8:	49d3      	ldr	r1, [pc, #844]	@ (80022f8 <LocationService_UpdateLocation+0x3d0>)
 8001faa:	f8d7 02d0 	ldr.w	r0, [r7, #720]	@ 0x2d0
 8001fae:	f004 fd00 	bl	80069b2 <strstr>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01d      	beq.n	8001ff4 <LocationService_UpdateLocation+0xcc>
			b1OldDistance = b1Distance;
 8001fb8:	4bd0      	ldr	r3, [pc, #832]	@ (80022fc <LocationService_UpdateLocation+0x3d4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4ad0      	ldr	r2, [pc, #832]	@ (8002300 <LocationService_UpdateLocation+0x3d8>)
 8001fbe:	6013      	str	r3, [r2, #0]
			b1Distance = rssi;
 8001fc0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fcc:	4bcb      	ldr	r3, [pc, #812]	@ (80022fc <LocationService_UpdateLocation+0x3d4>)
 8001fce:	edc3 7a00 	vstr	s15, [r3]
			b1Distance = DataFilterService_MovingAverage(&b1Buffer, LocationService_CalculateDistance(rssi));
 8001fd2:	f8d7 02cc 	ldr.w	r0, [r7, #716]	@ 0x2cc
 8001fd6:	f7ff ff6b 	bl	8001eb0 <LocationService_CalculateDistance>
 8001fda:	eef0 7a40 	vmov.f32	s15, s0
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	48c8      	ldr	r0, [pc, #800]	@ (8002304 <LocationService_UpdateLocation+0x3dc>)
 8001fe4:	f7ff fe3c 	bl	8001c60 <DataFilterService_MovingAverage>
 8001fe8:	eef0 7a40 	vmov.f32	s15, s0
 8001fec:	4bc3      	ldr	r3, [pc, #780]	@ (80022fc <LocationService_UpdateLocation+0x3d4>)
 8001fee:	edc3 7a00 	vstr	s15, [r3]
 8001ff2:	e04a      	b.n	800208a <LocationService_UpdateLocation+0x162>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B2) != NULL) {
 8001ff4:	49c4      	ldr	r1, [pc, #784]	@ (8002308 <LocationService_UpdateLocation+0x3e0>)
 8001ff6:	f8d7 02d0 	ldr.w	r0, [r7, #720]	@ 0x2d0
 8001ffa:	f004 fcda 	bl	80069b2 <strstr>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01d      	beq.n	8002040 <LocationService_UpdateLocation+0x118>
			b2OldDistance = b2Distance;
 8002004:	4bc1      	ldr	r3, [pc, #772]	@ (800230c <LocationService_UpdateLocation+0x3e4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4ac1      	ldr	r2, [pc, #772]	@ (8002310 <LocationService_UpdateLocation+0x3e8>)
 800200a:	6013      	str	r3, [r2, #0]
			b2Distance = rssi;
 800200c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002018:	4bbc      	ldr	r3, [pc, #752]	@ (800230c <LocationService_UpdateLocation+0x3e4>)
 800201a:	edc3 7a00 	vstr	s15, [r3]
			b2Distance = DataFilterService_MovingAverage(&b2Buffer, LocationService_CalculateDistance(rssi));
 800201e:	f8d7 02cc 	ldr.w	r0, [r7, #716]	@ 0x2cc
 8002022:	f7ff ff45 	bl	8001eb0 <LocationService_CalculateDistance>
 8002026:	eef0 7a40 	vmov.f32	s15, s0
 800202a:	eeb0 0a67 	vmov.f32	s0, s15
 800202e:	48b9      	ldr	r0, [pc, #740]	@ (8002314 <LocationService_UpdateLocation+0x3ec>)
 8002030:	f7ff fe16 	bl	8001c60 <DataFilterService_MovingAverage>
 8002034:	eef0 7a40 	vmov.f32	s15, s0
 8002038:	4bb4      	ldr	r3, [pc, #720]	@ (800230c <LocationService_UpdateLocation+0x3e4>)
 800203a:	edc3 7a00 	vstr	s15, [r3]
 800203e:	e024      	b.n	800208a <LocationService_UpdateLocation+0x162>
		} else if(strstr(deviceName, SLAVE_BEACON_NAME_B3) != NULL) {
 8002040:	49b5      	ldr	r1, [pc, #724]	@ (8002318 <LocationService_UpdateLocation+0x3f0>)
 8002042:	f8d7 02d0 	ldr.w	r0, [r7, #720]	@ 0x2d0
 8002046:	f004 fcb4 	bl	80069b2 <strstr>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01c      	beq.n	800208a <LocationService_UpdateLocation+0x162>
			b3OldDistance = b3Distance;
 8002050:	4bb2      	ldr	r3, [pc, #712]	@ (800231c <LocationService_UpdateLocation+0x3f4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4ab2      	ldr	r2, [pc, #712]	@ (8002320 <LocationService_UpdateLocation+0x3f8>)
 8002056:	6013      	str	r3, [r2, #0]
			b3Distance = rssi;
 8002058:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002064:	4bad      	ldr	r3, [pc, #692]	@ (800231c <LocationService_UpdateLocation+0x3f4>)
 8002066:	edc3 7a00 	vstr	s15, [r3]
			b3Distance = DataFilterService_MovingAverage(&b3Buffer, LocationService_CalculateDistance(rssi));
 800206a:	f8d7 02cc 	ldr.w	r0, [r7, #716]	@ 0x2cc
 800206e:	f7ff ff1f 	bl	8001eb0 <LocationService_CalculateDistance>
 8002072:	eef0 7a40 	vmov.f32	s15, s0
 8002076:	eeb0 0a67 	vmov.f32	s0, s15
 800207a:	48aa      	ldr	r0, [pc, #680]	@ (8002324 <LocationService_UpdateLocation+0x3fc>)
 800207c:	f7ff fdf0 	bl	8001c60 <DataFilterService_MovingAverage>
 8002080:	eef0 7a40 	vmov.f32	s15, s0
 8002084:	4ba5      	ldr	r3, [pc, #660]	@ (800231c <LocationService_UpdateLocation+0x3f4>)
 8002086:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < scan.size; i++) {
 800208a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800208e:	3301      	adds	r3, #1
 8002090:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8002094:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8002098:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 800209c:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 80020a0:	f8d7 22d4 	ldr.w	r2, [r7, #724]	@ 0x2d4
 80020a4:	429a      	cmp	r2, r3
 80020a6:	f4ff af60 	bcc.w	8001f6a <LocationService_UpdateLocation+0x42>
 80020aa:	e000      	b.n	80020ae <LocationService_UpdateLocation+0x186>
			break; // Protege contra acesso fora dos limites
 80020ac:	bf00      	nop
		}
	}

	if (b1Distance != b1OldDistance && b2Distance != b2OldDistance && b3Distance != b3OldDistance) {
 80020ae:	4b93      	ldr	r3, [pc, #588]	@ (80022fc <LocationService_UpdateLocation+0x3d4>)
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	4b92      	ldr	r3, [pc, #584]	@ (8002300 <LocationService_UpdateLocation+0x3d8>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80020be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c2:	f000 810e 	beq.w	80022e2 <LocationService_UpdateLocation+0x3ba>
 80020c6:	4b91      	ldr	r3, [pc, #580]	@ (800230c <LocationService_UpdateLocation+0x3e4>)
 80020c8:	ed93 7a00 	vldr	s14, [r3]
 80020cc:	4b90      	ldr	r3, [pc, #576]	@ (8002310 <LocationService_UpdateLocation+0x3e8>)
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	f000 8102 	beq.w	80022e2 <LocationService_UpdateLocation+0x3ba>
 80020de:	4b8f      	ldr	r3, [pc, #572]	@ (800231c <LocationService_UpdateLocation+0x3f4>)
 80020e0:	ed93 7a00 	vldr	s14, [r3]
 80020e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002320 <LocationService_UpdateLocation+0x3f8>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	f000 80f6 	beq.w	80022e2 <LocationService_UpdateLocation+0x3ba>
		float trilaterationCalcA = -2*slaveBeaconLocationB1.longitude + 2*slaveBeaconLocationB2.longitude;
 80020f6:	4b8c      	ldr	r3, [pc, #560]	@ (8002328 <LocationService_UpdateLocation+0x400>)
 80020f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80020fc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8002100:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002104:	4b89      	ldr	r3, [pc, #548]	@ (800232c <LocationService_UpdateLocation+0x404>)
 8002106:	edd3 7a01 	vldr	s15, [r3, #4]
 800210a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	edc7 7ab2 	vstr	s15, [r7, #712]	@ 0x2c8
		float trilaterationCalcB = -2*slaveBeaconLocationB1.latitude + 2*slaveBeaconLocationB2.latitude;
 8002116:	4b84      	ldr	r3, [pc, #528]	@ (8002328 <LocationService_UpdateLocation+0x400>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8002120:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002124:	4b81      	ldr	r3, [pc, #516]	@ (800232c <LocationService_UpdateLocation+0x404>)
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	edc7 7ab1 	vstr	s15, [r7, #708]	@ 0x2c4
		float trilaterationCalcC = pow(b1Distance, 2) - pow(b2Distance, 2) + trilaterationCalcCPartial;
 8002136:	4b71      	ldr	r3, [pc, #452]	@ (80022fc <LocationService_UpdateLocation+0x3d4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fa24 	bl	8000588 <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 80022f0 <LocationService_UpdateLocation+0x3c8>
 8002148:	ec43 2b10 	vmov	d0, r2, r3
 800214c:	f005 f814 	bl	8007178 <pow>
 8002150:	ec55 4b10 	vmov	r4, r5, d0
 8002154:	4b6d      	ldr	r3, [pc, #436]	@ (800230c <LocationService_UpdateLocation+0x3e4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fa15 	bl	8000588 <__aeabi_f2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 80022f0 <LocationService_UpdateLocation+0x3c8>
 8002166:	ec43 2b10 	vmov	d0, r2, r3
 800216a:	f005 f805 	bl	8007178 <pow>
 800216e:	ec53 2b10 	vmov	r2, r3, d0
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f7fe f8a7 	bl	80002c8 <__aeabi_dsub>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4614      	mov	r4, r2
 8002180:	461d      	mov	r5, r3
 8002182:	4b6b      	ldr	r3, [pc, #428]	@ (8002330 <LocationService_UpdateLocation+0x408>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9fe 	bl	8000588 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4620      	mov	r0, r4
 8002192:	4629      	mov	r1, r5
 8002194:	f7fe f89a 	bl	80002cc <__adddf3>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fd22 	bl	8000be8 <__aeabi_d2f>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
		float trilaterationCalcD = -2*slaveBeaconLocationB2.longitude + 2*slaveBeaconLocationB3.longitude;
 80021aa:	4b60      	ldr	r3, [pc, #384]	@ (800232c <LocationService_UpdateLocation+0x404>)
 80021ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80021b0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80021b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002334 <LocationService_UpdateLocation+0x40c>)
 80021ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80021be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c6:	edc7 7aaf 	vstr	s15, [r7, #700]	@ 0x2bc
		float trilaterationCalcE = -2*slaveBeaconLocationB2.latitude + 2*slaveBeaconLocationB3.latitude;
 80021ca:	4b58      	ldr	r3, [pc, #352]	@ (800232c <LocationService_UpdateLocation+0x404>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80021d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021d8:	4b56      	ldr	r3, [pc, #344]	@ (8002334 <LocationService_UpdateLocation+0x40c>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e6:	edc7 7aae 	vstr	s15, [r7, #696]	@ 0x2b8
		float trilaterationCalcF = pow(b2Distance, 2) - pow(b3Distance, 2) + trilaterationCalcFPartial;
 80021ea:	4b48      	ldr	r3, [pc, #288]	@ (800230c <LocationService_UpdateLocation+0x3e4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f9ca 	bl	8000588 <__aeabi_f2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	ed9f 1b3d 	vldr	d1, [pc, #244]	@ 80022f0 <LocationService_UpdateLocation+0x3c8>
 80021fc:	ec43 2b10 	vmov	d0, r2, r3
 8002200:	f004 ffba 	bl	8007178 <pow>
 8002204:	ec55 4b10 	vmov	r4, r5, d0
 8002208:	4b44      	ldr	r3, [pc, #272]	@ (800231c <LocationService_UpdateLocation+0x3f4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f9bb 	bl	8000588 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 80022f0 <LocationService_UpdateLocation+0x3c8>
 800221a:	ec43 2b10 	vmov	d0, r2, r3
 800221e:	f004 ffab 	bl	8007178 <pow>
 8002222:	ec53 2b10 	vmov	r2, r3, d0
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f7fe f84d 	bl	80002c8 <__aeabi_dsub>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4614      	mov	r4, r2
 8002234:	461d      	mov	r5, r3
 8002236:	4b40      	ldr	r3, [pc, #256]	@ (8002338 <LocationService_UpdateLocation+0x410>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f9a4 	bl	8000588 <__aeabi_f2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4620      	mov	r0, r4
 8002246:	4629      	mov	r1, r5
 8002248:	f7fe f840 	bl	80002cc <__adddf3>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f7fe fcc8 	bl	8000be8 <__aeabi_d2f>
 8002258:	4603      	mov	r3, r0
 800225a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4

		masterLocation.longitude = (trilaterationCalcC*trilaterationCalcE - trilaterationCalcF*trilaterationCalcB)/(trilaterationCalcE*trilaterationCalcA - trilaterationCalcB*trilaterationCalcD);
 800225e:	ed97 7ab0 	vldr	s14, [r7, #704]	@ 0x2c0
 8002262:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 8002266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800226a:	edd7 6aad 	vldr	s13, [r7, #692]	@ 0x2b4
 800226e:	edd7 7ab1 	vldr	s15, [r7, #708]	@ 0x2c4
 8002272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002276:	ee77 6a67 	vsub.f32	s13, s14, s15
 800227a:	ed97 7aae 	vldr	s14, [r7, #696]	@ 0x2b8
 800227e:	edd7 7ab2 	vldr	s15, [r7, #712]	@ 0x2c8
 8002282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002286:	ed97 6ab1 	vldr	s12, [r7, #708]	@ 0x2c4
 800228a:	edd7 7aaf 	vldr	s15, [r7, #700]	@ 0x2bc
 800228e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002292:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229a:	4b28      	ldr	r3, [pc, #160]	@ (800233c <LocationService_UpdateLocation+0x414>)
 800229c:	edc3 7a01 	vstr	s15, [r3, #4]
		masterLocation.latitude= (trilaterationCalcC*trilaterationCalcD - trilaterationCalcA*trilaterationCalcF)/(trilaterationCalcB*trilaterationCalcD - trilaterationCalcA*trilaterationCalcE);
 80022a0:	ed97 7ab0 	vldr	s14, [r7, #704]	@ 0x2c0
 80022a4:	edd7 7aaf 	vldr	s15, [r7, #700]	@ 0x2bc
 80022a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ac:	edd7 6ab2 	vldr	s13, [r7, #712]	@ 0x2c8
 80022b0:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 80022b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022bc:	ed97 7ab1 	vldr	s14, [r7, #708]	@ 0x2c4
 80022c0:	edd7 7aaf 	vldr	s15, [r7, #700]	@ 0x2bc
 80022c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c8:	ed97 6ab2 	vldr	s12, [r7, #712]	@ 0x2c8
 80022cc:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 80022d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022dc:	4b17      	ldr	r3, [pc, #92]	@ (800233c <LocationService_UpdateLocation+0x414>)
 80022de:	edc3 7a00 	vstr	s15, [r3]
	}

}
 80022e2:	bf00      	nop
 80022e4:	f507 7736 	add.w	r7, r7, #728	@ 0x2d8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	f3af 8000 	nop.w
 80022f0:	00000000 	.word	0x00000000
 80022f4:	40000000 	.word	0x40000000
 80022f8:	08008614 	.word	0x08008614
 80022fc:	20000848 	.word	0x20000848
 8002300:	20000040 	.word	0x20000040
 8002304:	2000079c 	.word	0x2000079c
 8002308:	08008620 	.word	0x08008620
 800230c:	2000084c 	.word	0x2000084c
 8002310:	20000044 	.word	0x20000044
 8002314:	200007d0 	.word	0x200007d0
 8002318:	0800862c 	.word	0x0800862c
 800231c:	20000850 	.word	0x20000850
 8002320:	20000048 	.word	0x20000048
 8002324:	20000804 	.word	0x20000804
 8002328:	20000028 	.word	0x20000028
 800232c:	20000030 	.word	0x20000030
 8002330:	20000840 	.word	0x20000840
 8002334:	20000038 	.word	0x20000038
 8002338:	20000844 	.word	0x20000844
 800233c:	20000838 	.word	0x20000838

08002340 <LocationService_GetLocation>:

location_t LocationService_GetLocation()
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
	return masterLocation;
 8002346:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <LocationService_GetLocation+0x34>)
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002350:	e883 0003 	stmia.w	r3, {r0, r1}
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	ee07 2a10 	vmov	s14, r2
 800235c:	ee07 3a90 	vmov	s15, r3
}
 8002360:	eeb0 0a47 	vmov.f32	s0, s14
 8002364:	eef0 0a67 	vmov.f32	s1, s15
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000838 	.word	0x20000838

08002378 <LocationService_GetArrivalAngle>:

float LocationService_GetArrivalAngle()
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0

	float deltaX = masterLocation.longitude - slaveBeaconLocationB2.longitude;
 800237e:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <LocationService_GetArrivalAngle+0x9c>)
 8002380:	ed93 7a01 	vldr	s14, [r3, #4]
 8002384:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <LocationService_GetArrivalAngle+0xa0>)
 8002386:	edd3 7a01 	vldr	s15, [r3, #4]
 800238a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238e:	edc7 7a02 	vstr	s15, [r7, #8]
	float deltaY = masterLocation.latitude  - slaveBeaconLocationB2.latitude;
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <LocationService_GetArrivalAngle+0x9c>)
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <LocationService_GetArrivalAngle+0xa0>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a2:	edc7 7a01 	vstr	s15, [r7, #4]

	    // Calcula o ângulo em radianos usando atan2(Y, X)
	    float angleRadians = atan2(deltaY, deltaX);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe f8ee 	bl	8000588 <__aeabi_f2d>
 80023ac:	4604      	mov	r4, r0
 80023ae:	460d      	mov	r5, r1
 80023b0:	68b8      	ldr	r0, [r7, #8]
 80023b2:	f7fe f8e9 	bl	8000588 <__aeabi_f2d>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	ec43 2b11 	vmov	d1, r2, r3
 80023be:	ec45 4b10 	vmov	d0, r4, r5
 80023c2:	f004 fed7 	bl	8007174 <atan2>
 80023c6:	ec53 2b10 	vmov	r2, r3, d0
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f7fe fc0b 	bl	8000be8 <__aeabi_d2f>
 80023d2:	4603      	mov	r3, r0
 80023d4:	603b      	str	r3, [r7, #0]

	    // Converte para graus
	    float angleDegrees = angleRadians * (180.0f / (float)M_PI);
 80023d6:	edd7 7a00 	vldr	s15, [r7]
 80023da:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800241c <LocationService_GetArrivalAngle+0xa4>
 80023de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e2:	edc7 7a03 	vstr	s15, [r7, #12]

	    // Ajusta para ficar no intervalo [0, 360)
	    if (angleDegrees < 0.0f) {
 80023e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f2:	d507      	bpl.n	8002404 <LocationService_GetArrivalAngle+0x8c>
	        angleDegrees += 360.0f;
 80023f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023f8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002420 <LocationService_GetArrivalAngle+0xa8>
 80023fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002400:	edc7 7a03 	vstr	s15, [r7, #12]
	    }

	    return angleDegrees;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	ee07 3a90 	vmov	s15, r3
//	return atan((masterLocation.longitude - slaveBeaconLocationB2.longitude) / (masterLocation.latitude - slaveBeaconLocationB2.latitude)) * 180 / 3.14159265359 + 180;
}
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	20000838 	.word	0x20000838
 8002418:	20000030 	.word	0x20000030
 800241c:	42652ee0 	.word	0x42652ee0
 8002420:	43b40000 	.word	0x43b40000

08002424 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002428:	f000 fd26 	bl	8002e78 <HAL_Init>
  /* USER CODE BEGIN Init */;

//  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800242c:	f000 f8d6 	bl	80025dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002430:	f000 fa6a 	bl	8002908 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002434:	f000 f932 	bl	800269c <MX_I2C1_Init>
  MX_TIM4_Init();
 8002438:	f000 f9b8 	bl	80027ac <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800243c:	f000 fa10 	bl	8002860 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002440:	f000 fa38 	bl	80028b4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002444:	f000 f958 	bl	80026f8 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  PID_Create(&servoPidController, kp, ki, kd, CYCLE_PERIOD_MS);
 8002448:	4b53      	ldr	r3, [pc, #332]	@ (8002598 <main+0x174>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	4b53      	ldr	r3, [pc, #332]	@ (800259c <main+0x178>)
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	4b52      	ldr	r3, [pc, #328]	@ (80025a0 <main+0x17c>)
 8002456:	edd3 6a00 	vldr	s13, [r3]
 800245a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800245e:	eeb0 1a66 	vmov.f32	s2, s13
 8002462:	eef0 0a47 	vmov.f32	s1, s14
 8002466:	eeb0 0a67 	vmov.f32	s0, s15
 800246a:	484e      	ldr	r0, [pc, #312]	@ (80025a4 <main+0x180>)
 800246c:	f7ff f858 	bl	8001520 <PID_Create>
  PID_SetSaturationLimits(&servoPidController, servoMin, servoMax);
 8002470:	4b4d      	ldr	r3, [pc, #308]	@ (80025a8 <main+0x184>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	4b4d      	ldr	r3, [pc, #308]	@ (80025ac <main+0x188>)
 8002478:	ed93 7a00 	vldr	s14, [r3]
 800247c:	eef0 0a47 	vmov.f32	s1, s14
 8002480:	eeb0 0a67 	vmov.f32	s0, s15
 8002484:	4847      	ldr	r0, [pc, #284]	@ (80025a4 <main+0x180>)
 8002486:	f7ff f889 	bl	800159c <PID_SetSaturationLimits>
  HMC5883L_initialize();
 800248a:	f7fe fd75 	bl	8000f78 <HMC5883L_initialize>
  I2Cdev_init(&hi2c1);
 800248e:	4848      	ldr	r0, [pc, #288]	@ (80025b0 <main+0x18c>)
 8002490:	f7fe fdfa 	bl	8001088 <I2Cdev_init>
  LocationService_Init(&huart3);
 8002494:	4847      	ldr	r0, [pc, #284]	@ (80025b4 <main+0x190>)
 8002496:	f7ff fc33 	bl	8001d00 <LocationService_Init>
  setServoPosition(180, &htim4);
 800249a:	4947      	ldr	r1, [pc, #284]	@ (80025b8 <main+0x194>)
 800249c:	20b4      	movs	r0, #180	@ 0xb4
 800249e:	f7ff fb97 	bl	8001bd0 <setServoPosition>
  processCompassCalibration();
 80024a2:	f7ff fa99 	bl	80019d8 <processCompassCalibration>
  HAL_Delay(13000);
 80024a6:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 80024aa:	f000 fd57 	bl	8002f5c <HAL_Delay>
  changeDCMotorDirection('t');
 80024ae:	2074      	movs	r0, #116	@ 0x74
 80024b0:	f7ff fad4 	bl	8001a5c <changeDCMotorDirection>
  changeDCMotorSpeed(16800, &htim3);
 80024b4:	4941      	ldr	r1, [pc, #260]	@ (80025bc <main+0x198>)
 80024b6:	f244 10a0 	movw	r0, #16800	@ 0x41a0
 80024ba:	f7ff fab6 	bl	8001a2a <changeDCMotorSpeed>
  setServoPosition(90, &htim4);
 80024be:	493e      	ldr	r1, [pc, #248]	@ (80025b8 <main+0x194>)
 80024c0:	205a      	movs	r0, #90	@ 0x5a
 80024c2:	f7ff fb85 	bl	8001bd0 <setServoPosition>
  HAL_Delay(45000);
 80024c6:	f64a 70c8 	movw	r0, #45000	@ 0xafc8
 80024ca:	f000 fd47 	bl	8002f5c <HAL_Delay>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		iniciou += 1;
 80024ce:	4b3c      	ldr	r3, [pc, #240]	@ (80025c0 <main+0x19c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a3a      	ldr	r2, [pc, #232]	@ (80025c0 <main+0x19c>)
 80024d6:	6013      	str	r3, [r2, #0]
		LocationService_UpdateLocation(&huart3);
 80024d8:	4836      	ldr	r0, [pc, #216]	@ (80025b4 <main+0x190>)
 80024da:	f7ff fd25 	bl	8001f28 <LocationService_UpdateLocation>
		location = LocationService_GetLocation();
 80024de:	f7ff ff2f 	bl	8002340 <LocationService_GetLocation>
 80024e2:	eeb0 7a40 	vmov.f32	s14, s0
 80024e6:	eef0 7a60 	vmov.f32	s15, s1
 80024ea:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <main+0x1a0>)
 80024ec:	ed83 7a00 	vstr	s14, [r3]
 80024f0:	edc3 7a01 	vstr	s15, [r3, #4]
		direction = readDirection();
 80024f4:	f7ff f958 	bl	80017a8 <readDirection>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b32      	ldr	r3, [pc, #200]	@ (80025c8 <main+0x1a4>)
 80024fe:	801a      	strh	r2, [r3, #0]
		arrivalAngle = LocationService_GetArrivalAngle()+120;
 8002500:	f7ff ff3a 	bl	8002378 <LocationService_GetArrivalAngle>
 8002504:	eef0 7a40 	vmov.f32	s15, s0
 8002508:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80025cc <main+0x1a8>
 800250c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002510:	4b2f      	ldr	r3, [pc, #188]	@ (80025d0 <main+0x1ac>)
 8002512:	edc3 7a00 	vstr	s15, [r3]

		PID_SetSetpoint(&servoPidController, arrivalAngle);
 8002516:	4b2e      	ldr	r3, [pc, #184]	@ (80025d0 <main+0x1ac>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	eeb0 0a67 	vmov.f32	s0, s15
 8002520:	4820      	ldr	r0, [pc, #128]	@ (80025a4 <main+0x180>)
 8002522:	f7ff f84f 	bl	80015c4 <PID_SetSetpoint>
		PID_ProcessInput(&servoPidController, direction);
 8002526:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <main+0x1a4>)
 8002528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002534:	eeb0 0a67 	vmov.f32	s0, s15
 8002538:	481a      	ldr	r0, [pc, #104]	@ (80025a4 <main+0x180>)
 800253a:	f7ff f852 	bl	80015e2 <PID_ProcessInput>
		angleControlAction = -(((int)arrivalAngle - direction)) % 180 ;
 800253e:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <main+0x1a4>)
 8002540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002544:	461a      	mov	r2, r3
 8002546:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <main+0x1ac>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002550:	ee17 3a90 	vmov	r3, s15
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	4a1f      	ldr	r2, [pc, #124]	@ (80025d4 <main+0x1b0>)
 8002558:	fb82 1203 	smull	r1, r2, r2, r3
 800255c:	441a      	add	r2, r3
 800255e:	11d1      	asrs	r1, r2, #7
 8002560:	17da      	asrs	r2, r3, #31
 8002562:	1a8a      	subs	r2, r1, r2
 8002564:	21b4      	movs	r1, #180	@ 0xb4
 8002566:	fb01 f202 	mul.w	r2, r1, r2
 800256a:	1a9a      	subs	r2, r3, r2
 800256c:	ee07 2a90 	vmov	s15, r2
 8002570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002574:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <main+0x1b4>)
 8002576:	edc3 7a00 	vstr	s15, [r3]
		setServoPosition(angleControlAction, &htim4);
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <main+0x1b4>)
 800257c:	edd3 7a00 	vldr	s15, [r3]
 8002580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002584:	ee17 3a90 	vmov	r3, s15
 8002588:	b29b      	uxth	r3, r3
 800258a:	490b      	ldr	r1, [pc, #44]	@ (80025b8 <main+0x194>)
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb1f 	bl	8001bd0 <setServoPosition>
		iniciou += 1;
 8002592:	bf00      	nop
 8002594:	e79b      	b.n	80024ce <main+0xaa>
 8002596:	bf00      	nop
 8002598:	2000004c 	.word	0x2000004c
 800259c:	20000050 	.word	0x20000050
 80025a0:	200009e0 	.word	0x200009e0
 80025a4:	200009e8 	.word	0x200009e8
 80025a8:	200009e4 	.word	0x200009e4
 80025ac:	20000054 	.word	0x20000054
 80025b0:	20000854 	.word	0x20000854
 80025b4:	20000980 	.word	0x20000980
 80025b8:	200008f0 	.word	0x200008f0
 80025bc:	200008a8 	.word	0x200008a8
 80025c0:	200009d0 	.word	0x200009d0
 80025c4:	200009c8 	.word	0x200009c8
 80025c8:	200009d4 	.word	0x200009d4
 80025cc:	42f00000 	.word	0x42f00000
 80025d0:	200009d8 	.word	0x200009d8
 80025d4:	b60b60b7 	.word	0xb60b60b7
 80025d8:	200009dc 	.word	0x200009dc

080025dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b094      	sub	sp, #80	@ 0x50
 80025e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	2234      	movs	r2, #52	@ 0x34
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 f9aa 	bl	8006944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002600:	2300      	movs	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <SystemClock_Config+0xb8>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	4a22      	ldr	r2, [pc, #136]	@ (8002694 <SystemClock_Config+0xb8>)
 800260a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002610:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <SystemClock_Config+0xb8>)
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800261c:	2300      	movs	r3, #0
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <SystemClock_Config+0xbc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002628:	4a1b      	ldr	r2, [pc, #108]	@ (8002698 <SystemClock_Config+0xbc>)
 800262a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <SystemClock_Config+0xbc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800263c:	2302      	movs	r3, #2
 800263e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002640:	2301      	movs	r3, #1
 8002642:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002644:	2310      	movs	r3, #16
 8002646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002648:	2300      	movs	r3, #0
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fb89 	bl	8004d68 <HAL_RCC_OscConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800265c:	f000 f9bc 	bl	80029d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002660:	230f      	movs	r3, #15
 8002662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800266c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f002 f8af 	bl	80047e0 <HAL_RCC_ClockConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002688:	f000 f9a6 	bl	80029d8 <Error_Handler>
  }
}
 800268c:	bf00      	nop
 800268e:	3750      	adds	r7, #80	@ 0x50
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000

0800269c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026a0:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026a2:	4a13      	ldr	r2, [pc, #76]	@ (80026f0 <MX_I2C1_Init+0x54>)
 80026a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026a8:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <MX_I2C1_Init+0x58>)
 80026aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026ac:	4b0f      	ldr	r3, [pc, #60]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026b2:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026c0:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026cc:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026d8:	4804      	ldr	r0, [pc, #16]	@ (80026ec <MX_I2C1_Init+0x50>)
 80026da:	f000 fef7 	bl	80034cc <HAL_I2C_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026e4:	f000 f978 	bl	80029d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000854 	.word	0x20000854
 80026f0:	40005400 	.word	0x40005400
 80026f4:	000186a0 	.word	0x000186a0

080026f8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fe:	f107 0320 	add.w	r3, r7, #32
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	611a      	str	r2, [r3, #16]
 8002716:	615a      	str	r2, [r3, #20]
 8002718:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800271a:	4b22      	ldr	r3, [pc, #136]	@ (80027a4 <MX_TIM3_Init+0xac>)
 800271c:	4a22      	ldr	r2, [pc, #136]	@ (80027a8 <MX_TIM3_Init+0xb0>)
 800271e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64 - 1;
 8002720:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <MX_TIM3_Init+0xac>)
 8002722:	223f      	movs	r2, #63	@ 0x3f
 8002724:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002726:	4b1f      	ldr	r3, [pc, #124]	@ (80027a4 <MX_TIM3_Init+0xac>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250;
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <MX_TIM3_Init+0xac>)
 800272e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8002732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <MX_TIM3_Init+0xac>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273a:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <MX_TIM3_Init+0xac>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002740:	4818      	ldr	r0, [pc, #96]	@ (80027a4 <MX_TIM3_Init+0xac>)
 8002742:	f002 fdaf 	bl	80052a4 <HAL_TIM_PWM_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800274c:	f000 f944 	bl	80029d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002758:	f107 0320 	add.w	r3, r7, #32
 800275c:	4619      	mov	r1, r3
 800275e:	4811      	ldr	r0, [pc, #68]	@ (80027a4 <MX_TIM3_Init+0xac>)
 8002760:	f003 fa6c 	bl	8005c3c <HAL_TIMEx_MasterConfigSynchronization>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800276a:	f000 f935 	bl	80029d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276e:	2360      	movs	r3, #96	@ 0x60
 8002770:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2204      	movs	r2, #4
 8002782:	4619      	mov	r1, r3
 8002784:	4807      	ldr	r0, [pc, #28]	@ (80027a4 <MX_TIM3_Init+0xac>)
 8002786:	f002 ff15 	bl	80055b4 <HAL_TIM_PWM_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002790:	f000 f922 	bl	80029d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002794:	4803      	ldr	r0, [pc, #12]	@ (80027a4 <MX_TIM3_Init+0xac>)
 8002796:	f000 f9cd 	bl	8002b34 <HAL_TIM_MspPostInit>
}
 800279a:	bf00      	nop
 800279c:	3728      	adds	r7, #40	@ 0x28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200008a8 	.word	0x200008a8
 80027a8:	40000400 	.word	0x40000400

080027ac <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	@ 0x28
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b2:	f107 0320 	add.w	r3, r7, #32
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	615a      	str	r2, [r3, #20]
 80027cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <MX_TIM4_Init+0xac>)
 80027d0:	4a22      	ldr	r2, [pc, #136]	@ (800285c <MX_TIM4_Init+0xb0>)
 80027d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64 - 1;
 80027d4:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <MX_TIM4_Init+0xac>)
 80027d6:	223f      	movs	r2, #63	@ 0x3f
 80027d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027da:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <MX_TIM4_Init+0xac>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <MX_TIM4_Init+0xac>)
 80027e2:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80027e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <MX_TIM4_Init+0xac>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <MX_TIM4_Init+0xac>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027f4:	4818      	ldr	r0, [pc, #96]	@ (8002858 <MX_TIM4_Init+0xac>)
 80027f6:	f002 fd55 	bl	80052a4 <HAL_TIM_PWM_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002800:	f000 f8ea 	bl	80029d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800280c:	f107 0320 	add.w	r3, r7, #32
 8002810:	4619      	mov	r1, r3
 8002812:	4811      	ldr	r0, [pc, #68]	@ (8002858 <MX_TIM4_Init+0xac>)
 8002814:	f003 fa12 	bl	8005c3c <HAL_TIMEx_MasterConfigSynchronization>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800281e:	f000 f8db 	bl	80029d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002822:	2360      	movs	r3, #96	@ 0x60
 8002824:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2200      	movs	r2, #0
 8002836:	4619      	mov	r1, r3
 8002838:	4807      	ldr	r0, [pc, #28]	@ (8002858 <MX_TIM4_Init+0xac>)
 800283a:	f002 febb 	bl	80055b4 <HAL_TIM_PWM_ConfigChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002844:	f000 f8c8 	bl	80029d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002848:	4803      	ldr	r0, [pc, #12]	@ (8002858 <MX_TIM4_Init+0xac>)
 800284a:	f000 f973 	bl	8002b34 <HAL_TIM_MspPostInit>
}
 800284e:	bf00      	nop
 8002850:	3728      	adds	r7, #40	@ 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200008f0 	.word	0x200008f0
 800285c:	40000800 	.word	0x40000800

08002860 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <MX_USART2_UART_Init+0x4c>)
 8002866:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <MX_USART2_UART_Init+0x50>)
 8002868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <MX_USART2_UART_Init+0x4c>)
 800286c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002872:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <MX_USART2_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002878:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <MX_USART2_UART_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <MX_USART2_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <MX_USART2_UART_Init+0x4c>)
 8002886:	220c      	movs	r2, #12
 8002888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <MX_USART2_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <MX_USART2_UART_Init+0x4c>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002896:	4805      	ldr	r0, [pc, #20]	@ (80028ac <MX_USART2_UART_Init+0x4c>)
 8002898:	f003 fa4c 	bl	8005d34 <HAL_UART_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028a2:	f000 f899 	bl	80029d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000938 	.word	0x20000938
 80028b0:	40004400 	.word	0x40004400

080028b4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <MX_USART3_UART_Init+0x4c>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <MX_USART3_UART_Init+0x50>)
 80028bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <MX_USART3_UART_Init+0x4c>)
 80028c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80028c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <MX_USART3_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <MX_USART3_UART_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <MX_USART3_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <MX_USART3_UART_Init+0x4c>)
 80028da:	220c      	movs	r2, #12
 80028dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <MX_USART3_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <MX_USART3_UART_Init+0x4c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	@ (8002900 <MX_USART3_UART_Init+0x4c>)
 80028ec:	f003 fa22 	bl	8005d34 <HAL_UART_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028f6:	f000 f86f 	bl	80029d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000980 	.word	0x20000980
 8002904:	40004800 	.word	0x40004800

08002908 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b2a      	ldr	r3, [pc, #168]	@ (80029cc <MX_GPIO_Init+0xc4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a29      	ldr	r2, [pc, #164]	@ (80029cc <MX_GPIO_Init+0xc4>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <MX_GPIO_Init+0xc4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	4b23      	ldr	r3, [pc, #140]	@ (80029cc <MX_GPIO_Init+0xc4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	4a22      	ldr	r2, [pc, #136]	@ (80029cc <MX_GPIO_Init+0xc4>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	6313      	str	r3, [r2, #48]	@ 0x30
 800294a:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <MX_GPIO_Init+0xc4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <MX_GPIO_Init+0xc4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	4a1b      	ldr	r2, [pc, #108]	@ (80029cc <MX_GPIO_Init+0xc4>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	6313      	str	r3, [r2, #48]	@ 0x30
 8002966:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <MX_GPIO_Init+0xc4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L293D_LATCH_Pin | L293D_EN_Pin | L293D_SER_Pin, GPIO_PIN_RESET);
 8002972:	2200      	movs	r2, #0
 8002974:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8002978:	4815      	ldr	r0, [pc, #84]	@ (80029d0 <MX_GPIO_Init+0xc8>)
 800297a:	f000 fd8d 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L293D_CLK_GPIO_Port, L293D_CLK_Pin, GPIO_PIN_RESET);
 800297e:	2200      	movs	r2, #0
 8002980:	2120      	movs	r1, #32
 8002982:	4814      	ldr	r0, [pc, #80]	@ (80029d4 <MX_GPIO_Init+0xcc>)
 8002984:	f000 fd88 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L293D_LATCH_Pin L293D_EN_Pin L293D_SER_Pin */
  GPIO_InitStruct.Pin = L293D_LATCH_Pin | L293D_EN_Pin | L293D_SER_Pin;
 8002988:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800298c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298e:	2301      	movs	r3, #1
 8002990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 030c 	add.w	r3, r7, #12
 800299e:	4619      	mov	r1, r3
 80029a0:	480b      	ldr	r0, [pc, #44]	@ (80029d0 <MX_GPIO_Init+0xc8>)
 80029a2:	f000 fbe5 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pin : L293D_CLK_Pin */
  GPIO_InitStruct.Pin = L293D_CLK_Pin;
 80029a6:	2320      	movs	r3, #32
 80029a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	2301      	movs	r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L293D_CLK_GPIO_Port, &GPIO_InitStruct);
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4619      	mov	r1, r3
 80029bc:	4805      	ldr	r0, [pc, #20]	@ (80029d4 <MX_GPIO_Init+0xcc>)
 80029be:	f000 fbd7 	bl	8003170 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80029c2:	bf00      	nop
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400

080029d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029dc:	b672      	cpsid	i
}
 80029de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <Error_Handler+0x8>

080029e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_MspInit+0x4c>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a30 <HAL_MspInit+0x4c>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <HAL_MspInit+0x4c>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_MspInit+0x4c>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	4a08      	ldr	r2, [pc, #32]	@ (8002a30 <HAL_MspInit+0x4c>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_MspInit+0x4c>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	@ 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a19      	ldr	r2, [pc, #100]	@ (8002ab8 <HAL_I2C_MspInit+0x84>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d12c      	bne.n	8002ab0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b18      	ldr	r3, [pc, #96]	@ (8002abc <HAL_I2C_MspInit+0x88>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a17      	ldr	r2, [pc, #92]	@ (8002abc <HAL_I2C_MspInit+0x88>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <HAL_I2C_MspInit+0x88>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = MAG_SDA_Pin|MAG_SCL_Pin;
 8002a72:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a78:	2312      	movs	r3, #18
 8002a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	2303      	movs	r3, #3
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a84:	2304      	movs	r3, #4
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	480c      	ldr	r0, [pc, #48]	@ (8002ac0 <HAL_I2C_MspInit+0x8c>)
 8002a90:	f000 fb6e 	bl	8003170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <HAL_I2C_MspInit+0x88>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	4a07      	ldr	r2, [pc, #28]	@ (8002abc <HAL_I2C_MspInit+0x88>)
 8002a9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_I2C_MspInit+0x88>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002ab0:	bf00      	nop
 8002ab2:	3728      	adds	r7, #40	@ 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40005400 	.word	0x40005400
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020400 	.word	0x40020400

08002ac4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x64>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d10e      	bne.n	8002af4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <HAL_TIM_PWM_MspInit+0x68>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4a13      	ldr	r2, [pc, #76]	@ (8002b2c <HAL_TIM_PWM_MspInit+0x68>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HAL_TIM_PWM_MspInit+0x68>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002af2:	e012      	b.n	8002b1a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b30 <HAL_TIM_PWM_MspInit+0x6c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10d      	bne.n	8002b1a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b0a      	ldr	r3, [pc, #40]	@ (8002b2c <HAL_TIM_PWM_MspInit+0x68>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	4a09      	ldr	r2, [pc, #36]	@ (8002b2c <HAL_TIM_PWM_MspInit+0x68>)
 8002b08:	f043 0304 	orr.w	r3, r3, #4
 8002b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0e:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <HAL_TIM_PWM_MspInit+0x68>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40000800 	.word	0x40000800

08002b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	@ 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a24      	ldr	r2, [pc, #144]	@ (8002be4 <HAL_TIM_MspPostInit+0xb0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d11e      	bne.n	8002b94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b23      	ldr	r3, [pc, #140]	@ (8002be8 <HAL_TIM_MspPostInit+0xb4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	4a22      	ldr	r2, [pc, #136]	@ (8002be8 <HAL_TIM_MspPostInit+0xb4>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b66:	4b20      	ldr	r3, [pc, #128]	@ (8002be8 <HAL_TIM_MspPostInit+0xb4>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = L293D_PWM_Pin;
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b82:	2302      	movs	r3, #2
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(L293D_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4817      	ldr	r0, [pc, #92]	@ (8002bec <HAL_TIM_MspPostInit+0xb8>)
 8002b8e:	f000 faef 	bl	8003170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b92:	e022      	b.n	8002bda <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a15      	ldr	r2, [pc, #84]	@ (8002bf0 <HAL_TIM_MspPostInit+0xbc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d11d      	bne.n	8002bda <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <HAL_TIM_MspPostInit+0xb4>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	4a10      	ldr	r2, [pc, #64]	@ (8002be8 <HAL_TIM_MspPostInit+0xb4>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bae:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <HAL_TIM_MspPostInit+0xb4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 8002bba:	2340      	movs	r3, #64	@ 0x40
 8002bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8002bce:	f107 0314 	add.w	r3, r7, #20
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4807      	ldr	r0, [pc, #28]	@ (8002bf4 <HAL_TIM_MspPostInit+0xc0>)
 8002bd6:	f000 facb 	bl	8003170 <HAL_GPIO_Init>
}
 8002bda:	bf00      	nop
 8002bdc:	3728      	adds	r7, #40	@ 0x28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40020400 	.word	0x40020400

08002bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	@ 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a41      	ldr	r2, [pc, #260]	@ (8002d1c <HAL_UART_MspInit+0x124>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d12c      	bne.n	8002c74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	4b40      	ldr	r3, [pc, #256]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	4a3f      	ldr	r2, [pc, #252]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	4b39      	ldr	r3, [pc, #228]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	4a38      	ldr	r2, [pc, #224]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c46:	4b36      	ldr	r3, [pc, #216]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002c52:	230c      	movs	r3, #12
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c62:	2307      	movs	r3, #7
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c66:	f107 031c 	add.w	r3, r7, #28
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	482d      	ldr	r0, [pc, #180]	@ (8002d24 <HAL_UART_MspInit+0x12c>)
 8002c6e:	f000 fa7f 	bl	8003170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c72:	e04f      	b.n	8002d14 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2b      	ldr	r2, [pc, #172]	@ (8002d28 <HAL_UART_MspInit+0x130>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d14a      	bne.n	8002d14 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	4b27      	ldr	r3, [pc, #156]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	4a26      	ldr	r2, [pc, #152]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8e:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b20      	ldr	r3, [pc, #128]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	4a18      	ldr	r2, [pc, #96]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc6:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <HAL_UART_MspInit+0x128>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 031c 	add.w	r3, r7, #28
 8002cea:	4619      	mov	r1, r3
 8002cec:	480f      	ldr	r0, [pc, #60]	@ (8002d2c <HAL_UART_MspInit+0x134>)
 8002cee:	f000 fa3f 	bl	8003170 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8002cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d00:	2303      	movs	r3, #3
 8002d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d04:	2307      	movs	r3, #7
 8002d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4808      	ldr	r0, [pc, #32]	@ (8002d30 <HAL_UART_MspInit+0x138>)
 8002d10:	f000 fa2e 	bl	8003170 <HAL_GPIO_Init>
}
 8002d14:	bf00      	nop
 8002d16:	3730      	adds	r7, #48	@ 0x30
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40004400 	.word	0x40004400
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40004800 	.word	0x40004800
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020400 	.word	0x40020400

08002d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <NMI_Handler+0x4>

08002d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <HardFault_Handler+0x4>

08002d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <MemManage_Handler+0x4>

08002d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <BusFault_Handler+0x4>

08002d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <UsageFault_Handler+0x4>

08002d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d8a:	f000 f8c7 	bl	8002f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <_sbrk+0x5c>)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <_sbrk+0x60>)
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da8:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db0:	4b11      	ldr	r3, [pc, #68]	@ (8002df8 <_sbrk+0x64>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	@ (8002dfc <_sbrk+0x68>)
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d207      	bcs.n	8002dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc4:	f003 fe1c 	bl	8006a00 <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	220c      	movs	r2, #12
 8002dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e009      	b.n	8002de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dda:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <_sbrk+0x64>)
 8002de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20020000 	.word	0x20020000
 8002df4:	00000400 	.word	0x00000400
 8002df8:	20000a18 	.word	0x20000a18
 8002dfc:	20000b68 	.word	0x20000b68

08002e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e04:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <SystemInit+0x20>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	4a05      	ldr	r2, [pc, #20]	@ (8002e20 <SystemInit+0x20>)
 8002e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e28:	f7ff ffea 	bl	8002e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e2c:	480c      	ldr	r0, [pc, #48]	@ (8002e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e2e:	490d      	ldr	r1, [pc, #52]	@ (8002e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e30:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e34:	e002      	b.n	8002e3c <LoopCopyDataInit>

08002e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3a:	3304      	adds	r3, #4

08002e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e40:	d3f9      	bcc.n	8002e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e42:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e44:	4c0a      	ldr	r4, [pc, #40]	@ (8002e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e48:	e001      	b.n	8002e4e <LoopFillZerobss>

08002e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e4c:	3204      	adds	r2, #4

08002e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e50:	d3fb      	bcc.n	8002e4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e52:	f003 fddb 	bl	8006a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e56:	f7ff fae5 	bl	8002424 <main>
  bx  lr    
 8002e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e64:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002e68:	08008838 	.word	0x08008838
  ldr r2, =_sbss
 8002e6c:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002e70:	20000b68 	.word	0x20000b68

08002e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e74:	e7fe      	b.n	8002e74 <ADC_IRQHandler>
	...

08002e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <HAL_Init+0x40>)
 8002e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb8 <HAL_Init+0x40>)
 8002e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e94:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <HAL_Init+0x40>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a07      	ldr	r2, [pc, #28]	@ (8002eb8 <HAL_Init+0x40>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea0:	2003      	movs	r0, #3
 8002ea2:	f000 f931 	bl	8003108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ea6:	200f      	movs	r0, #15
 8002ea8:	f000 f808 	bl	8002ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eac:	f7ff fd9a 	bl	80029e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023c00 	.word	0x40023c00

08002ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec4:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <HAL_InitTick+0x54>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <HAL_InitTick+0x58>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f93b 	bl	8003156 <HAL_SYSTICK_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00e      	b.n	8002f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b0f      	cmp	r3, #15
 8002eee:	d80a      	bhi.n	8002f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	f000 f911 	bl	800311e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002efc:	4a06      	ldr	r2, [pc, #24]	@ (8002f18 <HAL_InitTick+0x5c>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000058 	.word	0x20000058
 8002f14:	20000060 	.word	0x20000060
 8002f18:	2000005c 	.word	0x2000005c

08002f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f20:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_IncTick+0x20>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_IncTick+0x24>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <HAL_IncTick+0x24>)
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000060 	.word	0x20000060
 8002f40:	20000a1c 	.word	0x20000a1c

08002f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return uwTick;
 8002f48:	4b03      	ldr	r3, [pc, #12]	@ (8002f58 <HAL_GetTick+0x14>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000a1c 	.word	0x20000a1c

08002f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff ffee 	bl	8002f44 <HAL_GetTick>
 8002f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d005      	beq.n	8002f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f76:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <HAL_Delay+0x44>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f82:	bf00      	nop
 8002f84:	f7ff ffde 	bl	8002f44 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d8f7      	bhi.n	8002f84 <HAL_Delay+0x28>
  {
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000060 	.word	0x20000060

08002fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fd6:	4a04      	ldr	r2, [pc, #16]	@ (8002fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	60d3      	str	r3, [r2, #12]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff0:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <__NVIC_GetPriorityGrouping+0x18>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 0307 	and.w	r3, r3, #7
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	db0a      	blt.n	8003032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	490c      	ldr	r1, [pc, #48]	@ (8003054 <__NVIC_SetPriority+0x4c>)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	440b      	add	r3, r1
 800302c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003030:	e00a      	b.n	8003048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4908      	ldr	r1, [pc, #32]	@ (8003058 <__NVIC_SetPriority+0x50>)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	3b04      	subs	r3, #4
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	440b      	add	r3, r1
 8003046:	761a      	strb	r2, [r3, #24]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000e100 	.word	0xe000e100
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	@ 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f1c3 0307 	rsb	r3, r3, #7
 8003076:	2b04      	cmp	r3, #4
 8003078:	bf28      	it	cs
 800307a:	2304      	movcs	r3, #4
 800307c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3304      	adds	r3, #4
 8003082:	2b06      	cmp	r3, #6
 8003084:	d902      	bls.n	800308c <NVIC_EncodePriority+0x30>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3b03      	subs	r3, #3
 800308a:	e000      	b.n	800308e <NVIC_EncodePriority+0x32>
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	f04f 32ff 	mov.w	r2, #4294967295
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	401a      	ands	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	43d9      	mvns	r1, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	4313      	orrs	r3, r2
         );
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	@ 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d4:	d301      	bcc.n	80030da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d6:	2301      	movs	r3, #1
 80030d8:	e00f      	b.n	80030fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030da:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <SysTick_Config+0x40>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e2:	210f      	movs	r1, #15
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	f7ff ff8e 	bl	8003008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <SysTick_Config+0x40>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f2:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <SysTick_Config+0x40>)
 80030f4:	2207      	movs	r2, #7
 80030f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	e000e010 	.word	0xe000e010

08003108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff47 	bl	8002fa4 <__NVIC_SetPriorityGrouping>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003130:	f7ff ff5c 	bl	8002fec <__NVIC_GetPriorityGrouping>
 8003134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	6978      	ldr	r0, [r7, #20]
 800313c:	f7ff ff8e 	bl	800305c <NVIC_EncodePriority>
 8003140:	4602      	mov	r2, r0
 8003142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff5d 	bl	8003008 <__NVIC_SetPriority>
}
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffb0 	bl	80030c4 <SysTick_Config>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	@ 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e165      	b.n	8003458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800318c:	2201      	movs	r2, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	f040 8154 	bne.w	8003452 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d005      	beq.n	80031c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d130      	bne.n	8003224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 0201 	and.w	r2, r3, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b03      	cmp	r3, #3
 800322e:	d017      	beq.n	8003260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d123      	bne.n	80032b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	08da      	lsrs	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3208      	adds	r2, #8
 8003274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	08da      	lsrs	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3208      	adds	r2, #8
 80032ae:	69b9      	ldr	r1, [r7, #24]
 80032b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0203 	and.w	r2, r3, #3
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80ae 	beq.w	8003452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003470 <HAL_GPIO_Init+0x300>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003470 <HAL_GPIO_Init+0x300>)
 8003300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003304:	6453      	str	r3, [r2, #68]	@ 0x44
 8003306:	4b5a      	ldr	r3, [pc, #360]	@ (8003470 <HAL_GPIO_Init+0x300>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003312:	4a58      	ldr	r2, [pc, #352]	@ (8003474 <HAL_GPIO_Init+0x304>)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3302      	adds	r3, #2
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	220f      	movs	r2, #15
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4f      	ldr	r2, [pc, #316]	@ (8003478 <HAL_GPIO_Init+0x308>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d025      	beq.n	800338a <HAL_GPIO_Init+0x21a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4e      	ldr	r2, [pc, #312]	@ (800347c <HAL_GPIO_Init+0x30c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01f      	beq.n	8003386 <HAL_GPIO_Init+0x216>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4d      	ldr	r2, [pc, #308]	@ (8003480 <HAL_GPIO_Init+0x310>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d019      	beq.n	8003382 <HAL_GPIO_Init+0x212>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4c      	ldr	r2, [pc, #304]	@ (8003484 <HAL_GPIO_Init+0x314>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_GPIO_Init+0x20e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4b      	ldr	r2, [pc, #300]	@ (8003488 <HAL_GPIO_Init+0x318>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00d      	beq.n	800337a <HAL_GPIO_Init+0x20a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4a      	ldr	r2, [pc, #296]	@ (800348c <HAL_GPIO_Init+0x31c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <HAL_GPIO_Init+0x206>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a49      	ldr	r2, [pc, #292]	@ (8003490 <HAL_GPIO_Init+0x320>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_GPIO_Init+0x202>
 800336e:	2306      	movs	r3, #6
 8003370:	e00c      	b.n	800338c <HAL_GPIO_Init+0x21c>
 8003372:	2307      	movs	r3, #7
 8003374:	e00a      	b.n	800338c <HAL_GPIO_Init+0x21c>
 8003376:	2305      	movs	r3, #5
 8003378:	e008      	b.n	800338c <HAL_GPIO_Init+0x21c>
 800337a:	2304      	movs	r3, #4
 800337c:	e006      	b.n	800338c <HAL_GPIO_Init+0x21c>
 800337e:	2303      	movs	r3, #3
 8003380:	e004      	b.n	800338c <HAL_GPIO_Init+0x21c>
 8003382:	2302      	movs	r3, #2
 8003384:	e002      	b.n	800338c <HAL_GPIO_Init+0x21c>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <HAL_GPIO_Init+0x21c>
 800338a:	2300      	movs	r3, #0
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	f002 0203 	and.w	r2, r2, #3
 8003392:	0092      	lsls	r2, r2, #2
 8003394:	4093      	lsls	r3, r2
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800339c:	4935      	ldr	r1, [pc, #212]	@ (8003474 <HAL_GPIO_Init+0x304>)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	089b      	lsrs	r3, r3, #2
 80033a2:	3302      	adds	r3, #2
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003494 <HAL_GPIO_Init+0x324>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ce:	4a31      	ldr	r2, [pc, #196]	@ (8003494 <HAL_GPIO_Init+0x324>)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003494 <HAL_GPIO_Init+0x324>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033f8:	4a26      	ldr	r2, [pc, #152]	@ (8003494 <HAL_GPIO_Init+0x324>)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033fe:	4b25      	ldr	r3, [pc, #148]	@ (8003494 <HAL_GPIO_Init+0x324>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003422:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <HAL_GPIO_Init+0x324>)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003428:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <HAL_GPIO_Init+0x324>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800344c:	4a11      	ldr	r2, [pc, #68]	@ (8003494 <HAL_GPIO_Init+0x324>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3301      	adds	r3, #1
 8003456:	61fb      	str	r3, [r7, #28]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b0f      	cmp	r3, #15
 800345c:	f67f ae96 	bls.w	800318c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	3724      	adds	r7, #36	@ 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	40013800 	.word	0x40013800
 8003478:	40020000 	.word	0x40020000
 800347c:	40020400 	.word	0x40020400
 8003480:	40020800 	.word	0x40020800
 8003484:	40020c00 	.word	0x40020c00
 8003488:	40021000 	.word	0x40021000
 800348c:	40021400 	.word	0x40021400
 8003490:	40021800 	.word	0x40021800
 8003494:	40013c00 	.word	0x40013c00

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b4:	e003      	b.n	80034be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	041a      	lsls	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	619a      	str	r2, [r3, #24]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e12b      	b.n	8003736 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fa9e 	bl	8002a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2224      	movs	r2, #36	@ 0x24
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800351e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800352e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003530:	f001 fa48 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 8003534:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4a81      	ldr	r2, [pc, #516]	@ (8003740 <HAL_I2C_Init+0x274>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d807      	bhi.n	8003550 <HAL_I2C_Init+0x84>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a80      	ldr	r2, [pc, #512]	@ (8003744 <HAL_I2C_Init+0x278>)
 8003544:	4293      	cmp	r3, r2
 8003546:	bf94      	ite	ls
 8003548:	2301      	movls	r3, #1
 800354a:	2300      	movhi	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e006      	b.n	800355e <HAL_I2C_Init+0x92>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a7d      	ldr	r2, [pc, #500]	@ (8003748 <HAL_I2C_Init+0x27c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	bf94      	ite	ls
 8003558:	2301      	movls	r3, #1
 800355a:	2300      	movhi	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0e7      	b.n	8003736 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a78      	ldr	r2, [pc, #480]	@ (800374c <HAL_I2C_Init+0x280>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	0c9b      	lsrs	r3, r3, #18
 8003570:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a6a      	ldr	r2, [pc, #424]	@ (8003740 <HAL_I2C_Init+0x274>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d802      	bhi.n	80035a0 <HAL_I2C_Init+0xd4>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	3301      	adds	r3, #1
 800359e:	e009      	b.n	80035b4 <HAL_I2C_Init+0xe8>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	4a69      	ldr	r2, [pc, #420]	@ (8003750 <HAL_I2C_Init+0x284>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	099b      	lsrs	r3, r3, #6
 80035b2:	3301      	adds	r3, #1
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	495c      	ldr	r1, [pc, #368]	@ (8003740 <HAL_I2C_Init+0x274>)
 80035d0:	428b      	cmp	r3, r1
 80035d2:	d819      	bhi.n	8003608 <HAL_I2C_Init+0x13c>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e59      	subs	r1, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e2:	1c59      	adds	r1, r3, #1
 80035e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035e8:	400b      	ands	r3, r1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_I2C_Init+0x138>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1e59      	subs	r1, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003602:	e051      	b.n	80036a8 <HAL_I2C_Init+0x1dc>
 8003604:	2304      	movs	r3, #4
 8003606:	e04f      	b.n	80036a8 <HAL_I2C_Init+0x1dc>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d111      	bne.n	8003634 <HAL_I2C_Init+0x168>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1e58      	subs	r0, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	440b      	add	r3, r1
 800361e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e012      	b.n	800365a <HAL_I2C_Init+0x18e>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1e58      	subs	r0, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	0099      	lsls	r1, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	fbb0 f3f3 	udiv	r3, r0, r3
 800364a:	3301      	adds	r3, #1
 800364c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003650:	2b00      	cmp	r3, #0
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Init+0x196>
 800365e:	2301      	movs	r3, #1
 8003660:	e022      	b.n	80036a8 <HAL_I2C_Init+0x1dc>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10e      	bne.n	8003688 <HAL_I2C_Init+0x1bc>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1e58      	subs	r0, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	460b      	mov	r3, r1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	440b      	add	r3, r1
 8003678:	fbb0 f3f3 	udiv	r3, r0, r3
 800367c:	3301      	adds	r3, #1
 800367e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003686:	e00f      	b.n	80036a8 <HAL_I2C_Init+0x1dc>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1e58      	subs	r0, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	0099      	lsls	r1, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	fbb0 f3f3 	udiv	r3, r0, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	6809      	ldr	r1, [r1, #0]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6911      	ldr	r1, [r2, #16]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	4311      	orrs	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	000186a0 	.word	0x000186a0
 8003744:	001e847f 	.word	0x001e847f
 8003748:	003d08ff 	.word	0x003d08ff
 800374c:	431bde83 	.word	0x431bde83
 8003750:	10624dd3 	.word	0x10624dd3

08003754 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	461a      	mov	r2, r3
 8003760:	460b      	mov	r3, r1
 8003762:	817b      	strh	r3, [r7, #10]
 8003764:	4613      	mov	r3, r2
 8003766:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003768:	f7ff fbec 	bl	8002f44 <HAL_GetTick>
 800376c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b20      	cmp	r3, #32
 8003778:	f040 80e0 	bne.w	800393c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	2319      	movs	r3, #25
 8003782:	2201      	movs	r2, #1
 8003784:	4970      	ldr	r1, [pc, #448]	@ (8003948 <HAL_I2C_Master_Transmit+0x1f4>)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fdf4 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
 8003794:	e0d3      	b.n	800393e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_I2C_Master_Transmit+0x50>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0cc      	b.n	800393e <HAL_I2C_Master_Transmit+0x1ea>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d007      	beq.n	80037ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2221      	movs	r2, #33	@ 0x21
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2210      	movs	r2, #16
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	893a      	ldrh	r2, [r7, #8]
 80037fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a50      	ldr	r2, [pc, #320]	@ (800394c <HAL_I2C_Master_Transmit+0x1f8>)
 800380a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800380c:	8979      	ldrh	r1, [r7, #10]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	6a3a      	ldr	r2, [r7, #32]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 fbc8 	bl	8003fa8 <I2C_MasterRequestWrite>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e08d      	b.n	800393e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003838:	e066      	b.n	8003908 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	6a39      	ldr	r1, [r7, #32]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 feb2 	bl	80045a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	2b04      	cmp	r3, #4
 8003850:	d107      	bne.n	8003862 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003860:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06b      	b.n	800393e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d11b      	bne.n	80038dc <HAL_I2C_Master_Transmit+0x188>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d017      	beq.n	80038dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	781a      	ldrb	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	6a39      	ldr	r1, [r7, #32]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fea9 	bl	8004638 <I2C_WaitOnBTFFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d107      	bne.n	8003904 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003902:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e01a      	b.n	800393e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390c:	2b00      	cmp	r3, #0
 800390e:	d194      	bne.n	800383a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800391e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e000      	b.n	800393e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	00100002 	.word	0x00100002
 800394c:	ffff0000 	.word	0xffff0000

08003950 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	@ 0x30
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	461a      	mov	r2, r3
 800395c:	460b      	mov	r3, r1
 800395e:	817b      	strh	r3, [r7, #10]
 8003960:	4613      	mov	r3, r2
 8003962:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003964:	f7ff faee 	bl	8002f44 <HAL_GetTick>
 8003968:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b20      	cmp	r3, #32
 8003974:	f040 8217 	bne.w	8003da6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2319      	movs	r3, #25
 800397e:	2201      	movs	r2, #1
 8003980:	497c      	ldr	r1, [pc, #496]	@ (8003b74 <HAL_I2C_Master_Receive+0x224>)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fcf6 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
 8003990:	e20a      	b.n	8003da8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_I2C_Master_Receive+0x50>
 800399c:	2302      	movs	r3, #2
 800399e:	e203      	b.n	8003da8 <HAL_I2C_Master_Receive+0x458>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d007      	beq.n	80039c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0201 	orr.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2222      	movs	r2, #34	@ 0x22
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2210      	movs	r2, #16
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	893a      	ldrh	r2, [r7, #8]
 80039f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a5c      	ldr	r2, [pc, #368]	@ (8003b78 <HAL_I2C_Master_Receive+0x228>)
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a08:	8979      	ldrh	r1, [r7, #10]
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fb4c 	bl	80040ac <I2C_MasterRequestRead>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1c4      	b.n	8003da8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d113      	bne.n	8003a4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a26:	2300      	movs	r3, #0
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	623b      	str	r3, [r7, #32]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	623b      	str	r3, [r7, #32]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e198      	b.n	8003d80 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d11b      	bne.n	8003a8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e178      	b.n	8003d80 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d11b      	bne.n	8003ace <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	e158      	b.n	8003d80 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003adc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003af4:	e144      	b.n	8003d80 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	f200 80f1 	bhi.w	8003ce2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d123      	bne.n	8003b50 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fddb 	bl	80046c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e145      	b.n	8003da8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b4e:	e117      	b.n	8003d80 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d14e      	bne.n	8003bf6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4906      	ldr	r1, [pc, #24]	@ (8003b7c <HAL_I2C_Master_Receive+0x22c>)
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fc06 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e11a      	b.n	8003da8 <HAL_I2C_Master_Receive+0x458>
 8003b72:	bf00      	nop
 8003b74:	00100002 	.word	0x00100002
 8003b78:	ffff0000 	.word	0xffff0000
 8003b7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bf4:	e0c4      	b.n	8003d80 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	496c      	ldr	r1, [pc, #432]	@ (8003db0 <HAL_I2C_Master_Receive+0x460>)
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fbb7 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0cb      	b.n	8003da8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	2200      	movs	r2, #0
 8003c5a:	4955      	ldr	r1, [pc, #340]	@ (8003db0 <HAL_I2C_Master_Receive+0x460>)
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fb89 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e09d      	b.n	8003da8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ce0:	e04e      	b.n	8003d80 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fcee 	bl	80046c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e058      	b.n	8003da8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d124      	bne.n	8003d80 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d107      	bne.n	8003d4e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d4c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f47f aeb6 	bne.w	8003af6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3728      	adds	r7, #40	@ 0x28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	00010004 	.word	0x00010004

08003db4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	817b      	strh	r3, [r7, #10]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	813b      	strh	r3, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dce:	f7ff f8b9 	bl	8002f44 <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	f040 80d9 	bne.w	8003f94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2319      	movs	r3, #25
 8003de8:	2201      	movs	r2, #1
 8003dea:	496d      	ldr	r1, [pc, #436]	@ (8003fa0 <HAL_I2C_Mem_Write+0x1ec>)
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fac1 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e0cc      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_I2C_Mem_Write+0x56>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0c5      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d007      	beq.n	8003e30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2221      	movs	r2, #33	@ 0x21
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2240      	movs	r2, #64	@ 0x40
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a3a      	ldr	r2, [r7, #32]
 8003e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4a4d      	ldr	r2, [pc, #308]	@ (8003fa4 <HAL_I2C_Mem_Write+0x1f0>)
 8003e70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e72:	88f8      	ldrh	r0, [r7, #6]
 8003e74:	893a      	ldrh	r2, [r7, #8]
 8003e76:	8979      	ldrh	r1, [r7, #10]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	4603      	mov	r3, r0
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f9e0 	bl	8004248 <I2C_RequestMemoryWrite>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d052      	beq.n	8003f34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e081      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fb86 	bl	80045a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d107      	bne.n	8003eba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e06b      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d11b      	bne.n	8003f34 <HAL_I2C_Mem_Write+0x180>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1aa      	bne.n	8003e92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fb79 	bl	8004638 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00d      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d107      	bne.n	8003f64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e016      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	00100002 	.word	0x00100002
 8003fa4:	ffff0000 	.word	0xffff0000

08003fa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d006      	beq.n	8003fd2 <I2C_MasterRequestWrite+0x2a>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d003      	beq.n	8003fd2 <I2C_MasterRequestWrite+0x2a>
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fd0:	d108      	bne.n	8003fe4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e00b      	b.n	8003ffc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	2b12      	cmp	r3, #18
 8003fea:	d107      	bne.n	8003ffc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ffa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f9b3 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004022:	d103      	bne.n	800402c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800402a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e035      	b.n	800409c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004038:	d108      	bne.n	800404c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800403a:	897b      	ldrh	r3, [r7, #10]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004048:	611a      	str	r2, [r3, #16]
 800404a:	e01b      	b.n	8004084 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800404c:	897b      	ldrh	r3, [r7, #10]
 800404e:	11db      	asrs	r3, r3, #7
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0306 	and.w	r3, r3, #6
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f063 030f 	orn	r3, r3, #15
 800405c:	b2da      	uxtb	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	490e      	ldr	r1, [pc, #56]	@ (80040a4 <I2C_MasterRequestWrite+0xfc>)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f9fc 	bl	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e010      	b.n	800409c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800407a:	897b      	ldrh	r3, [r7, #10]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4907      	ldr	r1, [pc, #28]	@ (80040a8 <I2C_MasterRequestWrite+0x100>)
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f9ec 	bl	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	00010008 	.word	0x00010008
 80040a8:	00010002 	.word	0x00010002

080040ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	607a      	str	r2, [r7, #4]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	460b      	mov	r3, r1
 80040ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d006      	beq.n	80040e6 <I2C_MasterRequestRead+0x3a>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d003      	beq.n	80040e6 <I2C_MasterRequestRead+0x3a>
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040e4:	d108      	bne.n	80040f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e00b      	b.n	8004110 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	2b11      	cmp	r3, #17
 80040fe:	d107      	bne.n	8004110 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800410e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f929 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00d      	beq.n	8004144 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004136:	d103      	bne.n	8004140 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800413e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e079      	b.n	8004238 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800414c:	d108      	bne.n	8004160 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	611a      	str	r2, [r3, #16]
 800415e:	e05f      	b.n	8004220 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004160:	897b      	ldrh	r3, [r7, #10]
 8004162:	11db      	asrs	r3, r3, #7
 8004164:	b2db      	uxtb	r3, r3
 8004166:	f003 0306 	and.w	r3, r3, #6
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f063 030f 	orn	r3, r3, #15
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4930      	ldr	r1, [pc, #192]	@ (8004240 <I2C_MasterRequestRead+0x194>)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f972 	bl	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e054      	b.n	8004238 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800418e:	897b      	ldrh	r3, [r7, #10]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4929      	ldr	r1, [pc, #164]	@ (8004244 <I2C_MasterRequestRead+0x198>)
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f962 	bl	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e044      	b.n	8004238 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f8c7 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fa:	d103      	bne.n	8004204 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004202:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e017      	b.n	8004238 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004208:	897b      	ldrh	r3, [r7, #10]
 800420a:	11db      	asrs	r3, r3, #7
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 0306 	and.w	r3, r3, #6
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f063 030e 	orn	r3, r3, #14
 8004218:	b2da      	uxtb	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4907      	ldr	r1, [pc, #28]	@ (8004244 <I2C_MasterRequestRead+0x198>)
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f91e 	bl	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	00010008 	.word	0x00010008
 8004244:	00010002 	.word	0x00010002

08004248 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	461a      	mov	r2, r3
 8004256:	4603      	mov	r3, r0
 8004258:	817b      	strh	r3, [r7, #10]
 800425a:	460b      	mov	r3, r1
 800425c:	813b      	strh	r3, [r7, #8]
 800425e:	4613      	mov	r3, r2
 8004260:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	2200      	movs	r2, #0
 800427a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f878 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00d      	beq.n	80042a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004298:	d103      	bne.n	80042a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e05f      	b.n	8004366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	492d      	ldr	r1, [pc, #180]	@ (8004370 <I2C_RequestMemoryWrite+0x128>)
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f8d3 	bl	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e04c      	b.n	8004366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e4:	6a39      	ldr	r1, [r7, #32]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f95e 	bl	80045a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d107      	bne.n	800430a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e02b      	b.n	8004366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d105      	bne.n	8004320 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004314:	893b      	ldrh	r3, [r7, #8]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	611a      	str	r2, [r3, #16]
 800431e:	e021      	b.n	8004364 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004320:	893b      	ldrh	r3, [r7, #8]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	b29b      	uxth	r3, r3
 8004326:	b2da      	uxtb	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800432e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004330:	6a39      	ldr	r1, [r7, #32]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f938 	bl	80045a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	2b04      	cmp	r3, #4
 8004344:	d107      	bne.n	8004356 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e005      	b.n	8004366 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800435a:	893b      	ldrh	r3, [r7, #8]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	00010002 	.word	0x00010002

08004374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004384:	e048      	b.n	8004418 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d044      	beq.n	8004418 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fe fdd9 	bl	8002f44 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d139      	bne.n	8004418 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10d      	bne.n	80043ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	43da      	mvns	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4013      	ands	r3, r2
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	e00c      	b.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	43da      	mvns	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d116      	bne.n	8004418 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e023      	b.n	8004460 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d10d      	bne.n	800443e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	43da      	mvns	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	e00c      	b.n	8004458 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	43da      	mvns	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	429a      	cmp	r2, r3
 800445c:	d093      	beq.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004476:	e071      	b.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004486:	d123      	bne.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004496:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	f043 0204 	orr.w	r2, r3, #4
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e067      	b.n	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d041      	beq.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d8:	f7fe fd34 	bl	8002f44 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d302      	bcc.n	80044ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d136      	bne.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d10c      	bne.n	8004512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	43da      	mvns	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4013      	ands	r3, r2
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf14      	ite	ne
 800450a:	2301      	movne	r3, #1
 800450c:	2300      	moveq	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	e00b      	b.n	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	43da      	mvns	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4013      	ands	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e021      	b.n	80045a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10c      	bne.n	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	43da      	mvns	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e00b      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	43da      	mvns	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4013      	ands	r3, r2
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf14      	ite	ne
 8004592:	2301      	movne	r3, #1
 8004594:	2300      	moveq	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	f47f af6d 	bne.w	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b4:	e034      	b.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f8e3 	bl	8004782 <I2C_IsAcknowledgeFailed>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e034      	b.n	8004630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d028      	beq.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fe fcb9 	bl	8002f44 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11d      	bne.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ee:	2b80      	cmp	r3, #128	@ 0x80
 80045f0:	d016      	beq.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e007      	b.n	8004630 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462a:	2b80      	cmp	r3, #128	@ 0x80
 800462c:	d1c3      	bne.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004644:	e034      	b.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f89b 	bl	8004782 <I2C_IsAcknowledgeFailed>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e034      	b.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d028      	beq.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fe fc71 	bl	8002f44 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d11d      	bne.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d016      	beq.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e007      	b.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d1c3      	bne.n	8004646 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046d4:	e049      	b.n	800476a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d119      	bne.n	8004718 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0210 	mvn.w	r2, #16
 80046ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e030      	b.n	800477a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004718:	f7fe fc14 	bl	8002f44 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d302      	bcc.n	800472e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d11d      	bne.n	800476a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004738:	2b40      	cmp	r3, #64	@ 0x40
 800473a:	d016      	beq.n	800476a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	f043 0220 	orr.w	r2, r3, #32
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e007      	b.n	800477a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004774:	2b40      	cmp	r3, #64	@ 0x40
 8004776:	d1ae      	bne.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004798:	d11b      	bne.n	80047d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	f043 0204 	orr.w	r2, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0cc      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f4:	4b68      	ldr	r3, [pc, #416]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d90c      	bls.n	800481c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b65      	ldr	r3, [pc, #404]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	4b63      	ldr	r3, [pc, #396]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0b8      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d020      	beq.n	800486a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004834:	4b59      	ldr	r3, [pc, #356]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a58      	ldr	r2, [pc, #352]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800483e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800484c:	4b53      	ldr	r3, [pc, #332]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a52      	ldr	r2, [pc, #328]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004858:	4b50      	ldr	r3, [pc, #320]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	494d      	ldr	r1, [pc, #308]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	4313      	orrs	r3, r2
 8004868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d044      	beq.n	8004900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487e:	4b47      	ldr	r3, [pc, #284]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d119      	bne.n	80048be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e07f      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d003      	beq.n	800489e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800489a:	2b03      	cmp	r3, #3
 800489c:	d107      	bne.n	80048ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489e:	4b3f      	ldr	r3, [pc, #252]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e06f      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ae:	4b3b      	ldr	r3, [pc, #236]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e067      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048be:	4b37      	ldr	r3, [pc, #220]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 0203 	bic.w	r2, r3, #3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4934      	ldr	r1, [pc, #208]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048d0:	f7fe fb38 	bl	8002f44 <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d8:	f7fe fb34 	bl	8002f44 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e04f      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	4b2b      	ldr	r3, [pc, #172]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 020c 	and.w	r2, r3, #12
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d1eb      	bne.n	80048d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004900:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d20c      	bcs.n	8004928 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b22      	ldr	r3, [pc, #136]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b20      	ldr	r3, [pc, #128]	@ (8004998 <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e032      	b.n	800498e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004934:	4b19      	ldr	r3, [pc, #100]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4916      	ldr	r1, [pc, #88]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004952:	4b12      	ldr	r3, [pc, #72]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	490e      	ldr	r1, [pc, #56]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004966:	f000 f855 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 800496a:	4602      	mov	r2, r0
 800496c:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	091b      	lsrs	r3, r3, #4
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	490a      	ldr	r1, [pc, #40]	@ (80049a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004978:	5ccb      	ldrb	r3, [r1, r3]
 800497a:	fa22 f303 	lsr.w	r3, r2, r3
 800497e:	4a09      	ldr	r2, [pc, #36]	@ (80049a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004982:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe fa98 	bl	8002ebc <HAL_InitTick>

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40023c00 	.word	0x40023c00
 800499c:	40023800 	.word	0x40023800
 80049a0:	08008638 	.word	0x08008638
 80049a4:	20000058 	.word	0x20000058
 80049a8:	2000005c 	.word	0x2000005c

080049ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b03      	ldr	r3, [pc, #12]	@ (80049c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000058 	.word	0x20000058

080049c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c8:	f7ff fff0 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	0a9b      	lsrs	r3, r3, #10
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	4903      	ldr	r1, [pc, #12]	@ (80049e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40023800 	.word	0x40023800
 80049e8:	08008648 	.word	0x08008648

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f0:	f7ff ffdc 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b05      	ldr	r3, [pc, #20]	@ (8004a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	0b5b      	lsrs	r3, r3, #13
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4903      	ldr	r1, [pc, #12]	@ (8004a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	08008648 	.word	0x08008648

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a18:	b0a6      	sub	sp, #152	@ 0x98
 8004a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a3a:	4bc8      	ldr	r3, [pc, #800]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	f200 817e 	bhi.w	8004d44 <HAL_RCC_GetSysClockFreq+0x330>
 8004a48:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004d45 	.word	0x08004d45
 8004a58:	08004d45 	.word	0x08004d45
 8004a5c:	08004d45 	.word	0x08004d45
 8004a60:	08004a8d 	.word	0x08004a8d
 8004a64:	08004d45 	.word	0x08004d45
 8004a68:	08004d45 	.word	0x08004d45
 8004a6c:	08004d45 	.word	0x08004d45
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004d45 	.word	0x08004d45
 8004a78:	08004d45 	.word	0x08004d45
 8004a7c:	08004d45 	.word	0x08004d45
 8004a80:	08004bff 	.word	0x08004bff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a84:	4bb6      	ldr	r3, [pc, #728]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a8a:	e15f      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a8c:	4bb5      	ldr	r3, [pc, #724]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a92:	e15b      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a94:	4bb1      	ldr	r3, [pc, #708]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa0:	4bae      	ldr	r3, [pc, #696]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d031      	beq.n	8004b10 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aac:	4bab      	ldr	r3, [pc, #684]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ab6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ac4:	4ba7      	ldr	r3, [pc, #668]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ac6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004aca:	462a      	mov	r2, r5
 8004acc:	fb03 f202 	mul.w	r2, r3, r2
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	4aa2      	ldr	r2, [pc, #648]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x350>)
 8004adc:	4621      	mov	r1, r4
 8004ade:	fba1 1202 	umull	r1, r2, r1, r2
 8004ae2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ae4:	460a      	mov	r2, r1
 8004ae6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004ae8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004aea:	4413      	add	r3, r2
 8004aec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af2:	2200      	movs	r2, #0
 8004af4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004af6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004af8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004afc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004b00:	f7fc f8c2 	bl	8000c88 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4613      	mov	r3, r2
 8004b0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b0e:	e064      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b10:	4b92      	ldr	r3, [pc, #584]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	099b      	lsrs	r3, r3, #6
 8004b16:	2200      	movs	r2, #0
 8004b18:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b1a:	657a      	str	r2, [r7, #84]	@ 0x54
 8004b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b24:	2300      	movs	r3, #0
 8004b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b28:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	462b      	mov	r3, r5
 8004b30:	f04f 0000 	mov.w	r0, #0
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	0159      	lsls	r1, r3, #5
 8004b3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b3e:	0150      	lsls	r0, r2, #5
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4621      	mov	r1, r4
 8004b46:	1a51      	subs	r1, r2, r1
 8004b48:	6139      	str	r1, [r7, #16]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b5e:	4659      	mov	r1, fp
 8004b60:	018b      	lsls	r3, r1, #6
 8004b62:	4651      	mov	r1, sl
 8004b64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b68:	4651      	mov	r1, sl
 8004b6a:	018a      	lsls	r2, r1, #6
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ebb2 0801 	subs.w	r8, r2, r1
 8004b72:	4659      	mov	r1, fp
 8004b74:	eb63 0901 	sbc.w	r9, r3, r1
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b8c:	4690      	mov	r8, r2
 8004b8e:	4699      	mov	r9, r3
 8004b90:	4623      	mov	r3, r4
 8004b92:	eb18 0303 	adds.w	r3, r8, r3
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	462b      	mov	r3, r5
 8004b9a:	eb49 0303 	adc.w	r3, r9, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bac:	4629      	mov	r1, r5
 8004bae:	028b      	lsls	r3, r1, #10
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	028a      	lsls	r2, r1, #10
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bcc:	f7fc f85c 	bl	8000c88 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bda:	4b60      	ldr	r3, [pc, #384]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	3301      	adds	r3, #1
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004bec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004bfc:	e0a6      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bfe:	4b57      	ldr	r3, [pc, #348]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c0a:	4b54      	ldr	r3, [pc, #336]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d02a      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c16:	4b51      	ldr	r3, [pc, #324]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c2c:	fb03 f201 	mul.w	r2, r3, r1
 8004c30:	2300      	movs	r3, #0
 8004c32:	fb00 f303 	mul.w	r3, r0, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	4a4a      	ldr	r2, [pc, #296]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c3a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c40:	460a      	mov	r2, r1
 8004c42:	673a      	str	r2, [r7, #112]	@ 0x70
 8004c44:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c46:	4413      	add	r3, r2
 8004c48:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c4e:	2200      	movs	r2, #0
 8004c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c52:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004c58:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004c5c:	f7fc f814 	bl	8000c88 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4613      	mov	r3, r2
 8004c66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c6a:	e05b      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	2200      	movs	r2, #0
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	2300      	movs	r3, #0
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	f04f 0000 	mov.w	r0, #0
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	0159      	lsls	r1, r3, #5
 8004c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c9a:	0150      	lsls	r0, r2, #5
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cc0:	ebb2 040a 	subs.w	r4, r2, sl
 8004cc4:	eb63 050b 	sbc.w	r5, r3, fp
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	eb45 0303 	adc.w	r3, r5, r3
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	028b      	lsls	r3, r1, #10
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d00:	4621      	mov	r1, r4
 8004d02:	028a      	lsls	r2, r1, #10
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	61fa      	str	r2, [r7, #28]
 8004d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d16:	f7fb ffb7 	bl	8000c88 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4613      	mov	r3, r2
 8004d20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d24:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x348>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	0f1b      	lsrs	r3, r3, #28
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d42:	e003      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d44:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3798      	adds	r7, #152	@ 0x98
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	00f42400 	.word	0x00f42400
 8004d64:	017d7840 	.word	0x017d7840

08004d68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e28d      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8083 	beq.w	8004e8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d88:	4b94      	ldr	r3, [pc, #592]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d019      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d94:	4b91      	ldr	r3, [pc, #580]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d106      	bne.n	8004dae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004da0:	4b8e      	ldr	r3, [pc, #568]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dac:	d00c      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dae:	4b8b      	ldr	r3, [pc, #556]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d112      	bne.n	8004de0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dba:	4b88      	ldr	r3, [pc, #544]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dc6:	d10b      	bne.n	8004de0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc8:	4b84      	ldr	r3, [pc, #528]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d05b      	beq.n	8004e8c <HAL_RCC_OscConfig+0x124>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d157      	bne.n	8004e8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e25a      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de8:	d106      	bne.n	8004df8 <HAL_RCC_OscConfig+0x90>
 8004dea:	4b7c      	ldr	r3, [pc, #496]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a7b      	ldr	r2, [pc, #492]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e01d      	b.n	8004e34 <HAL_RCC_OscConfig+0xcc>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e00:	d10c      	bne.n	8004e1c <HAL_RCC_OscConfig+0xb4>
 8004e02:	4b76      	ldr	r3, [pc, #472]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a75      	ldr	r2, [pc, #468]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	4b73      	ldr	r3, [pc, #460]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a72      	ldr	r2, [pc, #456]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e00b      	b.n	8004e34 <HAL_RCC_OscConfig+0xcc>
 8004e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a6e      	ldr	r2, [pc, #440]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	4b6c      	ldr	r3, [pc, #432]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d013      	beq.n	8004e64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fe f882 	bl	8002f44 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fe f87e 	bl	8002f44 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	@ 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e21f      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	4b61      	ldr	r3, [pc, #388]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0xdc>
 8004e62:	e014      	b.n	8004e8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fe f86e 	bl	8002f44 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e6c:	f7fe f86a 	bl	8002f44 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	@ 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e20b      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7e:	4b57      	ldr	r3, [pc, #348]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x104>
 8004e8a:	e000      	b.n	8004e8e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06f      	beq.n	8004f7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e9a:	4b50      	ldr	r3, [pc, #320]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d017      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
        || \
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d105      	bne.n	8004ebe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ebe:	4b47      	ldr	r3, [pc, #284]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ec6:	2b0c      	cmp	r3, #12
 8004ec8:	d11c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eca:	4b44      	ldr	r3, [pc, #272]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d116      	bne.n	8004f04 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed6:	4b41      	ldr	r3, [pc, #260]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_RCC_OscConfig+0x186>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e1d3      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eee:	4b3b      	ldr	r3, [pc, #236]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4937      	ldr	r1, [pc, #220]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f02:	e03a      	b.n	8004f7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d020      	beq.n	8004f4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f0c:	4b34      	ldr	r3, [pc, #208]	@ (8004fe0 <HAL_RCC_OscConfig+0x278>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fe f817 	bl	8002f44 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f1a:	f7fe f813 	bl	8002f44 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e1b4      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f38:	4b28      	ldr	r3, [pc, #160]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4925      	ldr	r1, [pc, #148]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	600b      	str	r3, [r1, #0]
 8004f4c:	e015      	b.n	8004f7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4e:	4b24      	ldr	r3, [pc, #144]	@ (8004fe0 <HAL_RCC_OscConfig+0x278>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fd fff6 	bl	8002f44 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5c:	f7fd fff2 	bl	8002f44 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e193      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d036      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8e:	4b15      	ldr	r3, [pc, #84]	@ (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f94:	f7fd ffd6 	bl	8002f44 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f9c:	f7fd ffd2 	bl	8002f44 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e173      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fae:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <HAL_RCC_OscConfig+0x274>)
 8004fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x234>
 8004fba:	e01b      	b.n	8004ff4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fbc:	4b09      	ldr	r3, [pc, #36]	@ (8004fe4 <HAL_RCC_OscConfig+0x27c>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc2:	f7fd ffbf 	bl	8002f44 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc8:	e00e      	b.n	8004fe8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fca:	f7fd ffbb 	bl	8002f44 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d907      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e15c      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	42470000 	.word	0x42470000
 8004fe4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe8:	4b8a      	ldr	r3, [pc, #552]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 8004fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1ea      	bne.n	8004fca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8097 	beq.w	8005130 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005006:	4b83      	ldr	r3, [pc, #524]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10f      	bne.n	8005032 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	4b7f      	ldr	r3, [pc, #508]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	4a7e      	ldr	r2, [pc, #504]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005020:	6413      	str	r3, [r2, #64]	@ 0x40
 8005022:	4b7c      	ldr	r3, [pc, #496]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005032:	4b79      	ldr	r3, [pc, #484]	@ (8005218 <HAL_RCC_OscConfig+0x4b0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d118      	bne.n	8005070 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800503e:	4b76      	ldr	r3, [pc, #472]	@ (8005218 <HAL_RCC_OscConfig+0x4b0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a75      	ldr	r2, [pc, #468]	@ (8005218 <HAL_RCC_OscConfig+0x4b0>)
 8005044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800504a:	f7fd ff7b 	bl	8002f44 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005052:	f7fd ff77 	bl	8002f44 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e118      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005064:	4b6c      	ldr	r3, [pc, #432]	@ (8005218 <HAL_RCC_OscConfig+0x4b0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d106      	bne.n	8005086 <HAL_RCC_OscConfig+0x31e>
 8005078:	4b66      	ldr	r3, [pc, #408]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507c:	4a65      	ldr	r2, [pc, #404]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	6713      	str	r3, [r2, #112]	@ 0x70
 8005084:	e01c      	b.n	80050c0 <HAL_RCC_OscConfig+0x358>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b05      	cmp	r3, #5
 800508c:	d10c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x340>
 800508e:	4b61      	ldr	r3, [pc, #388]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005092:	4a60      	ldr	r2, [pc, #384]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 8005094:	f043 0304 	orr.w	r3, r3, #4
 8005098:	6713      	str	r3, [r2, #112]	@ 0x70
 800509a:	4b5e      	ldr	r3, [pc, #376]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509e:	4a5d      	ldr	r2, [pc, #372]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a6:	e00b      	b.n	80050c0 <HAL_RCC_OscConfig+0x358>
 80050a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ac:	4a59      	ldr	r2, [pc, #356]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b4:	4b57      	ldr	r3, [pc, #348]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b8:	4a56      	ldr	r2, [pc, #344]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 80050ba:	f023 0304 	bic.w	r3, r3, #4
 80050be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d015      	beq.n	80050f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c8:	f7fd ff3c 	bl	8002f44 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ce:	e00a      	b.n	80050e6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d0:	f7fd ff38 	bl	8002f44 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e0d7      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0ee      	beq.n	80050d0 <HAL_RCC_OscConfig+0x368>
 80050f2:	e014      	b.n	800511e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f4:	f7fd ff26 	bl	8002f44 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fc:	f7fd ff22 	bl	8002f44 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e0c1      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005112:	4b40      	ldr	r3, [pc, #256]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1ee      	bne.n	80050fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d105      	bne.n	8005130 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005124:	4b3b      	ldr	r3, [pc, #236]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 8005126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005128:	4a3a      	ldr	r2, [pc, #232]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 800512a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800512e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80ad 	beq.w	8005294 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800513a:	4b36      	ldr	r3, [pc, #216]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b08      	cmp	r3, #8
 8005144:	d060      	beq.n	8005208 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d145      	bne.n	80051da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514e:	4b33      	ldr	r3, [pc, #204]	@ (800521c <HAL_RCC_OscConfig+0x4b4>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fd fef6 	bl	8002f44 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515c:	f7fd fef2 	bl	8002f44 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e093      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516e:	4b29      	ldr	r3, [pc, #164]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69da      	ldr	r2, [r3, #28]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	019b      	lsls	r3, r3, #6
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	3b01      	subs	r3, #1
 8005194:	041b      	lsls	r3, r3, #16
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	491b      	ldr	r1, [pc, #108]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ac:	4b1b      	ldr	r3, [pc, #108]	@ (800521c <HAL_RCC_OscConfig+0x4b4>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fd fec7 	bl	8002f44 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ba:	f7fd fec3 	bl	8002f44 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e064      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051cc:	4b11      	ldr	r3, [pc, #68]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f0      	beq.n	80051ba <HAL_RCC_OscConfig+0x452>
 80051d8:	e05c      	b.n	8005294 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	4b10      	ldr	r3, [pc, #64]	@ (800521c <HAL_RCC_OscConfig+0x4b4>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd feb0 	bl	8002f44 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fd feac 	bl	8002f44 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e04d      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fa:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x480>
 8005206:	e045      	b.n	8005294 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d107      	bne.n	8005220 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e040      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
 8005214:	40023800 	.word	0x40023800
 8005218:	40007000 	.word	0x40007000
 800521c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005220:	4b1f      	ldr	r3, [pc, #124]	@ (80052a0 <HAL_RCC_OscConfig+0x538>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d030      	beq.n	8005290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005238:	429a      	cmp	r2, r3
 800523a:	d129      	bne.n	8005290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005246:	429a      	cmp	r2, r3
 8005248:	d122      	bne.n	8005290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005250:	4013      	ands	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005258:	4293      	cmp	r3, r2
 800525a:	d119      	bne.n	8005290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	085b      	lsrs	r3, r3, #1
 8005268:	3b01      	subs	r3, #1
 800526a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d10f      	bne.n	8005290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d107      	bne.n	8005290 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40023800 	.word	0x40023800

080052a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e041      	b.n	800533a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fd fbfa 	bl	8002ac4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f000 fa28 	bl	8005738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <HAL_TIM_PWM_Start+0x24>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e022      	b.n	80053ae <HAL_TIM_PWM_Start+0x6a>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b04      	cmp	r3, #4
 800536c:	d109      	bne.n	8005382 <HAL_TIM_PWM_Start+0x3e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	bf14      	ite	ne
 800537a:	2301      	movne	r3, #1
 800537c:	2300      	moveq	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e015      	b.n	80053ae <HAL_TIM_PWM_Start+0x6a>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d109      	bne.n	800539c <HAL_TIM_PWM_Start+0x58>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e008      	b.n	80053ae <HAL_TIM_PWM_Start+0x6a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	bf14      	ite	ne
 80053a8:	2301      	movne	r3, #1
 80053aa:	2300      	moveq	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e07c      	b.n	80054b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start+0x82>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c4:	e013      	b.n	80053ee <HAL_TIM_PWM_Start+0xaa>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0x92>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053d4:	e00b      	b.n	80053ee <HAL_TIM_PWM_Start+0xaa>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_PWM_Start+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e4:	e003      	b.n	80053ee <HAL_TIM_PWM_Start+0xaa>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fbfa 	bl	8005bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a2d      	ldr	r2, [pc, #180]	@ (80054b8 <HAL_TIM_PWM_Start+0x174>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_TIM_PWM_Start+0xcc>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2c      	ldr	r2, [pc, #176]	@ (80054bc <HAL_TIM_PWM_Start+0x178>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d101      	bne.n	8005414 <HAL_TIM_PWM_Start+0xd0>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_TIM_PWM_Start+0xd2>
 8005414:	2300      	movs	r3, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a22      	ldr	r2, [pc, #136]	@ (80054b8 <HAL_TIM_PWM_Start+0x174>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d022      	beq.n	800547a <HAL_TIM_PWM_Start+0x136>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543c:	d01d      	beq.n	800547a <HAL_TIM_PWM_Start+0x136>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1f      	ldr	r2, [pc, #124]	@ (80054c0 <HAL_TIM_PWM_Start+0x17c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d018      	beq.n	800547a <HAL_TIM_PWM_Start+0x136>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1d      	ldr	r2, [pc, #116]	@ (80054c4 <HAL_TIM_PWM_Start+0x180>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_TIM_PWM_Start+0x136>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <HAL_TIM_PWM_Start+0x184>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_TIM_PWM_Start+0x136>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a16      	ldr	r2, [pc, #88]	@ (80054bc <HAL_TIM_PWM_Start+0x178>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_TIM_PWM_Start+0x136>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a18      	ldr	r2, [pc, #96]	@ (80054cc <HAL_TIM_PWM_Start+0x188>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_TIM_PWM_Start+0x136>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a16      	ldr	r2, [pc, #88]	@ (80054d0 <HAL_TIM_PWM_Start+0x18c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d111      	bne.n	800549e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b06      	cmp	r3, #6
 800548a:	d010      	beq.n	80054ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549c:	e007      	b.n	80054ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40010400 	.word	0x40010400
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800
 80054c8:	40000c00 	.word	0x40000c00
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40001800 	.word	0x40001800

080054d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2200      	movs	r2, #0
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fb82 	bl	8005bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2e      	ldr	r2, [pc, #184]	@ (80055ac <HAL_TIM_PWM_Stop+0xd8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_PWM_Stop+0x2c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2d      	ldr	r2, [pc, #180]	@ (80055b0 <HAL_TIM_PWM_Stop+0xdc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_PWM_Stop+0x30>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_TIM_PWM_Stop+0x32>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d017      	beq.n	800553a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005514:	4013      	ands	r3, r2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <HAL_TIM_PWM_Stop+0x66>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	f240 4344 	movw	r3, #1092	@ 0x444
 8005524:	4013      	ands	r3, r2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <HAL_TIM_PWM_Stop+0x66>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005538:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10f      	bne.n	800556a <HAL_TIM_PWM_Stop+0x96>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a1a      	ldr	r2, [r3, #32]
 8005550:	f240 4344 	movw	r3, #1092	@ 0x444
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <HAL_TIM_PWM_Stop+0x96>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Stop+0xa6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005578:	e013      	b.n	80055a2 <HAL_TIM_PWM_Stop+0xce>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Stop+0xb6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005588:	e00b      	b.n	80055a2 <HAL_TIM_PWM_Stop+0xce>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Stop+0xc6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005598:	e003      	b.n	80055a2 <HAL_TIM_PWM_Stop+0xce>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40010400 	.word	0x40010400

080055b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e0ae      	b.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	f200 809f 	bhi.w	8005720 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055e2:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	08005721 	.word	0x08005721
 80055f0:	08005721 	.word	0x08005721
 80055f4:	08005721 	.word	0x08005721
 80055f8:	0800565d 	.word	0x0800565d
 80055fc:	08005721 	.word	0x08005721
 8005600:	08005721 	.word	0x08005721
 8005604:	08005721 	.word	0x08005721
 8005608:	0800569f 	.word	0x0800569f
 800560c:	08005721 	.word	0x08005721
 8005610:	08005721 	.word	0x08005721
 8005614:	08005721 	.word	0x08005721
 8005618:	080056df 	.word	0x080056df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 f934 	bl	8005890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0208 	orr.w	r2, r2, #8
 8005636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0204 	bic.w	r2, r2, #4
 8005646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6999      	ldr	r1, [r3, #24]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	619a      	str	r2, [r3, #24]
      break;
 800565a:	e064      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f984 	bl	8005970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	021a      	lsls	r2, r3, #8
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	619a      	str	r2, [r3, #24]
      break;
 800569c:	e043      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 f9d9 	bl	8005a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0208 	orr.w	r2, r2, #8
 80056b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0204 	bic.w	r2, r2, #4
 80056c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69d9      	ldr	r1, [r3, #28]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	61da      	str	r2, [r3, #28]
      break;
 80056dc:	e023      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fa2d 	bl	8005b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69d9      	ldr	r1, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	021a      	lsls	r2, r3, #8
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	61da      	str	r2, [r3, #28]
      break;
 800571e:	e002      	b.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
      break;
 8005724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800572e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a46      	ldr	r2, [pc, #280]	@ (8005864 <TIM_Base_SetConfig+0x12c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a43      	ldr	r2, [pc, #268]	@ (8005868 <TIM_Base_SetConfig+0x130>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a42      	ldr	r2, [pc, #264]	@ (800586c <TIM_Base_SetConfig+0x134>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a41      	ldr	r2, [pc, #260]	@ (8005870 <TIM_Base_SetConfig+0x138>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a40      	ldr	r2, [pc, #256]	@ (8005874 <TIM_Base_SetConfig+0x13c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a35      	ldr	r2, [pc, #212]	@ (8005864 <TIM_Base_SetConfig+0x12c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d02b      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005798:	d027      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a32      	ldr	r2, [pc, #200]	@ (8005868 <TIM_Base_SetConfig+0x130>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d023      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a31      	ldr	r2, [pc, #196]	@ (800586c <TIM_Base_SetConfig+0x134>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01f      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a30      	ldr	r2, [pc, #192]	@ (8005870 <TIM_Base_SetConfig+0x138>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01b      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005874 <TIM_Base_SetConfig+0x13c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d017      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005878 <TIM_Base_SetConfig+0x140>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a2d      	ldr	r2, [pc, #180]	@ (800587c <TIM_Base_SetConfig+0x144>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00f      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005880 <TIM_Base_SetConfig+0x148>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00b      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005884 <TIM_Base_SetConfig+0x14c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d007      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005888 <TIM_Base_SetConfig+0x150>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a29      	ldr	r2, [pc, #164]	@ (800588c <TIM_Base_SetConfig+0x154>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d108      	bne.n	80057fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a10      	ldr	r2, [pc, #64]	@ (8005864 <TIM_Base_SetConfig+0x12c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a12      	ldr	r2, [pc, #72]	@ (8005874 <TIM_Base_SetConfig+0x13c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d103      	bne.n	8005838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d105      	bne.n	8005856 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f023 0201 	bic.w	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	611a      	str	r2, [r3, #16]
  }
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000
 8005868:	40000400 	.word	0x40000400
 800586c:	40000800 	.word	0x40000800
 8005870:	40000c00 	.word	0x40000c00
 8005874:	40010400 	.word	0x40010400
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800
 8005884:	40001800 	.word	0x40001800
 8005888:	40001c00 	.word	0x40001c00
 800588c:	40002000 	.word	0x40002000

08005890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f023 0201 	bic.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f023 0302 	bic.w	r3, r3, #2
 80058d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a20      	ldr	r2, [pc, #128]	@ (8005968 <TIM_OC1_SetConfig+0xd8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_OC1_SetConfig+0x64>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a1f      	ldr	r2, [pc, #124]	@ (800596c <TIM_OC1_SetConfig+0xdc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d10c      	bne.n	800590e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f023 0308 	bic.w	r3, r3, #8
 80058fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 0304 	bic.w	r3, r3, #4
 800590c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a15      	ldr	r2, [pc, #84]	@ (8005968 <TIM_OC1_SetConfig+0xd8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_OC1_SetConfig+0x8e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a14      	ldr	r2, [pc, #80]	@ (800596c <TIM_OC1_SetConfig+0xdc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d111      	bne.n	8005942 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800592c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	621a      	str	r2, [r3, #32]
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40010000 	.word	0x40010000
 800596c:	40010400 	.word	0x40010400

08005970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f023 0210 	bic.w	r2, r3, #16
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800599e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0320 	bic.w	r3, r3, #32
 80059ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a22      	ldr	r2, [pc, #136]	@ (8005a54 <TIM_OC2_SetConfig+0xe4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC2_SetConfig+0x68>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a21      	ldr	r2, [pc, #132]	@ (8005a58 <TIM_OC2_SetConfig+0xe8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d10d      	bne.n	80059f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a17      	ldr	r2, [pc, #92]	@ (8005a54 <TIM_OC2_SetConfig+0xe4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_OC2_SetConfig+0x94>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a16      	ldr	r2, [pc, #88]	@ (8005a58 <TIM_OC2_SetConfig+0xe8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d113      	bne.n	8005a2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40010400 	.word	0x40010400

08005a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a21      	ldr	r2, [pc, #132]	@ (8005b3c <TIM_OC3_SetConfig+0xe0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC3_SetConfig+0x66>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a20      	ldr	r2, [pc, #128]	@ (8005b40 <TIM_OC3_SetConfig+0xe4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10d      	bne.n	8005ade <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a16      	ldr	r2, [pc, #88]	@ (8005b3c <TIM_OC3_SetConfig+0xe0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_OC3_SetConfig+0x92>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a15      	ldr	r2, [pc, #84]	@ (8005b40 <TIM_OC3_SetConfig+0xe4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d113      	bne.n	8005b16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	bf00      	nop
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40010400 	.word	0x40010400

08005b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	031b      	lsls	r3, r3, #12
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a12      	ldr	r2, [pc, #72]	@ (8005be8 <TIM_OC4_SetConfig+0xa4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_OC4_SetConfig+0x68>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a11      	ldr	r2, [pc, #68]	@ (8005bec <TIM_OC4_SetConfig+0xa8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d109      	bne.n	8005bc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	019b      	lsls	r3, r3, #6
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400

08005bf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f003 031f 	and.w	r3, r3, #31
 8005c02:	2201      	movs	r2, #1
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1a      	ldr	r2, [r3, #32]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	401a      	ands	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a1a      	ldr	r2, [r3, #32]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e05a      	b.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a21      	ldr	r2, [pc, #132]	@ (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d022      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca0:	d01d      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d018      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1a      	ldr	r2, [pc, #104]	@ (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a18      	ldr	r2, [pc, #96]	@ (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a17      	ldr	r2, [pc, #92]	@ (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a15      	ldr	r2, [pc, #84]	@ (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40000800 	.word	0x40000800
 8005d24:	40000c00 	.word	0x40000c00
 8005d28:	40010400 	.word	0x40010400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40001800 	.word	0x40001800

08005d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e042      	b.n	8005dcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fc ff4c 	bl	8002bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2224      	movs	r2, #36	@ 0x24
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fa09 	bl	8006190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	@ 0x28
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d175      	bne.n	8005ee0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_UART_Transmit+0x2c>
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e06e      	b.n	8005ee2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2221      	movs	r2, #33	@ 0x21
 8005e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e12:	f7fd f897 	bl	8002f44 <HAL_GetTick>
 8005e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	88fa      	ldrh	r2, [r7, #6]
 8005e1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2c:	d108      	bne.n	8005e40 <HAL_UART_Transmit+0x6c>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d104      	bne.n	8005e40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	e003      	b.n	8005e48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e48:	e02e      	b.n	8005ea8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2200      	movs	r2, #0
 8005e52:	2180      	movs	r1, #128	@ 0x80
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f8df 	bl	8006018 <UART_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e03a      	b.n	8005ee2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	3302      	adds	r3, #2
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	e007      	b.n	8005e9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	3301      	adds	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1cb      	bne.n	8005e4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2140      	movs	r1, #64	@ 0x40
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f8ab 	bl	8006018 <UART_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e006      	b.n	8005ee2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e000      	b.n	8005ee2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b08a      	sub	sp, #40	@ 0x28
 8005eee:	af02      	add	r7, sp, #8
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	f040 8081 	bne.w	800600e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_UART_Receive+0x2e>
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e079      	b.n	8006010 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2222      	movs	r2, #34	@ 0x22
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f30:	f7fd f808 	bl	8002f44 <HAL_GetTick>
 8005f34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	88fa      	ldrh	r2, [r7, #6]
 8005f40:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4a:	d108      	bne.n	8005f5e <HAL_UART_Receive+0x74>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d104      	bne.n	8005f5e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e003      	b.n	8005f66 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005f66:	e047      	b.n	8005ff8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2120      	movs	r1, #32
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f850 	bl	8006018 <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e042      	b.n	8006010 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10c      	bne.n	8005faa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	3302      	adds	r3, #2
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	e01f      	b.n	8005fea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb2:	d007      	beq.n	8005fc4 <HAL_UART_Receive+0xda>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <HAL_UART_Receive+0xe8>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	e008      	b.n	8005fe4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1b2      	bne.n	8005f68 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e000      	b.n	8006010 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800600e:	2302      	movs	r3, #2
  }
}
 8006010:	4618      	mov	r0, r3
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	603b      	str	r3, [r7, #0]
 8006024:	4613      	mov	r3, r2
 8006026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006028:	e03b      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d037      	beq.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006032:	f7fc ff87 	bl	8002f44 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	429a      	cmp	r2, r3
 8006040:	d302      	bcc.n	8006048 <UART_WaitOnFlagUntilTimeout+0x30>
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e03a      	b.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d023      	beq.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b80      	cmp	r3, #128	@ 0x80
 800605e:	d020      	beq.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b40      	cmp	r3, #64	@ 0x40
 8006064:	d01d      	beq.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d116      	bne.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f81d 	bl	80060ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2208      	movs	r2, #8
 8006094:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e00f      	b.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4013      	ands	r3, r2
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	bf0c      	ite	eq
 80060b2:	2301      	moveq	r3, #1
 80060b4:	2300      	movne	r3, #0
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d0b4      	beq.n	800602a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b095      	sub	sp, #84	@ 0x54
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80060f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3314      	adds	r3, #20
 800610c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	61fb      	str	r3, [r7, #28]
   return(result);
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f023 0301 	bic.w	r3, r3, #1
 800611c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006128:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800612c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613e:	2b01      	cmp	r3, #1
 8006140:	d119      	bne.n	8006176 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	330c      	adds	r3, #12
 8006148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	60bb      	str	r3, [r7, #8]
   return(result);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f023 0310 	bic.w	r3, r3, #16
 8006158:	647b      	str	r3, [r7, #68]	@ 0x44
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	330c      	adds	r3, #12
 8006160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006162:	61ba      	str	r2, [r7, #24]
 8006164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6979      	ldr	r1, [r7, #20]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	613b      	str	r3, [r7, #16]
   return(result);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e5      	bne.n	8006142 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006184:	bf00      	nop
 8006186:	3754      	adds	r7, #84	@ 0x54
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006194:	b0c0      	sub	sp, #256	@ 0x100
 8006196:	af00      	add	r7, sp, #0
 8006198:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ac:	68d9      	ldr	r1, [r3, #12]
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	ea40 0301 	orr.w	r3, r0, r1
 80061b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061e8:	f021 010c 	bic.w	r1, r1, #12
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061f6:	430b      	orrs	r3, r1
 80061f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620a:	6999      	ldr	r1, [r3, #24]
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	ea40 0301 	orr.w	r3, r0, r1
 8006216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b8f      	ldr	r3, [pc, #572]	@ (800645c <UART_SetConfig+0x2cc>)
 8006220:	429a      	cmp	r2, r3
 8006222:	d005      	beq.n	8006230 <UART_SetConfig+0xa0>
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4b8d      	ldr	r3, [pc, #564]	@ (8006460 <UART_SetConfig+0x2d0>)
 800622c:	429a      	cmp	r2, r3
 800622e:	d104      	bne.n	800623a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7fe fbdc 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8006234:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006238:	e003      	b.n	8006242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800623a:	f7fe fbc3 	bl	80049c4 <HAL_RCC_GetPCLK1Freq>
 800623e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800624c:	f040 810c 	bne.w	8006468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006254:	2200      	movs	r2, #0
 8006256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800625a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800625e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006262:	4622      	mov	r2, r4
 8006264:	462b      	mov	r3, r5
 8006266:	1891      	adds	r1, r2, r2
 8006268:	65b9      	str	r1, [r7, #88]	@ 0x58
 800626a:	415b      	adcs	r3, r3
 800626c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800626e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006272:	4621      	mov	r1, r4
 8006274:	eb12 0801 	adds.w	r8, r2, r1
 8006278:	4629      	mov	r1, r5
 800627a:	eb43 0901 	adc.w	r9, r3, r1
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	f04f 0300 	mov.w	r3, #0
 8006286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800628a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800628e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006292:	4690      	mov	r8, r2
 8006294:	4699      	mov	r9, r3
 8006296:	4623      	mov	r3, r4
 8006298:	eb18 0303 	adds.w	r3, r8, r3
 800629c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062a0:	462b      	mov	r3, r5
 80062a2:	eb49 0303 	adc.w	r3, r9, r3
 80062a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80062ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062be:	460b      	mov	r3, r1
 80062c0:	18db      	adds	r3, r3, r3
 80062c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80062c4:	4613      	mov	r3, r2
 80062c6:	eb42 0303 	adc.w	r3, r2, r3
 80062ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80062cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062d4:	f7fa fcd8 	bl	8000c88 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4b61      	ldr	r3, [pc, #388]	@ (8006464 <UART_SetConfig+0x2d4>)
 80062de:	fba3 2302 	umull	r2, r3, r3, r2
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	011c      	lsls	r4, r3, #4
 80062e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062f8:	4642      	mov	r2, r8
 80062fa:	464b      	mov	r3, r9
 80062fc:	1891      	adds	r1, r2, r2
 80062fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006300:	415b      	adcs	r3, r3
 8006302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006308:	4641      	mov	r1, r8
 800630a:	eb12 0a01 	adds.w	sl, r2, r1
 800630e:	4649      	mov	r1, r9
 8006310:	eb43 0b01 	adc.w	fp, r3, r1
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006328:	4692      	mov	sl, r2
 800632a:	469b      	mov	fp, r3
 800632c:	4643      	mov	r3, r8
 800632e:	eb1a 0303 	adds.w	r3, sl, r3
 8006332:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006336:	464b      	mov	r3, r9
 8006338:	eb4b 0303 	adc.w	r3, fp, r3
 800633c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800634c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006354:	460b      	mov	r3, r1
 8006356:	18db      	adds	r3, r3, r3
 8006358:	643b      	str	r3, [r7, #64]	@ 0x40
 800635a:	4613      	mov	r3, r2
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	647b      	str	r3, [r7, #68]	@ 0x44
 8006362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800636a:	f7fa fc8d 	bl	8000c88 <__aeabi_uldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4611      	mov	r1, r2
 8006374:	4b3b      	ldr	r3, [pc, #236]	@ (8006464 <UART_SetConfig+0x2d4>)
 8006376:	fba3 2301 	umull	r2, r3, r3, r1
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2264      	movs	r2, #100	@ 0x64
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	1acb      	subs	r3, r1, r3
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800638a:	4b36      	ldr	r3, [pc, #216]	@ (8006464 <UART_SetConfig+0x2d4>)
 800638c:	fba3 2302 	umull	r2, r3, r3, r2
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006398:	441c      	add	r4, r3
 800639a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80063a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	1891      	adds	r1, r2, r2
 80063b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80063b4:	415b      	adcs	r3, r3
 80063b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80063bc:	4641      	mov	r1, r8
 80063be:	1851      	adds	r1, r2, r1
 80063c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80063c2:	4649      	mov	r1, r9
 80063c4:	414b      	adcs	r3, r1
 80063c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063d4:	4659      	mov	r1, fp
 80063d6:	00cb      	lsls	r3, r1, #3
 80063d8:	4651      	mov	r1, sl
 80063da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063de:	4651      	mov	r1, sl
 80063e0:	00ca      	lsls	r2, r1, #3
 80063e2:	4610      	mov	r0, r2
 80063e4:	4619      	mov	r1, r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	4642      	mov	r2, r8
 80063ea:	189b      	adds	r3, r3, r2
 80063ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063f0:	464b      	mov	r3, r9
 80063f2:	460a      	mov	r2, r1
 80063f4:	eb42 0303 	adc.w	r3, r2, r3
 80063f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006408:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800640c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006410:	460b      	mov	r3, r1
 8006412:	18db      	adds	r3, r3, r3
 8006414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006416:	4613      	mov	r3, r2
 8006418:	eb42 0303 	adc.w	r3, r2, r3
 800641c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800641e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006426:	f7fa fc2f 	bl	8000c88 <__aeabi_uldivmod>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <UART_SetConfig+0x2d4>)
 8006430:	fba3 1302 	umull	r1, r3, r3, r2
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	2164      	movs	r1, #100	@ 0x64
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	3332      	adds	r3, #50	@ 0x32
 8006442:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <UART_SetConfig+0x2d4>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	f003 0207 	and.w	r2, r3, #7
 800644e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4422      	add	r2, r4
 8006456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006458:	e106      	b.n	8006668 <UART_SetConfig+0x4d8>
 800645a:	bf00      	nop
 800645c:	40011000 	.word	0x40011000
 8006460:	40011400 	.word	0x40011400
 8006464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800646c:	2200      	movs	r2, #0
 800646e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006472:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800647a:	4642      	mov	r2, r8
 800647c:	464b      	mov	r3, r9
 800647e:	1891      	adds	r1, r2, r2
 8006480:	6239      	str	r1, [r7, #32]
 8006482:	415b      	adcs	r3, r3
 8006484:	627b      	str	r3, [r7, #36]	@ 0x24
 8006486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800648a:	4641      	mov	r1, r8
 800648c:	1854      	adds	r4, r2, r1
 800648e:	4649      	mov	r1, r9
 8006490:	eb43 0501 	adc.w	r5, r3, r1
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	00eb      	lsls	r3, r5, #3
 800649e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064a2:	00e2      	lsls	r2, r4, #3
 80064a4:	4614      	mov	r4, r2
 80064a6:	461d      	mov	r5, r3
 80064a8:	4643      	mov	r3, r8
 80064aa:	18e3      	adds	r3, r4, r3
 80064ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064b0:	464b      	mov	r3, r9
 80064b2:	eb45 0303 	adc.w	r3, r5, r3
 80064b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064d6:	4629      	mov	r1, r5
 80064d8:	008b      	lsls	r3, r1, #2
 80064da:	4621      	mov	r1, r4
 80064dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e0:	4621      	mov	r1, r4
 80064e2:	008a      	lsls	r2, r1, #2
 80064e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064e8:	f7fa fbce 	bl	8000c88 <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4b60      	ldr	r3, [pc, #384]	@ (8006674 <UART_SetConfig+0x4e4>)
 80064f2:	fba3 2302 	umull	r2, r3, r3, r2
 80064f6:	095b      	lsrs	r3, r3, #5
 80064f8:	011c      	lsls	r4, r3, #4
 80064fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	1891      	adds	r1, r2, r2
 8006512:	61b9      	str	r1, [r7, #24]
 8006514:	415b      	adcs	r3, r3
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800651c:	4641      	mov	r1, r8
 800651e:	1851      	adds	r1, r2, r1
 8006520:	6139      	str	r1, [r7, #16]
 8006522:	4649      	mov	r1, r9
 8006524:	414b      	adcs	r3, r1
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006534:	4659      	mov	r1, fp
 8006536:	00cb      	lsls	r3, r1, #3
 8006538:	4651      	mov	r1, sl
 800653a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800653e:	4651      	mov	r1, sl
 8006540:	00ca      	lsls	r2, r1, #3
 8006542:	4610      	mov	r0, r2
 8006544:	4619      	mov	r1, r3
 8006546:	4603      	mov	r3, r0
 8006548:	4642      	mov	r2, r8
 800654a:	189b      	adds	r3, r3, r2
 800654c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006550:	464b      	mov	r3, r9
 8006552:	460a      	mov	r2, r1
 8006554:	eb42 0303 	adc.w	r3, r2, r3
 8006558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006566:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006574:	4649      	mov	r1, r9
 8006576:	008b      	lsls	r3, r1, #2
 8006578:	4641      	mov	r1, r8
 800657a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657e:	4641      	mov	r1, r8
 8006580:	008a      	lsls	r2, r1, #2
 8006582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006586:	f7fa fb7f 	bl	8000c88 <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4611      	mov	r1, r2
 8006590:	4b38      	ldr	r3, [pc, #224]	@ (8006674 <UART_SetConfig+0x4e4>)
 8006592:	fba3 2301 	umull	r2, r3, r3, r1
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	2264      	movs	r2, #100	@ 0x64
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	1acb      	subs	r3, r1, r3
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	3332      	adds	r3, #50	@ 0x32
 80065a4:	4a33      	ldr	r2, [pc, #204]	@ (8006674 <UART_SetConfig+0x4e4>)
 80065a6:	fba2 2303 	umull	r2, r3, r2, r3
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065b0:	441c      	add	r4, r3
 80065b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b6:	2200      	movs	r2, #0
 80065b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80065ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80065bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80065c0:	4642      	mov	r2, r8
 80065c2:	464b      	mov	r3, r9
 80065c4:	1891      	adds	r1, r2, r2
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	415b      	adcs	r3, r3
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065d0:	4641      	mov	r1, r8
 80065d2:	1851      	adds	r1, r2, r1
 80065d4:	6039      	str	r1, [r7, #0]
 80065d6:	4649      	mov	r1, r9
 80065d8:	414b      	adcs	r3, r1
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065e8:	4659      	mov	r1, fp
 80065ea:	00cb      	lsls	r3, r1, #3
 80065ec:	4651      	mov	r1, sl
 80065ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065f2:	4651      	mov	r1, sl
 80065f4:	00ca      	lsls	r2, r1, #3
 80065f6:	4610      	mov	r0, r2
 80065f8:	4619      	mov	r1, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	4642      	mov	r2, r8
 80065fe:	189b      	adds	r3, r3, r2
 8006600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006602:	464b      	mov	r3, r9
 8006604:	460a      	mov	r2, r1
 8006606:	eb42 0303 	adc.w	r3, r2, r3
 800660a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	663b      	str	r3, [r7, #96]	@ 0x60
 8006616:	667a      	str	r2, [r7, #100]	@ 0x64
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006624:	4649      	mov	r1, r9
 8006626:	008b      	lsls	r3, r1, #2
 8006628:	4641      	mov	r1, r8
 800662a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662e:	4641      	mov	r1, r8
 8006630:	008a      	lsls	r2, r1, #2
 8006632:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006636:	f7fa fb27 	bl	8000c88 <__aeabi_uldivmod>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4b0d      	ldr	r3, [pc, #52]	@ (8006674 <UART_SetConfig+0x4e4>)
 8006640:	fba3 1302 	umull	r1, r3, r3, r2
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	2164      	movs	r1, #100	@ 0x64
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	3332      	adds	r3, #50	@ 0x32
 8006652:	4a08      	ldr	r2, [pc, #32]	@ (8006674 <UART_SetConfig+0x4e4>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	f003 020f 	and.w	r2, r3, #15
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4422      	add	r2, r4
 8006666:	609a      	str	r2, [r3, #8]
}
 8006668:	bf00      	nop
 800666a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800666e:	46bd      	mov	sp, r7
 8006670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006674:	51eb851f 	.word	0x51eb851f

08006678 <atoi>:
 8006678:	220a      	movs	r2, #10
 800667a:	2100      	movs	r1, #0
 800667c:	f000 b938 	b.w	80068f0 <strtol>

08006680 <malloc>:
 8006680:	4b02      	ldr	r3, [pc, #8]	@ (800668c <malloc+0xc>)
 8006682:	4601      	mov	r1, r0
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	f000 b82d 	b.w	80066e4 <_malloc_r>
 800668a:	bf00      	nop
 800668c:	20000064 	.word	0x20000064

08006690 <free>:
 8006690:	4b02      	ldr	r3, [pc, #8]	@ (800669c <free+0xc>)
 8006692:	4601      	mov	r1, r0
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	f000 b9ed 	b.w	8006a74 <_free_r>
 800669a:	bf00      	nop
 800669c:	20000064 	.word	0x20000064

080066a0 <sbrk_aligned>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	4e0f      	ldr	r6, [pc, #60]	@ (80066e0 <sbrk_aligned+0x40>)
 80066a4:	460c      	mov	r4, r1
 80066a6:	6831      	ldr	r1, [r6, #0]
 80066a8:	4605      	mov	r5, r0
 80066aa:	b911      	cbnz	r1, 80066b2 <sbrk_aligned+0x12>
 80066ac:	f000 f998 	bl	80069e0 <_sbrk_r>
 80066b0:	6030      	str	r0, [r6, #0]
 80066b2:	4621      	mov	r1, r4
 80066b4:	4628      	mov	r0, r5
 80066b6:	f000 f993 	bl	80069e0 <_sbrk_r>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d103      	bne.n	80066c6 <sbrk_aligned+0x26>
 80066be:	f04f 34ff 	mov.w	r4, #4294967295
 80066c2:	4620      	mov	r0, r4
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
 80066c6:	1cc4      	adds	r4, r0, #3
 80066c8:	f024 0403 	bic.w	r4, r4, #3
 80066cc:	42a0      	cmp	r0, r4
 80066ce:	d0f8      	beq.n	80066c2 <sbrk_aligned+0x22>
 80066d0:	1a21      	subs	r1, r4, r0
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f984 	bl	80069e0 <_sbrk_r>
 80066d8:	3001      	adds	r0, #1
 80066da:	d1f2      	bne.n	80066c2 <sbrk_aligned+0x22>
 80066dc:	e7ef      	b.n	80066be <sbrk_aligned+0x1e>
 80066de:	bf00      	nop
 80066e0:	20000a20 	.word	0x20000a20

080066e4 <_malloc_r>:
 80066e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e8:	1ccd      	adds	r5, r1, #3
 80066ea:	f025 0503 	bic.w	r5, r5, #3
 80066ee:	3508      	adds	r5, #8
 80066f0:	2d0c      	cmp	r5, #12
 80066f2:	bf38      	it	cc
 80066f4:	250c      	movcc	r5, #12
 80066f6:	2d00      	cmp	r5, #0
 80066f8:	4606      	mov	r6, r0
 80066fa:	db01      	blt.n	8006700 <_malloc_r+0x1c>
 80066fc:	42a9      	cmp	r1, r5
 80066fe:	d904      	bls.n	800670a <_malloc_r+0x26>
 8006700:	230c      	movs	r3, #12
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	2000      	movs	r0, #0
 8006706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067e0 <_malloc_r+0xfc>
 800670e:	f000 f869 	bl	80067e4 <__malloc_lock>
 8006712:	f8d8 3000 	ldr.w	r3, [r8]
 8006716:	461c      	mov	r4, r3
 8006718:	bb44      	cbnz	r4, 800676c <_malloc_r+0x88>
 800671a:	4629      	mov	r1, r5
 800671c:	4630      	mov	r0, r6
 800671e:	f7ff ffbf 	bl	80066a0 <sbrk_aligned>
 8006722:	1c43      	adds	r3, r0, #1
 8006724:	4604      	mov	r4, r0
 8006726:	d158      	bne.n	80067da <_malloc_r+0xf6>
 8006728:	f8d8 4000 	ldr.w	r4, [r8]
 800672c:	4627      	mov	r7, r4
 800672e:	2f00      	cmp	r7, #0
 8006730:	d143      	bne.n	80067ba <_malloc_r+0xd6>
 8006732:	2c00      	cmp	r4, #0
 8006734:	d04b      	beq.n	80067ce <_malloc_r+0xea>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	4639      	mov	r1, r7
 800673a:	4630      	mov	r0, r6
 800673c:	eb04 0903 	add.w	r9, r4, r3
 8006740:	f000 f94e 	bl	80069e0 <_sbrk_r>
 8006744:	4581      	cmp	r9, r0
 8006746:	d142      	bne.n	80067ce <_malloc_r+0xea>
 8006748:	6821      	ldr	r1, [r4, #0]
 800674a:	1a6d      	subs	r5, r5, r1
 800674c:	4629      	mov	r1, r5
 800674e:	4630      	mov	r0, r6
 8006750:	f7ff ffa6 	bl	80066a0 <sbrk_aligned>
 8006754:	3001      	adds	r0, #1
 8006756:	d03a      	beq.n	80067ce <_malloc_r+0xea>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	442b      	add	r3, r5
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	f8d8 3000 	ldr.w	r3, [r8]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	bb62      	cbnz	r2, 80067c0 <_malloc_r+0xdc>
 8006766:	f8c8 7000 	str.w	r7, [r8]
 800676a:	e00f      	b.n	800678c <_malloc_r+0xa8>
 800676c:	6822      	ldr	r2, [r4, #0]
 800676e:	1b52      	subs	r2, r2, r5
 8006770:	d420      	bmi.n	80067b4 <_malloc_r+0xd0>
 8006772:	2a0b      	cmp	r2, #11
 8006774:	d917      	bls.n	80067a6 <_malloc_r+0xc2>
 8006776:	1961      	adds	r1, r4, r5
 8006778:	42a3      	cmp	r3, r4
 800677a:	6025      	str	r5, [r4, #0]
 800677c:	bf18      	it	ne
 800677e:	6059      	strne	r1, [r3, #4]
 8006780:	6863      	ldr	r3, [r4, #4]
 8006782:	bf08      	it	eq
 8006784:	f8c8 1000 	streq.w	r1, [r8]
 8006788:	5162      	str	r2, [r4, r5]
 800678a:	604b      	str	r3, [r1, #4]
 800678c:	4630      	mov	r0, r6
 800678e:	f000 f82f 	bl	80067f0 <__malloc_unlock>
 8006792:	f104 000b 	add.w	r0, r4, #11
 8006796:	1d23      	adds	r3, r4, #4
 8006798:	f020 0007 	bic.w	r0, r0, #7
 800679c:	1ac2      	subs	r2, r0, r3
 800679e:	bf1c      	itt	ne
 80067a0:	1a1b      	subne	r3, r3, r0
 80067a2:	50a3      	strne	r3, [r4, r2]
 80067a4:	e7af      	b.n	8006706 <_malloc_r+0x22>
 80067a6:	6862      	ldr	r2, [r4, #4]
 80067a8:	42a3      	cmp	r3, r4
 80067aa:	bf0c      	ite	eq
 80067ac:	f8c8 2000 	streq.w	r2, [r8]
 80067b0:	605a      	strne	r2, [r3, #4]
 80067b2:	e7eb      	b.n	800678c <_malloc_r+0xa8>
 80067b4:	4623      	mov	r3, r4
 80067b6:	6864      	ldr	r4, [r4, #4]
 80067b8:	e7ae      	b.n	8006718 <_malloc_r+0x34>
 80067ba:	463c      	mov	r4, r7
 80067bc:	687f      	ldr	r7, [r7, #4]
 80067be:	e7b6      	b.n	800672e <_malloc_r+0x4a>
 80067c0:	461a      	mov	r2, r3
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	d1fb      	bne.n	80067c0 <_malloc_r+0xdc>
 80067c8:	2300      	movs	r3, #0
 80067ca:	6053      	str	r3, [r2, #4]
 80067cc:	e7de      	b.n	800678c <_malloc_r+0xa8>
 80067ce:	230c      	movs	r3, #12
 80067d0:	6033      	str	r3, [r6, #0]
 80067d2:	4630      	mov	r0, r6
 80067d4:	f000 f80c 	bl	80067f0 <__malloc_unlock>
 80067d8:	e794      	b.n	8006704 <_malloc_r+0x20>
 80067da:	6005      	str	r5, [r0, #0]
 80067dc:	e7d6      	b.n	800678c <_malloc_r+0xa8>
 80067de:	bf00      	nop
 80067e0:	20000a24 	.word	0x20000a24

080067e4 <__malloc_lock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	@ (80067ec <__malloc_lock+0x8>)
 80067e6:	f000 b935 	b.w	8006a54 <__retarget_lock_acquire_recursive>
 80067ea:	bf00      	nop
 80067ec:	20000b64 	.word	0x20000b64

080067f0 <__malloc_unlock>:
 80067f0:	4801      	ldr	r0, [pc, #4]	@ (80067f8 <__malloc_unlock+0x8>)
 80067f2:	f000 b930 	b.w	8006a56 <__retarget_lock_release_recursive>
 80067f6:	bf00      	nop
 80067f8:	20000b64 	.word	0x20000b64

080067fc <_strtol_l.constprop.0>:
 80067fc:	2b24      	cmp	r3, #36	@ 0x24
 80067fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006802:	4686      	mov	lr, r0
 8006804:	4690      	mov	r8, r2
 8006806:	d801      	bhi.n	800680c <_strtol_l.constprop.0+0x10>
 8006808:	2b01      	cmp	r3, #1
 800680a:	d106      	bne.n	800681a <_strtol_l.constprop.0+0x1e>
 800680c:	f000 f8f8 	bl	8006a00 <__errno>
 8006810:	2316      	movs	r3, #22
 8006812:	6003      	str	r3, [r0, #0]
 8006814:	2000      	movs	r0, #0
 8006816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681a:	4834      	ldr	r0, [pc, #208]	@ (80068ec <_strtol_l.constprop.0+0xf0>)
 800681c:	460d      	mov	r5, r1
 800681e:	462a      	mov	r2, r5
 8006820:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006824:	5d06      	ldrb	r6, [r0, r4]
 8006826:	f016 0608 	ands.w	r6, r6, #8
 800682a:	d1f8      	bne.n	800681e <_strtol_l.constprop.0+0x22>
 800682c:	2c2d      	cmp	r4, #45	@ 0x2d
 800682e:	d12d      	bne.n	800688c <_strtol_l.constprop.0+0x90>
 8006830:	782c      	ldrb	r4, [r5, #0]
 8006832:	2601      	movs	r6, #1
 8006834:	1c95      	adds	r5, r2, #2
 8006836:	f033 0210 	bics.w	r2, r3, #16
 800683a:	d109      	bne.n	8006850 <_strtol_l.constprop.0+0x54>
 800683c:	2c30      	cmp	r4, #48	@ 0x30
 800683e:	d12a      	bne.n	8006896 <_strtol_l.constprop.0+0x9a>
 8006840:	782a      	ldrb	r2, [r5, #0]
 8006842:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006846:	2a58      	cmp	r2, #88	@ 0x58
 8006848:	d125      	bne.n	8006896 <_strtol_l.constprop.0+0x9a>
 800684a:	786c      	ldrb	r4, [r5, #1]
 800684c:	2310      	movs	r3, #16
 800684e:	3502      	adds	r5, #2
 8006850:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006854:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006858:	2200      	movs	r2, #0
 800685a:	fbbc f9f3 	udiv	r9, ip, r3
 800685e:	4610      	mov	r0, r2
 8006860:	fb03 ca19 	mls	sl, r3, r9, ip
 8006864:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006868:	2f09      	cmp	r7, #9
 800686a:	d81b      	bhi.n	80068a4 <_strtol_l.constprop.0+0xa8>
 800686c:	463c      	mov	r4, r7
 800686e:	42a3      	cmp	r3, r4
 8006870:	dd27      	ble.n	80068c2 <_strtol_l.constprop.0+0xc6>
 8006872:	1c57      	adds	r7, r2, #1
 8006874:	d007      	beq.n	8006886 <_strtol_l.constprop.0+0x8a>
 8006876:	4581      	cmp	r9, r0
 8006878:	d320      	bcc.n	80068bc <_strtol_l.constprop.0+0xc0>
 800687a:	d101      	bne.n	8006880 <_strtol_l.constprop.0+0x84>
 800687c:	45a2      	cmp	sl, r4
 800687e:	db1d      	blt.n	80068bc <_strtol_l.constprop.0+0xc0>
 8006880:	fb00 4003 	mla	r0, r0, r3, r4
 8006884:	2201      	movs	r2, #1
 8006886:	f815 4b01 	ldrb.w	r4, [r5], #1
 800688a:	e7eb      	b.n	8006864 <_strtol_l.constprop.0+0x68>
 800688c:	2c2b      	cmp	r4, #43	@ 0x2b
 800688e:	bf04      	itt	eq
 8006890:	782c      	ldrbeq	r4, [r5, #0]
 8006892:	1c95      	addeq	r5, r2, #2
 8006894:	e7cf      	b.n	8006836 <_strtol_l.constprop.0+0x3a>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1da      	bne.n	8006850 <_strtol_l.constprop.0+0x54>
 800689a:	2c30      	cmp	r4, #48	@ 0x30
 800689c:	bf0c      	ite	eq
 800689e:	2308      	moveq	r3, #8
 80068a0:	230a      	movne	r3, #10
 80068a2:	e7d5      	b.n	8006850 <_strtol_l.constprop.0+0x54>
 80068a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80068a8:	2f19      	cmp	r7, #25
 80068aa:	d801      	bhi.n	80068b0 <_strtol_l.constprop.0+0xb4>
 80068ac:	3c37      	subs	r4, #55	@ 0x37
 80068ae:	e7de      	b.n	800686e <_strtol_l.constprop.0+0x72>
 80068b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80068b4:	2f19      	cmp	r7, #25
 80068b6:	d804      	bhi.n	80068c2 <_strtol_l.constprop.0+0xc6>
 80068b8:	3c57      	subs	r4, #87	@ 0x57
 80068ba:	e7d8      	b.n	800686e <_strtol_l.constprop.0+0x72>
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	e7e1      	b.n	8006886 <_strtol_l.constprop.0+0x8a>
 80068c2:	1c53      	adds	r3, r2, #1
 80068c4:	d108      	bne.n	80068d8 <_strtol_l.constprop.0+0xdc>
 80068c6:	2322      	movs	r3, #34	@ 0x22
 80068c8:	f8ce 3000 	str.w	r3, [lr]
 80068cc:	4660      	mov	r0, ip
 80068ce:	f1b8 0f00 	cmp.w	r8, #0
 80068d2:	d0a0      	beq.n	8006816 <_strtol_l.constprop.0+0x1a>
 80068d4:	1e69      	subs	r1, r5, #1
 80068d6:	e006      	b.n	80068e6 <_strtol_l.constprop.0+0xea>
 80068d8:	b106      	cbz	r6, 80068dc <_strtol_l.constprop.0+0xe0>
 80068da:	4240      	negs	r0, r0
 80068dc:	f1b8 0f00 	cmp.w	r8, #0
 80068e0:	d099      	beq.n	8006816 <_strtol_l.constprop.0+0x1a>
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	d1f6      	bne.n	80068d4 <_strtol_l.constprop.0+0xd8>
 80068e6:	f8c8 1000 	str.w	r1, [r8]
 80068ea:	e794      	b.n	8006816 <_strtol_l.constprop.0+0x1a>
 80068ec:	08008651 	.word	0x08008651

080068f0 <strtol>:
 80068f0:	4613      	mov	r3, r2
 80068f2:	460a      	mov	r2, r1
 80068f4:	4601      	mov	r1, r0
 80068f6:	4802      	ldr	r0, [pc, #8]	@ (8006900 <strtol+0x10>)
 80068f8:	6800      	ldr	r0, [r0, #0]
 80068fa:	f7ff bf7f 	b.w	80067fc <_strtol_l.constprop.0>
 80068fe:	bf00      	nop
 8006900:	20000064 	.word	0x20000064

08006904 <siprintf>:
 8006904:	b40e      	push	{r1, r2, r3}
 8006906:	b500      	push	{lr}
 8006908:	b09c      	sub	sp, #112	@ 0x70
 800690a:	ab1d      	add	r3, sp, #116	@ 0x74
 800690c:	9002      	str	r0, [sp, #8]
 800690e:	9006      	str	r0, [sp, #24]
 8006910:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006914:	4809      	ldr	r0, [pc, #36]	@ (800693c <siprintf+0x38>)
 8006916:	9107      	str	r1, [sp, #28]
 8006918:	9104      	str	r1, [sp, #16]
 800691a:	4909      	ldr	r1, [pc, #36]	@ (8006940 <siprintf+0x3c>)
 800691c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006920:	9105      	str	r1, [sp, #20]
 8006922:	6800      	ldr	r0, [r0, #0]
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	a902      	add	r1, sp, #8
 8006928:	f000 f94a 	bl	8006bc0 <_svfiprintf_r>
 800692c:	9b02      	ldr	r3, [sp, #8]
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	b01c      	add	sp, #112	@ 0x70
 8006934:	f85d eb04 	ldr.w	lr, [sp], #4
 8006938:	b003      	add	sp, #12
 800693a:	4770      	bx	lr
 800693c:	20000064 	.word	0x20000064
 8006940:	ffff0208 	.word	0xffff0208

08006944 <memset>:
 8006944:	4402      	add	r2, r0
 8006946:	4603      	mov	r3, r0
 8006948:	4293      	cmp	r3, r2
 800694a:	d100      	bne.n	800694e <memset+0xa>
 800694c:	4770      	bx	lr
 800694e:	f803 1b01 	strb.w	r1, [r3], #1
 8006952:	e7f9      	b.n	8006948 <memset+0x4>

08006954 <strcat>:
 8006954:	b510      	push	{r4, lr}
 8006956:	4602      	mov	r2, r0
 8006958:	7814      	ldrb	r4, [r2, #0]
 800695a:	4613      	mov	r3, r2
 800695c:	3201      	adds	r2, #1
 800695e:	2c00      	cmp	r4, #0
 8006960:	d1fa      	bne.n	8006958 <strcat+0x4>
 8006962:	3b01      	subs	r3, #1
 8006964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006968:	f803 2f01 	strb.w	r2, [r3, #1]!
 800696c:	2a00      	cmp	r2, #0
 800696e:	d1f9      	bne.n	8006964 <strcat+0x10>
 8006970:	bd10      	pop	{r4, pc}

08006972 <strchr>:
 8006972:	b2c9      	uxtb	r1, r1
 8006974:	4603      	mov	r3, r0
 8006976:	4618      	mov	r0, r3
 8006978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800697c:	b112      	cbz	r2, 8006984 <strchr+0x12>
 800697e:	428a      	cmp	r2, r1
 8006980:	d1f9      	bne.n	8006976 <strchr+0x4>
 8006982:	4770      	bx	lr
 8006984:	2900      	cmp	r1, #0
 8006986:	bf18      	it	ne
 8006988:	2000      	movne	r0, #0
 800698a:	4770      	bx	lr

0800698c <strncpy>:
 800698c:	b510      	push	{r4, lr}
 800698e:	3901      	subs	r1, #1
 8006990:	4603      	mov	r3, r0
 8006992:	b132      	cbz	r2, 80069a2 <strncpy+0x16>
 8006994:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006998:	f803 4b01 	strb.w	r4, [r3], #1
 800699c:	3a01      	subs	r2, #1
 800699e:	2c00      	cmp	r4, #0
 80069a0:	d1f7      	bne.n	8006992 <strncpy+0x6>
 80069a2:	441a      	add	r2, r3
 80069a4:	2100      	movs	r1, #0
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d100      	bne.n	80069ac <strncpy+0x20>
 80069aa:	bd10      	pop	{r4, pc}
 80069ac:	f803 1b01 	strb.w	r1, [r3], #1
 80069b0:	e7f9      	b.n	80069a6 <strncpy+0x1a>

080069b2 <strstr>:
 80069b2:	780a      	ldrb	r2, [r1, #0]
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	b96a      	cbnz	r2, 80069d4 <strstr+0x22>
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d109      	bne.n	80069d2 <strstr+0x20>
 80069be:	460c      	mov	r4, r1
 80069c0:	4605      	mov	r5, r0
 80069c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f6      	beq.n	80069b8 <strstr+0x6>
 80069ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80069ce:	429e      	cmp	r6, r3
 80069d0:	d0f7      	beq.n	80069c2 <strstr+0x10>
 80069d2:	3001      	adds	r0, #1
 80069d4:	7803      	ldrb	r3, [r0, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1ef      	bne.n	80069ba <strstr+0x8>
 80069da:	4618      	mov	r0, r3
 80069dc:	e7ec      	b.n	80069b8 <strstr+0x6>
	...

080069e0 <_sbrk_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4d06      	ldr	r5, [pc, #24]	@ (80069fc <_sbrk_r+0x1c>)
 80069e4:	2300      	movs	r3, #0
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	f7fc f9d2 	bl	8002d94 <_sbrk>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_sbrk_r+0x1a>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_sbrk_r+0x1a>
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	20000b60 	.word	0x20000b60

08006a00 <__errno>:
 8006a00:	4b01      	ldr	r3, [pc, #4]	@ (8006a08 <__errno+0x8>)
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20000064 	.word	0x20000064

08006a0c <__libc_init_array>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8006a44 <__libc_init_array+0x38>)
 8006a10:	4c0d      	ldr	r4, [pc, #52]	@ (8006a48 <__libc_init_array+0x3c>)
 8006a12:	1b64      	subs	r4, r4, r5
 8006a14:	10a4      	asrs	r4, r4, #2
 8006a16:	2600      	movs	r6, #0
 8006a18:	42a6      	cmp	r6, r4
 8006a1a:	d109      	bne.n	8006a30 <__libc_init_array+0x24>
 8006a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8006a4c <__libc_init_array+0x40>)
 8006a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8006a50 <__libc_init_array+0x44>)
 8006a20:	f001 fdb0 	bl	8008584 <_init>
 8006a24:	1b64      	subs	r4, r4, r5
 8006a26:	10a4      	asrs	r4, r4, #2
 8006a28:	2600      	movs	r6, #0
 8006a2a:	42a6      	cmp	r6, r4
 8006a2c:	d105      	bne.n	8006a3a <__libc_init_array+0x2e>
 8006a2e:	bd70      	pop	{r4, r5, r6, pc}
 8006a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a34:	4798      	blx	r3
 8006a36:	3601      	adds	r6, #1
 8006a38:	e7ee      	b.n	8006a18 <__libc_init_array+0xc>
 8006a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3e:	4798      	blx	r3
 8006a40:	3601      	adds	r6, #1
 8006a42:	e7f2      	b.n	8006a2a <__libc_init_array+0x1e>
 8006a44:	08008830 	.word	0x08008830
 8006a48:	08008830 	.word	0x08008830
 8006a4c:	08008830 	.word	0x08008830
 8006a50:	08008834 	.word	0x08008834

08006a54 <__retarget_lock_acquire_recursive>:
 8006a54:	4770      	bx	lr

08006a56 <__retarget_lock_release_recursive>:
 8006a56:	4770      	bx	lr

08006a58 <memcpy>:
 8006a58:	440a      	add	r2, r1
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a60:	d100      	bne.n	8006a64 <memcpy+0xc>
 8006a62:	4770      	bx	lr
 8006a64:	b510      	push	{r4, lr}
 8006a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a6e:	4291      	cmp	r1, r2
 8006a70:	d1f9      	bne.n	8006a66 <memcpy+0xe>
 8006a72:	bd10      	pop	{r4, pc}

08006a74 <_free_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4605      	mov	r5, r0
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	d041      	beq.n	8006b00 <_free_r+0x8c>
 8006a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a80:	1f0c      	subs	r4, r1, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bfb8      	it	lt
 8006a86:	18e4      	addlt	r4, r4, r3
 8006a88:	f7ff feac 	bl	80067e4 <__malloc_lock>
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b04 <_free_r+0x90>)
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	b933      	cbnz	r3, 8006aa0 <_free_r+0x2c>
 8006a92:	6063      	str	r3, [r4, #4]
 8006a94:	6014      	str	r4, [r2, #0]
 8006a96:	4628      	mov	r0, r5
 8006a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a9c:	f7ff bea8 	b.w	80067f0 <__malloc_unlock>
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d908      	bls.n	8006ab6 <_free_r+0x42>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	1821      	adds	r1, r4, r0
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	bf01      	itttt	eq
 8006aac:	6819      	ldreq	r1, [r3, #0]
 8006aae:	685b      	ldreq	r3, [r3, #4]
 8006ab0:	1809      	addeq	r1, r1, r0
 8006ab2:	6021      	streq	r1, [r4, #0]
 8006ab4:	e7ed      	b.n	8006a92 <_free_r+0x1e>
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	b10b      	cbz	r3, 8006ac0 <_free_r+0x4c>
 8006abc:	42a3      	cmp	r3, r4
 8006abe:	d9fa      	bls.n	8006ab6 <_free_r+0x42>
 8006ac0:	6811      	ldr	r1, [r2, #0]
 8006ac2:	1850      	adds	r0, r2, r1
 8006ac4:	42a0      	cmp	r0, r4
 8006ac6:	d10b      	bne.n	8006ae0 <_free_r+0x6c>
 8006ac8:	6820      	ldr	r0, [r4, #0]
 8006aca:	4401      	add	r1, r0
 8006acc:	1850      	adds	r0, r2, r1
 8006ace:	4283      	cmp	r3, r0
 8006ad0:	6011      	str	r1, [r2, #0]
 8006ad2:	d1e0      	bne.n	8006a96 <_free_r+0x22>
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	6053      	str	r3, [r2, #4]
 8006ada:	4408      	add	r0, r1
 8006adc:	6010      	str	r0, [r2, #0]
 8006ade:	e7da      	b.n	8006a96 <_free_r+0x22>
 8006ae0:	d902      	bls.n	8006ae8 <_free_r+0x74>
 8006ae2:	230c      	movs	r3, #12
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	e7d6      	b.n	8006a96 <_free_r+0x22>
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	1821      	adds	r1, r4, r0
 8006aec:	428b      	cmp	r3, r1
 8006aee:	bf04      	itt	eq
 8006af0:	6819      	ldreq	r1, [r3, #0]
 8006af2:	685b      	ldreq	r3, [r3, #4]
 8006af4:	6063      	str	r3, [r4, #4]
 8006af6:	bf04      	itt	eq
 8006af8:	1809      	addeq	r1, r1, r0
 8006afa:	6021      	streq	r1, [r4, #0]
 8006afc:	6054      	str	r4, [r2, #4]
 8006afe:	e7ca      	b.n	8006a96 <_free_r+0x22>
 8006b00:	bd38      	pop	{r3, r4, r5, pc}
 8006b02:	bf00      	nop
 8006b04:	20000a24 	.word	0x20000a24

08006b08 <__ssputs_r>:
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	688e      	ldr	r6, [r1, #8]
 8006b0e:	461f      	mov	r7, r3
 8006b10:	42be      	cmp	r6, r7
 8006b12:	680b      	ldr	r3, [r1, #0]
 8006b14:	4682      	mov	sl, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	4690      	mov	r8, r2
 8006b1a:	d82d      	bhi.n	8006b78 <__ssputs_r+0x70>
 8006b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b24:	d026      	beq.n	8006b74 <__ssputs_r+0x6c>
 8006b26:	6965      	ldr	r5, [r4, #20]
 8006b28:	6909      	ldr	r1, [r1, #16]
 8006b2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b2e:	eba3 0901 	sub.w	r9, r3, r1
 8006b32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b36:	1c7b      	adds	r3, r7, #1
 8006b38:	444b      	add	r3, r9
 8006b3a:	106d      	asrs	r5, r5, #1
 8006b3c:	429d      	cmp	r5, r3
 8006b3e:	bf38      	it	cc
 8006b40:	461d      	movcc	r5, r3
 8006b42:	0553      	lsls	r3, r2, #21
 8006b44:	d527      	bpl.n	8006b96 <__ssputs_r+0x8e>
 8006b46:	4629      	mov	r1, r5
 8006b48:	f7ff fdcc 	bl	80066e4 <_malloc_r>
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	b360      	cbz	r0, 8006baa <__ssputs_r+0xa2>
 8006b50:	6921      	ldr	r1, [r4, #16]
 8006b52:	464a      	mov	r2, r9
 8006b54:	f7ff ff80 	bl	8006a58 <memcpy>
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	6126      	str	r6, [r4, #16]
 8006b66:	6165      	str	r5, [r4, #20]
 8006b68:	444e      	add	r6, r9
 8006b6a:	eba5 0509 	sub.w	r5, r5, r9
 8006b6e:	6026      	str	r6, [r4, #0]
 8006b70:	60a5      	str	r5, [r4, #8]
 8006b72:	463e      	mov	r6, r7
 8006b74:	42be      	cmp	r6, r7
 8006b76:	d900      	bls.n	8006b7a <__ssputs_r+0x72>
 8006b78:	463e      	mov	r6, r7
 8006b7a:	6820      	ldr	r0, [r4, #0]
 8006b7c:	4632      	mov	r2, r6
 8006b7e:	4641      	mov	r1, r8
 8006b80:	f000 faa8 	bl	80070d4 <memmove>
 8006b84:	68a3      	ldr	r3, [r4, #8]
 8006b86:	1b9b      	subs	r3, r3, r6
 8006b88:	60a3      	str	r3, [r4, #8]
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	4433      	add	r3, r6
 8006b8e:	6023      	str	r3, [r4, #0]
 8006b90:	2000      	movs	r0, #0
 8006b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b96:	462a      	mov	r2, r5
 8006b98:	f000 fab6 	bl	8007108 <_realloc_r>
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d1e0      	bne.n	8006b64 <__ssputs_r+0x5c>
 8006ba2:	6921      	ldr	r1, [r4, #16]
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	f7ff ff65 	bl	8006a74 <_free_r>
 8006baa:	230c      	movs	r3, #12
 8006bac:	f8ca 3000 	str.w	r3, [sl]
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bb6:	81a3      	strh	r3, [r4, #12]
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	e7e9      	b.n	8006b92 <__ssputs_r+0x8a>
	...

08006bc0 <_svfiprintf_r>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	4698      	mov	r8, r3
 8006bc6:	898b      	ldrh	r3, [r1, #12]
 8006bc8:	061b      	lsls	r3, r3, #24
 8006bca:	b09d      	sub	sp, #116	@ 0x74
 8006bcc:	4607      	mov	r7, r0
 8006bce:	460d      	mov	r5, r1
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	d510      	bpl.n	8006bf6 <_svfiprintf_r+0x36>
 8006bd4:	690b      	ldr	r3, [r1, #16]
 8006bd6:	b973      	cbnz	r3, 8006bf6 <_svfiprintf_r+0x36>
 8006bd8:	2140      	movs	r1, #64	@ 0x40
 8006bda:	f7ff fd83 	bl	80066e4 <_malloc_r>
 8006bde:	6028      	str	r0, [r5, #0]
 8006be0:	6128      	str	r0, [r5, #16]
 8006be2:	b930      	cbnz	r0, 8006bf2 <_svfiprintf_r+0x32>
 8006be4:	230c      	movs	r3, #12
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	b01d      	add	sp, #116	@ 0x74
 8006bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf2:	2340      	movs	r3, #64	@ 0x40
 8006bf4:	616b      	str	r3, [r5, #20]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bfa:	2320      	movs	r3, #32
 8006bfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c04:	2330      	movs	r3, #48	@ 0x30
 8006c06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006da4 <_svfiprintf_r+0x1e4>
 8006c0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c0e:	f04f 0901 	mov.w	r9, #1
 8006c12:	4623      	mov	r3, r4
 8006c14:	469a      	mov	sl, r3
 8006c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c1a:	b10a      	cbz	r2, 8006c20 <_svfiprintf_r+0x60>
 8006c1c:	2a25      	cmp	r2, #37	@ 0x25
 8006c1e:	d1f9      	bne.n	8006c14 <_svfiprintf_r+0x54>
 8006c20:	ebba 0b04 	subs.w	fp, sl, r4
 8006c24:	d00b      	beq.n	8006c3e <_svfiprintf_r+0x7e>
 8006c26:	465b      	mov	r3, fp
 8006c28:	4622      	mov	r2, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	f7ff ff6b 	bl	8006b08 <__ssputs_r>
 8006c32:	3001      	adds	r0, #1
 8006c34:	f000 80a7 	beq.w	8006d86 <_svfiprintf_r+0x1c6>
 8006c38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c3a:	445a      	add	r2, fp
 8006c3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 809f 	beq.w	8006d86 <_svfiprintf_r+0x1c6>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c52:	f10a 0a01 	add.w	sl, sl, #1
 8006c56:	9304      	str	r3, [sp, #16]
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c60:	4654      	mov	r4, sl
 8006c62:	2205      	movs	r2, #5
 8006c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c68:	484e      	ldr	r0, [pc, #312]	@ (8006da4 <_svfiprintf_r+0x1e4>)
 8006c6a:	f7f9 fad9 	bl	8000220 <memchr>
 8006c6e:	9a04      	ldr	r2, [sp, #16]
 8006c70:	b9d8      	cbnz	r0, 8006caa <_svfiprintf_r+0xea>
 8006c72:	06d0      	lsls	r0, r2, #27
 8006c74:	bf44      	itt	mi
 8006c76:	2320      	movmi	r3, #32
 8006c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c7c:	0711      	lsls	r1, r2, #28
 8006c7e:	bf44      	itt	mi
 8006c80:	232b      	movmi	r3, #43	@ 0x2b
 8006c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c86:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c8c:	d015      	beq.n	8006cba <_svfiprintf_r+0xfa>
 8006c8e:	9a07      	ldr	r2, [sp, #28]
 8006c90:	4654      	mov	r4, sl
 8006c92:	2000      	movs	r0, #0
 8006c94:	f04f 0c0a 	mov.w	ip, #10
 8006c98:	4621      	mov	r1, r4
 8006c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c9e:	3b30      	subs	r3, #48	@ 0x30
 8006ca0:	2b09      	cmp	r3, #9
 8006ca2:	d94b      	bls.n	8006d3c <_svfiprintf_r+0x17c>
 8006ca4:	b1b0      	cbz	r0, 8006cd4 <_svfiprintf_r+0x114>
 8006ca6:	9207      	str	r2, [sp, #28]
 8006ca8:	e014      	b.n	8006cd4 <_svfiprintf_r+0x114>
 8006caa:	eba0 0308 	sub.w	r3, r0, r8
 8006cae:	fa09 f303 	lsl.w	r3, r9, r3
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	46a2      	mov	sl, r4
 8006cb8:	e7d2      	b.n	8006c60 <_svfiprintf_r+0xa0>
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	1d19      	adds	r1, r3, #4
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	9103      	str	r1, [sp, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bfbb      	ittet	lt
 8006cc6:	425b      	neglt	r3, r3
 8006cc8:	f042 0202 	orrlt.w	r2, r2, #2
 8006ccc:	9307      	strge	r3, [sp, #28]
 8006cce:	9307      	strlt	r3, [sp, #28]
 8006cd0:	bfb8      	it	lt
 8006cd2:	9204      	strlt	r2, [sp, #16]
 8006cd4:	7823      	ldrb	r3, [r4, #0]
 8006cd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cd8:	d10a      	bne.n	8006cf0 <_svfiprintf_r+0x130>
 8006cda:	7863      	ldrb	r3, [r4, #1]
 8006cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cde:	d132      	bne.n	8006d46 <_svfiprintf_r+0x186>
 8006ce0:	9b03      	ldr	r3, [sp, #12]
 8006ce2:	1d1a      	adds	r2, r3, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	9203      	str	r2, [sp, #12]
 8006ce8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cec:	3402      	adds	r4, #2
 8006cee:	9305      	str	r3, [sp, #20]
 8006cf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006db4 <_svfiprintf_r+0x1f4>
 8006cf4:	7821      	ldrb	r1, [r4, #0]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	4650      	mov	r0, sl
 8006cfa:	f7f9 fa91 	bl	8000220 <memchr>
 8006cfe:	b138      	cbz	r0, 8006d10 <_svfiprintf_r+0x150>
 8006d00:	9b04      	ldr	r3, [sp, #16]
 8006d02:	eba0 000a 	sub.w	r0, r0, sl
 8006d06:	2240      	movs	r2, #64	@ 0x40
 8006d08:	4082      	lsls	r2, r0
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	3401      	adds	r4, #1
 8006d0e:	9304      	str	r3, [sp, #16]
 8006d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d14:	4824      	ldr	r0, [pc, #144]	@ (8006da8 <_svfiprintf_r+0x1e8>)
 8006d16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d1a:	2206      	movs	r2, #6
 8006d1c:	f7f9 fa80 	bl	8000220 <memchr>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d036      	beq.n	8006d92 <_svfiprintf_r+0x1d2>
 8006d24:	4b21      	ldr	r3, [pc, #132]	@ (8006dac <_svfiprintf_r+0x1ec>)
 8006d26:	bb1b      	cbnz	r3, 8006d70 <_svfiprintf_r+0x1b0>
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	3307      	adds	r3, #7
 8006d2c:	f023 0307 	bic.w	r3, r3, #7
 8006d30:	3308      	adds	r3, #8
 8006d32:	9303      	str	r3, [sp, #12]
 8006d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d36:	4433      	add	r3, r6
 8006d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d3a:	e76a      	b.n	8006c12 <_svfiprintf_r+0x52>
 8006d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d40:	460c      	mov	r4, r1
 8006d42:	2001      	movs	r0, #1
 8006d44:	e7a8      	b.n	8006c98 <_svfiprintf_r+0xd8>
 8006d46:	2300      	movs	r3, #0
 8006d48:	3401      	adds	r4, #1
 8006d4a:	9305      	str	r3, [sp, #20]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	f04f 0c0a 	mov.w	ip, #10
 8006d52:	4620      	mov	r0, r4
 8006d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d58:	3a30      	subs	r2, #48	@ 0x30
 8006d5a:	2a09      	cmp	r2, #9
 8006d5c:	d903      	bls.n	8006d66 <_svfiprintf_r+0x1a6>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0c6      	beq.n	8006cf0 <_svfiprintf_r+0x130>
 8006d62:	9105      	str	r1, [sp, #20]
 8006d64:	e7c4      	b.n	8006cf0 <_svfiprintf_r+0x130>
 8006d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e7f0      	b.n	8006d52 <_svfiprintf_r+0x192>
 8006d70:	ab03      	add	r3, sp, #12
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	462a      	mov	r2, r5
 8006d76:	4b0e      	ldr	r3, [pc, #56]	@ (8006db0 <_svfiprintf_r+0x1f0>)
 8006d78:	a904      	add	r1, sp, #16
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f3af 8000 	nop.w
 8006d80:	1c42      	adds	r2, r0, #1
 8006d82:	4606      	mov	r6, r0
 8006d84:	d1d6      	bne.n	8006d34 <_svfiprintf_r+0x174>
 8006d86:	89ab      	ldrh	r3, [r5, #12]
 8006d88:	065b      	lsls	r3, r3, #25
 8006d8a:	f53f af2d 	bmi.w	8006be8 <_svfiprintf_r+0x28>
 8006d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d90:	e72c      	b.n	8006bec <_svfiprintf_r+0x2c>
 8006d92:	ab03      	add	r3, sp, #12
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	462a      	mov	r2, r5
 8006d98:	4b05      	ldr	r3, [pc, #20]	@ (8006db0 <_svfiprintf_r+0x1f0>)
 8006d9a:	a904      	add	r1, sp, #16
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	f000 f879 	bl	8006e94 <_printf_i>
 8006da2:	e7ed      	b.n	8006d80 <_svfiprintf_r+0x1c0>
 8006da4:	08008751 	.word	0x08008751
 8006da8:	0800875b 	.word	0x0800875b
 8006dac:	00000000 	.word	0x00000000
 8006db0:	08006b09 	.word	0x08006b09
 8006db4:	08008757 	.word	0x08008757

08006db8 <_printf_common>:
 8006db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	4698      	mov	r8, r3
 8006dc0:	688a      	ldr	r2, [r1, #8]
 8006dc2:	690b      	ldr	r3, [r1, #16]
 8006dc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	bfb8      	it	lt
 8006dcc:	4613      	movlt	r3, r2
 8006dce:	6033      	str	r3, [r6, #0]
 8006dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	b10a      	cbz	r2, 8006dde <_printf_common+0x26>
 8006dda:	3301      	adds	r3, #1
 8006ddc:	6033      	str	r3, [r6, #0]
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	0699      	lsls	r1, r3, #26
 8006de2:	bf42      	ittt	mi
 8006de4:	6833      	ldrmi	r3, [r6, #0]
 8006de6:	3302      	addmi	r3, #2
 8006de8:	6033      	strmi	r3, [r6, #0]
 8006dea:	6825      	ldr	r5, [r4, #0]
 8006dec:	f015 0506 	ands.w	r5, r5, #6
 8006df0:	d106      	bne.n	8006e00 <_printf_common+0x48>
 8006df2:	f104 0a19 	add.w	sl, r4, #25
 8006df6:	68e3      	ldr	r3, [r4, #12]
 8006df8:	6832      	ldr	r2, [r6, #0]
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	42ab      	cmp	r3, r5
 8006dfe:	dc26      	bgt.n	8006e4e <_printf_common+0x96>
 8006e00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	3b00      	subs	r3, #0
 8006e08:	bf18      	it	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	0692      	lsls	r2, r2, #26
 8006e0e:	d42b      	bmi.n	8006e68 <_printf_common+0xb0>
 8006e10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e14:	4641      	mov	r1, r8
 8006e16:	4638      	mov	r0, r7
 8006e18:	47c8      	blx	r9
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d01e      	beq.n	8006e5c <_printf_common+0xa4>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	6922      	ldr	r2, [r4, #16]
 8006e22:	f003 0306 	and.w	r3, r3, #6
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	bf02      	ittt	eq
 8006e2a:	68e5      	ldreq	r5, [r4, #12]
 8006e2c:	6833      	ldreq	r3, [r6, #0]
 8006e2e:	1aed      	subeq	r5, r5, r3
 8006e30:	68a3      	ldr	r3, [r4, #8]
 8006e32:	bf0c      	ite	eq
 8006e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e38:	2500      	movne	r5, #0
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bfc4      	itt	gt
 8006e3e:	1a9b      	subgt	r3, r3, r2
 8006e40:	18ed      	addgt	r5, r5, r3
 8006e42:	2600      	movs	r6, #0
 8006e44:	341a      	adds	r4, #26
 8006e46:	42b5      	cmp	r5, r6
 8006e48:	d11a      	bne.n	8006e80 <_printf_common+0xc8>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e008      	b.n	8006e60 <_printf_common+0xa8>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4652      	mov	r2, sl
 8006e52:	4641      	mov	r1, r8
 8006e54:	4638      	mov	r0, r7
 8006e56:	47c8      	blx	r9
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d103      	bne.n	8006e64 <_printf_common+0xac>
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e64:	3501      	adds	r5, #1
 8006e66:	e7c6      	b.n	8006df6 <_printf_common+0x3e>
 8006e68:	18e1      	adds	r1, r4, r3
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	2030      	movs	r0, #48	@ 0x30
 8006e6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e72:	4422      	add	r2, r4
 8006e74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e7c:	3302      	adds	r3, #2
 8006e7e:	e7c7      	b.n	8006e10 <_printf_common+0x58>
 8006e80:	2301      	movs	r3, #1
 8006e82:	4622      	mov	r2, r4
 8006e84:	4641      	mov	r1, r8
 8006e86:	4638      	mov	r0, r7
 8006e88:	47c8      	blx	r9
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d0e6      	beq.n	8006e5c <_printf_common+0xa4>
 8006e8e:	3601      	adds	r6, #1
 8006e90:	e7d9      	b.n	8006e46 <_printf_common+0x8e>
	...

08006e94 <_printf_i>:
 8006e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	7e0f      	ldrb	r7, [r1, #24]
 8006e9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e9c:	2f78      	cmp	r7, #120	@ 0x78
 8006e9e:	4691      	mov	r9, r2
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	469a      	mov	sl, r3
 8006ea6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006eaa:	d807      	bhi.n	8006ebc <_printf_i+0x28>
 8006eac:	2f62      	cmp	r7, #98	@ 0x62
 8006eae:	d80a      	bhi.n	8006ec6 <_printf_i+0x32>
 8006eb0:	2f00      	cmp	r7, #0
 8006eb2:	f000 80d2 	beq.w	800705a <_printf_i+0x1c6>
 8006eb6:	2f58      	cmp	r7, #88	@ 0x58
 8006eb8:	f000 80b9 	beq.w	800702e <_printf_i+0x19a>
 8006ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ec0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ec4:	e03a      	b.n	8006f3c <_printf_i+0xa8>
 8006ec6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eca:	2b15      	cmp	r3, #21
 8006ecc:	d8f6      	bhi.n	8006ebc <_printf_i+0x28>
 8006ece:	a101      	add	r1, pc, #4	@ (adr r1, 8006ed4 <_printf_i+0x40>)
 8006ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ed4:	08006f2d 	.word	0x08006f2d
 8006ed8:	08006f41 	.word	0x08006f41
 8006edc:	08006ebd 	.word	0x08006ebd
 8006ee0:	08006ebd 	.word	0x08006ebd
 8006ee4:	08006ebd 	.word	0x08006ebd
 8006ee8:	08006ebd 	.word	0x08006ebd
 8006eec:	08006f41 	.word	0x08006f41
 8006ef0:	08006ebd 	.word	0x08006ebd
 8006ef4:	08006ebd 	.word	0x08006ebd
 8006ef8:	08006ebd 	.word	0x08006ebd
 8006efc:	08006ebd 	.word	0x08006ebd
 8006f00:	08007041 	.word	0x08007041
 8006f04:	08006f6b 	.word	0x08006f6b
 8006f08:	08006ffb 	.word	0x08006ffb
 8006f0c:	08006ebd 	.word	0x08006ebd
 8006f10:	08006ebd 	.word	0x08006ebd
 8006f14:	08007063 	.word	0x08007063
 8006f18:	08006ebd 	.word	0x08006ebd
 8006f1c:	08006f6b 	.word	0x08006f6b
 8006f20:	08006ebd 	.word	0x08006ebd
 8006f24:	08006ebd 	.word	0x08006ebd
 8006f28:	08007003 	.word	0x08007003
 8006f2c:	6833      	ldr	r3, [r6, #0]
 8006f2e:	1d1a      	adds	r2, r3, #4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6032      	str	r2, [r6, #0]
 8006f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e09d      	b.n	800707c <_printf_i+0x1e8>
 8006f40:	6833      	ldr	r3, [r6, #0]
 8006f42:	6820      	ldr	r0, [r4, #0]
 8006f44:	1d19      	adds	r1, r3, #4
 8006f46:	6031      	str	r1, [r6, #0]
 8006f48:	0606      	lsls	r6, r0, #24
 8006f4a:	d501      	bpl.n	8006f50 <_printf_i+0xbc>
 8006f4c:	681d      	ldr	r5, [r3, #0]
 8006f4e:	e003      	b.n	8006f58 <_printf_i+0xc4>
 8006f50:	0645      	lsls	r5, r0, #25
 8006f52:	d5fb      	bpl.n	8006f4c <_printf_i+0xb8>
 8006f54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f58:	2d00      	cmp	r5, #0
 8006f5a:	da03      	bge.n	8006f64 <_printf_i+0xd0>
 8006f5c:	232d      	movs	r3, #45	@ 0x2d
 8006f5e:	426d      	negs	r5, r5
 8006f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f64:	4859      	ldr	r0, [pc, #356]	@ (80070cc <_printf_i+0x238>)
 8006f66:	230a      	movs	r3, #10
 8006f68:	e011      	b.n	8006f8e <_printf_i+0xfa>
 8006f6a:	6821      	ldr	r1, [r4, #0]
 8006f6c:	6833      	ldr	r3, [r6, #0]
 8006f6e:	0608      	lsls	r0, r1, #24
 8006f70:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f74:	d402      	bmi.n	8006f7c <_printf_i+0xe8>
 8006f76:	0649      	lsls	r1, r1, #25
 8006f78:	bf48      	it	mi
 8006f7a:	b2ad      	uxthmi	r5, r5
 8006f7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f7e:	4853      	ldr	r0, [pc, #332]	@ (80070cc <_printf_i+0x238>)
 8006f80:	6033      	str	r3, [r6, #0]
 8006f82:	bf14      	ite	ne
 8006f84:	230a      	movne	r3, #10
 8006f86:	2308      	moveq	r3, #8
 8006f88:	2100      	movs	r1, #0
 8006f8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f8e:	6866      	ldr	r6, [r4, #4]
 8006f90:	60a6      	str	r6, [r4, #8]
 8006f92:	2e00      	cmp	r6, #0
 8006f94:	bfa2      	ittt	ge
 8006f96:	6821      	ldrge	r1, [r4, #0]
 8006f98:	f021 0104 	bicge.w	r1, r1, #4
 8006f9c:	6021      	strge	r1, [r4, #0]
 8006f9e:	b90d      	cbnz	r5, 8006fa4 <_printf_i+0x110>
 8006fa0:	2e00      	cmp	r6, #0
 8006fa2:	d04b      	beq.n	800703c <_printf_i+0x1a8>
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006faa:	fb03 5711 	mls	r7, r3, r1, r5
 8006fae:	5dc7      	ldrb	r7, [r0, r7]
 8006fb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fb4:	462f      	mov	r7, r5
 8006fb6:	42bb      	cmp	r3, r7
 8006fb8:	460d      	mov	r5, r1
 8006fba:	d9f4      	bls.n	8006fa6 <_printf_i+0x112>
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d10b      	bne.n	8006fd8 <_printf_i+0x144>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	07df      	lsls	r7, r3, #31
 8006fc4:	d508      	bpl.n	8006fd8 <_printf_i+0x144>
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	6861      	ldr	r1, [r4, #4]
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	bfde      	ittt	le
 8006fce:	2330      	movle	r3, #48	@ 0x30
 8006fd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fd8:	1b92      	subs	r2, r2, r6
 8006fda:	6122      	str	r2, [r4, #16]
 8006fdc:	f8cd a000 	str.w	sl, [sp]
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	aa03      	add	r2, sp, #12
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	f7ff fee6 	bl	8006db8 <_printf_common>
 8006fec:	3001      	adds	r0, #1
 8006fee:	d14a      	bne.n	8007086 <_printf_i+0x1f2>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	b004      	add	sp, #16
 8006ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	f043 0320 	orr.w	r3, r3, #32
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	4833      	ldr	r0, [pc, #204]	@ (80070d0 <_printf_i+0x23c>)
 8007004:	2778      	movs	r7, #120	@ 0x78
 8007006:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	6831      	ldr	r1, [r6, #0]
 800700e:	061f      	lsls	r7, r3, #24
 8007010:	f851 5b04 	ldr.w	r5, [r1], #4
 8007014:	d402      	bmi.n	800701c <_printf_i+0x188>
 8007016:	065f      	lsls	r7, r3, #25
 8007018:	bf48      	it	mi
 800701a:	b2ad      	uxthmi	r5, r5
 800701c:	6031      	str	r1, [r6, #0]
 800701e:	07d9      	lsls	r1, r3, #31
 8007020:	bf44      	itt	mi
 8007022:	f043 0320 	orrmi.w	r3, r3, #32
 8007026:	6023      	strmi	r3, [r4, #0]
 8007028:	b11d      	cbz	r5, 8007032 <_printf_i+0x19e>
 800702a:	2310      	movs	r3, #16
 800702c:	e7ac      	b.n	8006f88 <_printf_i+0xf4>
 800702e:	4827      	ldr	r0, [pc, #156]	@ (80070cc <_printf_i+0x238>)
 8007030:	e7e9      	b.n	8007006 <_printf_i+0x172>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	f023 0320 	bic.w	r3, r3, #32
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	e7f6      	b.n	800702a <_printf_i+0x196>
 800703c:	4616      	mov	r6, r2
 800703e:	e7bd      	b.n	8006fbc <_printf_i+0x128>
 8007040:	6833      	ldr	r3, [r6, #0]
 8007042:	6825      	ldr	r5, [r4, #0]
 8007044:	6961      	ldr	r1, [r4, #20]
 8007046:	1d18      	adds	r0, r3, #4
 8007048:	6030      	str	r0, [r6, #0]
 800704a:	062e      	lsls	r6, r5, #24
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	d501      	bpl.n	8007054 <_printf_i+0x1c0>
 8007050:	6019      	str	r1, [r3, #0]
 8007052:	e002      	b.n	800705a <_printf_i+0x1c6>
 8007054:	0668      	lsls	r0, r5, #25
 8007056:	d5fb      	bpl.n	8007050 <_printf_i+0x1bc>
 8007058:	8019      	strh	r1, [r3, #0]
 800705a:	2300      	movs	r3, #0
 800705c:	6123      	str	r3, [r4, #16]
 800705e:	4616      	mov	r6, r2
 8007060:	e7bc      	b.n	8006fdc <_printf_i+0x148>
 8007062:	6833      	ldr	r3, [r6, #0]
 8007064:	1d1a      	adds	r2, r3, #4
 8007066:	6032      	str	r2, [r6, #0]
 8007068:	681e      	ldr	r6, [r3, #0]
 800706a:	6862      	ldr	r2, [r4, #4]
 800706c:	2100      	movs	r1, #0
 800706e:	4630      	mov	r0, r6
 8007070:	f7f9 f8d6 	bl	8000220 <memchr>
 8007074:	b108      	cbz	r0, 800707a <_printf_i+0x1e6>
 8007076:	1b80      	subs	r0, r0, r6
 8007078:	6060      	str	r0, [r4, #4]
 800707a:	6863      	ldr	r3, [r4, #4]
 800707c:	6123      	str	r3, [r4, #16]
 800707e:	2300      	movs	r3, #0
 8007080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007084:	e7aa      	b.n	8006fdc <_printf_i+0x148>
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	4632      	mov	r2, r6
 800708a:	4649      	mov	r1, r9
 800708c:	4640      	mov	r0, r8
 800708e:	47d0      	blx	sl
 8007090:	3001      	adds	r0, #1
 8007092:	d0ad      	beq.n	8006ff0 <_printf_i+0x15c>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	079b      	lsls	r3, r3, #30
 8007098:	d413      	bmi.n	80070c2 <_printf_i+0x22e>
 800709a:	68e0      	ldr	r0, [r4, #12]
 800709c:	9b03      	ldr	r3, [sp, #12]
 800709e:	4298      	cmp	r0, r3
 80070a0:	bfb8      	it	lt
 80070a2:	4618      	movlt	r0, r3
 80070a4:	e7a6      	b.n	8006ff4 <_printf_i+0x160>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4632      	mov	r2, r6
 80070aa:	4649      	mov	r1, r9
 80070ac:	4640      	mov	r0, r8
 80070ae:	47d0      	blx	sl
 80070b0:	3001      	adds	r0, #1
 80070b2:	d09d      	beq.n	8006ff0 <_printf_i+0x15c>
 80070b4:	3501      	adds	r5, #1
 80070b6:	68e3      	ldr	r3, [r4, #12]
 80070b8:	9903      	ldr	r1, [sp, #12]
 80070ba:	1a5b      	subs	r3, r3, r1
 80070bc:	42ab      	cmp	r3, r5
 80070be:	dcf2      	bgt.n	80070a6 <_printf_i+0x212>
 80070c0:	e7eb      	b.n	800709a <_printf_i+0x206>
 80070c2:	2500      	movs	r5, #0
 80070c4:	f104 0619 	add.w	r6, r4, #25
 80070c8:	e7f5      	b.n	80070b6 <_printf_i+0x222>
 80070ca:	bf00      	nop
 80070cc:	08008762 	.word	0x08008762
 80070d0:	08008773 	.word	0x08008773

080070d4 <memmove>:
 80070d4:	4288      	cmp	r0, r1
 80070d6:	b510      	push	{r4, lr}
 80070d8:	eb01 0402 	add.w	r4, r1, r2
 80070dc:	d902      	bls.n	80070e4 <memmove+0x10>
 80070de:	4284      	cmp	r4, r0
 80070e0:	4623      	mov	r3, r4
 80070e2:	d807      	bhi.n	80070f4 <memmove+0x20>
 80070e4:	1e43      	subs	r3, r0, #1
 80070e6:	42a1      	cmp	r1, r4
 80070e8:	d008      	beq.n	80070fc <memmove+0x28>
 80070ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070f2:	e7f8      	b.n	80070e6 <memmove+0x12>
 80070f4:	4402      	add	r2, r0
 80070f6:	4601      	mov	r1, r0
 80070f8:	428a      	cmp	r2, r1
 80070fa:	d100      	bne.n	80070fe <memmove+0x2a>
 80070fc:	bd10      	pop	{r4, pc}
 80070fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007106:	e7f7      	b.n	80070f8 <memmove+0x24>

08007108 <_realloc_r>:
 8007108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710c:	4680      	mov	r8, r0
 800710e:	4615      	mov	r5, r2
 8007110:	460c      	mov	r4, r1
 8007112:	b921      	cbnz	r1, 800711e <_realloc_r+0x16>
 8007114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007118:	4611      	mov	r1, r2
 800711a:	f7ff bae3 	b.w	80066e4 <_malloc_r>
 800711e:	b92a      	cbnz	r2, 800712c <_realloc_r+0x24>
 8007120:	f7ff fca8 	bl	8006a74 <_free_r>
 8007124:	2400      	movs	r4, #0
 8007126:	4620      	mov	r0, r4
 8007128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800712c:	f000 f81a 	bl	8007164 <_malloc_usable_size_r>
 8007130:	4285      	cmp	r5, r0
 8007132:	4606      	mov	r6, r0
 8007134:	d802      	bhi.n	800713c <_realloc_r+0x34>
 8007136:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800713a:	d8f4      	bhi.n	8007126 <_realloc_r+0x1e>
 800713c:	4629      	mov	r1, r5
 800713e:	4640      	mov	r0, r8
 8007140:	f7ff fad0 	bl	80066e4 <_malloc_r>
 8007144:	4607      	mov	r7, r0
 8007146:	2800      	cmp	r0, #0
 8007148:	d0ec      	beq.n	8007124 <_realloc_r+0x1c>
 800714a:	42b5      	cmp	r5, r6
 800714c:	462a      	mov	r2, r5
 800714e:	4621      	mov	r1, r4
 8007150:	bf28      	it	cs
 8007152:	4632      	movcs	r2, r6
 8007154:	f7ff fc80 	bl	8006a58 <memcpy>
 8007158:	4621      	mov	r1, r4
 800715a:	4640      	mov	r0, r8
 800715c:	f7ff fc8a 	bl	8006a74 <_free_r>
 8007160:	463c      	mov	r4, r7
 8007162:	e7e0      	b.n	8007126 <_realloc_r+0x1e>

08007164 <_malloc_usable_size_r>:
 8007164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007168:	1f18      	subs	r0, r3, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	bfbc      	itt	lt
 800716e:	580b      	ldrlt	r3, [r1, r0]
 8007170:	18c0      	addlt	r0, r0, r3
 8007172:	4770      	bx	lr

08007174 <atan2>:
 8007174:	f000 b8c4 	b.w	8007300 <__ieee754_atan2>

08007178 <pow>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	ed2d 8b02 	vpush	{d8}
 800717e:	eeb0 8a40 	vmov.f32	s16, s0
 8007182:	eef0 8a60 	vmov.f32	s17, s1
 8007186:	ec55 4b11 	vmov	r4, r5, d1
 800718a:	f000 f981 	bl	8007490 <__ieee754_pow>
 800718e:	4622      	mov	r2, r4
 8007190:	462b      	mov	r3, r5
 8007192:	4620      	mov	r0, r4
 8007194:	4629      	mov	r1, r5
 8007196:	ec57 6b10 	vmov	r6, r7, d0
 800719a:	f7f9 fce7 	bl	8000b6c <__aeabi_dcmpun>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d13b      	bne.n	800721a <pow+0xa2>
 80071a2:	ec51 0b18 	vmov	r0, r1, d8
 80071a6:	2200      	movs	r2, #0
 80071a8:	2300      	movs	r3, #0
 80071aa:	f7f9 fcad 	bl	8000b08 <__aeabi_dcmpeq>
 80071ae:	b1b8      	cbz	r0, 80071e0 <pow+0x68>
 80071b0:	2200      	movs	r2, #0
 80071b2:	2300      	movs	r3, #0
 80071b4:	4620      	mov	r0, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	f7f9 fca6 	bl	8000b08 <__aeabi_dcmpeq>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d146      	bne.n	800724e <pow+0xd6>
 80071c0:	ec45 4b10 	vmov	d0, r4, r5
 80071c4:	f000 f848 	bl	8007258 <finite>
 80071c8:	b338      	cbz	r0, 800721a <pow+0xa2>
 80071ca:	2200      	movs	r2, #0
 80071cc:	2300      	movs	r3, #0
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f9 fca3 	bl	8000b1c <__aeabi_dcmplt>
 80071d6:	b300      	cbz	r0, 800721a <pow+0xa2>
 80071d8:	f7ff fc12 	bl	8006a00 <__errno>
 80071dc:	2322      	movs	r3, #34	@ 0x22
 80071de:	e01b      	b.n	8007218 <pow+0xa0>
 80071e0:	ec47 6b10 	vmov	d0, r6, r7
 80071e4:	f000 f838 	bl	8007258 <finite>
 80071e8:	b9e0      	cbnz	r0, 8007224 <pow+0xac>
 80071ea:	eeb0 0a48 	vmov.f32	s0, s16
 80071ee:	eef0 0a68 	vmov.f32	s1, s17
 80071f2:	f000 f831 	bl	8007258 <finite>
 80071f6:	b1a8      	cbz	r0, 8007224 <pow+0xac>
 80071f8:	ec45 4b10 	vmov	d0, r4, r5
 80071fc:	f000 f82c 	bl	8007258 <finite>
 8007200:	b180      	cbz	r0, 8007224 <pow+0xac>
 8007202:	4632      	mov	r2, r6
 8007204:	463b      	mov	r3, r7
 8007206:	4630      	mov	r0, r6
 8007208:	4639      	mov	r1, r7
 800720a:	f7f9 fcaf 	bl	8000b6c <__aeabi_dcmpun>
 800720e:	2800      	cmp	r0, #0
 8007210:	d0e2      	beq.n	80071d8 <pow+0x60>
 8007212:	f7ff fbf5 	bl	8006a00 <__errno>
 8007216:	2321      	movs	r3, #33	@ 0x21
 8007218:	6003      	str	r3, [r0, #0]
 800721a:	ecbd 8b02 	vpop	{d8}
 800721e:	ec47 6b10 	vmov	d0, r6, r7
 8007222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007224:	2200      	movs	r2, #0
 8007226:	2300      	movs	r3, #0
 8007228:	4630      	mov	r0, r6
 800722a:	4639      	mov	r1, r7
 800722c:	f7f9 fc6c 	bl	8000b08 <__aeabi_dcmpeq>
 8007230:	2800      	cmp	r0, #0
 8007232:	d0f2      	beq.n	800721a <pow+0xa2>
 8007234:	eeb0 0a48 	vmov.f32	s0, s16
 8007238:	eef0 0a68 	vmov.f32	s1, s17
 800723c:	f000 f80c 	bl	8007258 <finite>
 8007240:	2800      	cmp	r0, #0
 8007242:	d0ea      	beq.n	800721a <pow+0xa2>
 8007244:	ec45 4b10 	vmov	d0, r4, r5
 8007248:	f000 f806 	bl	8007258 <finite>
 800724c:	e7c3      	b.n	80071d6 <pow+0x5e>
 800724e:	4f01      	ldr	r7, [pc, #4]	@ (8007254 <pow+0xdc>)
 8007250:	2600      	movs	r6, #0
 8007252:	e7e2      	b.n	800721a <pow+0xa2>
 8007254:	3ff00000 	.word	0x3ff00000

08007258 <finite>:
 8007258:	b082      	sub	sp, #8
 800725a:	ed8d 0b00 	vstr	d0, [sp]
 800725e:	9801      	ldr	r0, [sp, #4]
 8007260:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007264:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007268:	0fc0      	lsrs	r0, r0, #31
 800726a:	b002      	add	sp, #8
 800726c:	4770      	bx	lr
	...

08007270 <round>:
 8007270:	ec51 0b10 	vmov	r0, r1, d0
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800727a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800727e:	2a13      	cmp	r2, #19
 8007280:	460b      	mov	r3, r1
 8007282:	4605      	mov	r5, r0
 8007284:	dc1b      	bgt.n	80072be <round+0x4e>
 8007286:	2a00      	cmp	r2, #0
 8007288:	da0b      	bge.n	80072a2 <round+0x32>
 800728a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800728e:	3201      	adds	r2, #1
 8007290:	bf04      	itt	eq
 8007292:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8007296:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800729a:	2200      	movs	r2, #0
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	e015      	b.n	80072ce <round+0x5e>
 80072a2:	4c15      	ldr	r4, [pc, #84]	@ (80072f8 <round+0x88>)
 80072a4:	4114      	asrs	r4, r2
 80072a6:	ea04 0601 	and.w	r6, r4, r1
 80072aa:	4306      	orrs	r6, r0
 80072ac:	d00f      	beq.n	80072ce <round+0x5e>
 80072ae:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80072b2:	fa41 f202 	asr.w	r2, r1, r2
 80072b6:	4413      	add	r3, r2
 80072b8:	ea23 0304 	bic.w	r3, r3, r4
 80072bc:	e7ed      	b.n	800729a <round+0x2a>
 80072be:	2a33      	cmp	r2, #51	@ 0x33
 80072c0:	dd08      	ble.n	80072d4 <round+0x64>
 80072c2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80072c6:	d102      	bne.n	80072ce <round+0x5e>
 80072c8:	4602      	mov	r2, r0
 80072ca:	f7f8 ffff 	bl	80002cc <__adddf3>
 80072ce:	ec41 0b10 	vmov	d0, r0, r1
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80072d8:	f04f 34ff 	mov.w	r4, #4294967295
 80072dc:	40f4      	lsrs	r4, r6
 80072de:	4204      	tst	r4, r0
 80072e0:	d0f5      	beq.n	80072ce <round+0x5e>
 80072e2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80072e6:	2201      	movs	r2, #1
 80072e8:	408a      	lsls	r2, r1
 80072ea:	1952      	adds	r2, r2, r5
 80072ec:	bf28      	it	cs
 80072ee:	3301      	addcs	r3, #1
 80072f0:	ea22 0204 	bic.w	r2, r2, r4
 80072f4:	e7d2      	b.n	800729c <round+0x2c>
 80072f6:	bf00      	nop
 80072f8:	000fffff 	.word	0x000fffff
 80072fc:	00000000 	.word	0x00000000

08007300 <__ieee754_atan2>:
 8007300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007304:	ec57 6b11 	vmov	r6, r7, d1
 8007308:	4273      	negs	r3, r6
 800730a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007488 <__ieee754_atan2+0x188>
 800730e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007312:	4333      	orrs	r3, r6
 8007314:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007318:	4543      	cmp	r3, r8
 800731a:	ec51 0b10 	vmov	r0, r1, d0
 800731e:	4635      	mov	r5, r6
 8007320:	d809      	bhi.n	8007336 <__ieee754_atan2+0x36>
 8007322:	4244      	negs	r4, r0
 8007324:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007328:	4304      	orrs	r4, r0
 800732a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800732e:	4544      	cmp	r4, r8
 8007330:	468e      	mov	lr, r1
 8007332:	4681      	mov	r9, r0
 8007334:	d907      	bls.n	8007346 <__ieee754_atan2+0x46>
 8007336:	4632      	mov	r2, r6
 8007338:	463b      	mov	r3, r7
 800733a:	f7f8 ffc7 	bl	80002cc <__adddf3>
 800733e:	ec41 0b10 	vmov	d0, r0, r1
 8007342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007346:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800734a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800734e:	4334      	orrs	r4, r6
 8007350:	d103      	bne.n	800735a <__ieee754_atan2+0x5a>
 8007352:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007356:	f000 bddf 	b.w	8007f18 <atan>
 800735a:	17bc      	asrs	r4, r7, #30
 800735c:	f004 0402 	and.w	r4, r4, #2
 8007360:	ea53 0909 	orrs.w	r9, r3, r9
 8007364:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007368:	d107      	bne.n	800737a <__ieee754_atan2+0x7a>
 800736a:	2c02      	cmp	r4, #2
 800736c:	d05f      	beq.n	800742e <__ieee754_atan2+0x12e>
 800736e:	2c03      	cmp	r4, #3
 8007370:	d1e5      	bne.n	800733e <__ieee754_atan2+0x3e>
 8007372:	a141      	add	r1, pc, #260	@ (adr r1, 8007478 <__ieee754_atan2+0x178>)
 8007374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007378:	e7e1      	b.n	800733e <__ieee754_atan2+0x3e>
 800737a:	4315      	orrs	r5, r2
 800737c:	d106      	bne.n	800738c <__ieee754_atan2+0x8c>
 800737e:	f1be 0f00 	cmp.w	lr, #0
 8007382:	da5f      	bge.n	8007444 <__ieee754_atan2+0x144>
 8007384:	a13e      	add	r1, pc, #248	@ (adr r1, 8007480 <__ieee754_atan2+0x180>)
 8007386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800738a:	e7d8      	b.n	800733e <__ieee754_atan2+0x3e>
 800738c:	4542      	cmp	r2, r8
 800738e:	d10f      	bne.n	80073b0 <__ieee754_atan2+0xb0>
 8007390:	4293      	cmp	r3, r2
 8007392:	f104 34ff 	add.w	r4, r4, #4294967295
 8007396:	d107      	bne.n	80073a8 <__ieee754_atan2+0xa8>
 8007398:	2c02      	cmp	r4, #2
 800739a:	d84c      	bhi.n	8007436 <__ieee754_atan2+0x136>
 800739c:	4b34      	ldr	r3, [pc, #208]	@ (8007470 <__ieee754_atan2+0x170>)
 800739e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073a6:	e7ca      	b.n	800733e <__ieee754_atan2+0x3e>
 80073a8:	2c02      	cmp	r4, #2
 80073aa:	d848      	bhi.n	800743e <__ieee754_atan2+0x13e>
 80073ac:	4b31      	ldr	r3, [pc, #196]	@ (8007474 <__ieee754_atan2+0x174>)
 80073ae:	e7f6      	b.n	800739e <__ieee754_atan2+0x9e>
 80073b0:	4543      	cmp	r3, r8
 80073b2:	d0e4      	beq.n	800737e <__ieee754_atan2+0x7e>
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80073ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073be:	da1e      	bge.n	80073fe <__ieee754_atan2+0xfe>
 80073c0:	2f00      	cmp	r7, #0
 80073c2:	da01      	bge.n	80073c8 <__ieee754_atan2+0xc8>
 80073c4:	323c      	adds	r2, #60	@ 0x3c
 80073c6:	db1e      	blt.n	8007406 <__ieee754_atan2+0x106>
 80073c8:	4632      	mov	r2, r6
 80073ca:	463b      	mov	r3, r7
 80073cc:	f7f9 fa5e 	bl	800088c <__aeabi_ddiv>
 80073d0:	ec41 0b10 	vmov	d0, r0, r1
 80073d4:	f000 ff38 	bl	8008248 <fabs>
 80073d8:	f000 fd9e 	bl	8007f18 <atan>
 80073dc:	ec51 0b10 	vmov	r0, r1, d0
 80073e0:	2c01      	cmp	r4, #1
 80073e2:	d013      	beq.n	800740c <__ieee754_atan2+0x10c>
 80073e4:	2c02      	cmp	r4, #2
 80073e6:	d015      	beq.n	8007414 <__ieee754_atan2+0x114>
 80073e8:	2c00      	cmp	r4, #0
 80073ea:	d0a8      	beq.n	800733e <__ieee754_atan2+0x3e>
 80073ec:	a318      	add	r3, pc, #96	@ (adr r3, 8007450 <__ieee754_atan2+0x150>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f7f8 ff69 	bl	80002c8 <__aeabi_dsub>
 80073f6:	a318      	add	r3, pc, #96	@ (adr r3, 8007458 <__ieee754_atan2+0x158>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	e014      	b.n	8007428 <__ieee754_atan2+0x128>
 80073fe:	a118      	add	r1, pc, #96	@ (adr r1, 8007460 <__ieee754_atan2+0x160>)
 8007400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007404:	e7ec      	b.n	80073e0 <__ieee754_atan2+0xe0>
 8007406:	2000      	movs	r0, #0
 8007408:	2100      	movs	r1, #0
 800740a:	e7e9      	b.n	80073e0 <__ieee754_atan2+0xe0>
 800740c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007410:	4619      	mov	r1, r3
 8007412:	e794      	b.n	800733e <__ieee754_atan2+0x3e>
 8007414:	a30e      	add	r3, pc, #56	@ (adr r3, 8007450 <__ieee754_atan2+0x150>)
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f7f8 ff55 	bl	80002c8 <__aeabi_dsub>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	a10d      	add	r1, pc, #52	@ (adr r1, 8007458 <__ieee754_atan2+0x158>)
 8007424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007428:	f7f8 ff4e 	bl	80002c8 <__aeabi_dsub>
 800742c:	e787      	b.n	800733e <__ieee754_atan2+0x3e>
 800742e:	a10a      	add	r1, pc, #40	@ (adr r1, 8007458 <__ieee754_atan2+0x158>)
 8007430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007434:	e783      	b.n	800733e <__ieee754_atan2+0x3e>
 8007436:	a10c      	add	r1, pc, #48	@ (adr r1, 8007468 <__ieee754_atan2+0x168>)
 8007438:	e9d1 0100 	ldrd	r0, r1, [r1]
 800743c:	e77f      	b.n	800733e <__ieee754_atan2+0x3e>
 800743e:	2000      	movs	r0, #0
 8007440:	2100      	movs	r1, #0
 8007442:	e77c      	b.n	800733e <__ieee754_atan2+0x3e>
 8007444:	a106      	add	r1, pc, #24	@ (adr r1, 8007460 <__ieee754_atan2+0x160>)
 8007446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800744a:	e778      	b.n	800733e <__ieee754_atan2+0x3e>
 800744c:	f3af 8000 	nop.w
 8007450:	33145c07 	.word	0x33145c07
 8007454:	3ca1a626 	.word	0x3ca1a626
 8007458:	54442d18 	.word	0x54442d18
 800745c:	400921fb 	.word	0x400921fb
 8007460:	54442d18 	.word	0x54442d18
 8007464:	3ff921fb 	.word	0x3ff921fb
 8007468:	54442d18 	.word	0x54442d18
 800746c:	3fe921fb 	.word	0x3fe921fb
 8007470:	080087a0 	.word	0x080087a0
 8007474:	08008788 	.word	0x08008788
 8007478:	54442d18 	.word	0x54442d18
 800747c:	c00921fb 	.word	0xc00921fb
 8007480:	54442d18 	.word	0x54442d18
 8007484:	bff921fb 	.word	0xbff921fb
 8007488:	7ff00000 	.word	0x7ff00000
 800748c:	00000000 	.word	0x00000000

08007490 <__ieee754_pow>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	b091      	sub	sp, #68	@ 0x44
 8007496:	ed8d 1b00 	vstr	d1, [sp]
 800749a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800749e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80074a2:	ea5a 0001 	orrs.w	r0, sl, r1
 80074a6:	ec57 6b10 	vmov	r6, r7, d0
 80074aa:	d113      	bne.n	80074d4 <__ieee754_pow+0x44>
 80074ac:	19b3      	adds	r3, r6, r6
 80074ae:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80074b2:	4152      	adcs	r2, r2
 80074b4:	4298      	cmp	r0, r3
 80074b6:	4b98      	ldr	r3, [pc, #608]	@ (8007718 <__ieee754_pow+0x288>)
 80074b8:	4193      	sbcs	r3, r2
 80074ba:	f080 84ea 	bcs.w	8007e92 <__ieee754_pow+0xa02>
 80074be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f8 ff01 	bl	80002cc <__adddf3>
 80074ca:	ec41 0b10 	vmov	d0, r0, r1
 80074ce:	b011      	add	sp, #68	@ 0x44
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	4a91      	ldr	r2, [pc, #580]	@ (800771c <__ieee754_pow+0x28c>)
 80074d6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80074da:	4590      	cmp	r8, r2
 80074dc:	463d      	mov	r5, r7
 80074de:	4633      	mov	r3, r6
 80074e0:	d806      	bhi.n	80074f0 <__ieee754_pow+0x60>
 80074e2:	d101      	bne.n	80074e8 <__ieee754_pow+0x58>
 80074e4:	2e00      	cmp	r6, #0
 80074e6:	d1ea      	bne.n	80074be <__ieee754_pow+0x2e>
 80074e8:	4592      	cmp	sl, r2
 80074ea:	d801      	bhi.n	80074f0 <__ieee754_pow+0x60>
 80074ec:	d10e      	bne.n	800750c <__ieee754_pow+0x7c>
 80074ee:	b169      	cbz	r1, 800750c <__ieee754_pow+0x7c>
 80074f0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80074f4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80074f8:	431d      	orrs	r5, r3
 80074fa:	d1e0      	bne.n	80074be <__ieee754_pow+0x2e>
 80074fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007500:	18db      	adds	r3, r3, r3
 8007502:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007506:	4152      	adcs	r2, r2
 8007508:	429d      	cmp	r5, r3
 800750a:	e7d4      	b.n	80074b6 <__ieee754_pow+0x26>
 800750c:	2d00      	cmp	r5, #0
 800750e:	46c3      	mov	fp, r8
 8007510:	da3a      	bge.n	8007588 <__ieee754_pow+0xf8>
 8007512:	4a83      	ldr	r2, [pc, #524]	@ (8007720 <__ieee754_pow+0x290>)
 8007514:	4592      	cmp	sl, r2
 8007516:	d84d      	bhi.n	80075b4 <__ieee754_pow+0x124>
 8007518:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800751c:	4592      	cmp	sl, r2
 800751e:	f240 84c7 	bls.w	8007eb0 <__ieee754_pow+0xa20>
 8007522:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007526:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800752a:	2a14      	cmp	r2, #20
 800752c:	dd0f      	ble.n	800754e <__ieee754_pow+0xbe>
 800752e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007532:	fa21 f402 	lsr.w	r4, r1, r2
 8007536:	fa04 f202 	lsl.w	r2, r4, r2
 800753a:	428a      	cmp	r2, r1
 800753c:	f040 84b8 	bne.w	8007eb0 <__ieee754_pow+0xa20>
 8007540:	f004 0401 	and.w	r4, r4, #1
 8007544:	f1c4 0402 	rsb	r4, r4, #2
 8007548:	2900      	cmp	r1, #0
 800754a:	d158      	bne.n	80075fe <__ieee754_pow+0x16e>
 800754c:	e00e      	b.n	800756c <__ieee754_pow+0xdc>
 800754e:	2900      	cmp	r1, #0
 8007550:	d154      	bne.n	80075fc <__ieee754_pow+0x16c>
 8007552:	f1c2 0214 	rsb	r2, r2, #20
 8007556:	fa4a f402 	asr.w	r4, sl, r2
 800755a:	fa04 f202 	lsl.w	r2, r4, r2
 800755e:	4552      	cmp	r2, sl
 8007560:	f040 84a3 	bne.w	8007eaa <__ieee754_pow+0xa1a>
 8007564:	f004 0401 	and.w	r4, r4, #1
 8007568:	f1c4 0402 	rsb	r4, r4, #2
 800756c:	4a6d      	ldr	r2, [pc, #436]	@ (8007724 <__ieee754_pow+0x294>)
 800756e:	4592      	cmp	sl, r2
 8007570:	d12e      	bne.n	80075d0 <__ieee754_pow+0x140>
 8007572:	f1b9 0f00 	cmp.w	r9, #0
 8007576:	f280 8494 	bge.w	8007ea2 <__ieee754_pow+0xa12>
 800757a:	496a      	ldr	r1, [pc, #424]	@ (8007724 <__ieee754_pow+0x294>)
 800757c:	4632      	mov	r2, r6
 800757e:	463b      	mov	r3, r7
 8007580:	2000      	movs	r0, #0
 8007582:	f7f9 f983 	bl	800088c <__aeabi_ddiv>
 8007586:	e7a0      	b.n	80074ca <__ieee754_pow+0x3a>
 8007588:	2400      	movs	r4, #0
 800758a:	bbc1      	cbnz	r1, 80075fe <__ieee754_pow+0x16e>
 800758c:	4a63      	ldr	r2, [pc, #396]	@ (800771c <__ieee754_pow+0x28c>)
 800758e:	4592      	cmp	sl, r2
 8007590:	d1ec      	bne.n	800756c <__ieee754_pow+0xdc>
 8007592:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8007596:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800759a:	431a      	orrs	r2, r3
 800759c:	f000 8479 	beq.w	8007e92 <__ieee754_pow+0xa02>
 80075a0:	4b61      	ldr	r3, [pc, #388]	@ (8007728 <__ieee754_pow+0x298>)
 80075a2:	4598      	cmp	r8, r3
 80075a4:	d908      	bls.n	80075b8 <__ieee754_pow+0x128>
 80075a6:	f1b9 0f00 	cmp.w	r9, #0
 80075aa:	f2c0 8476 	blt.w	8007e9a <__ieee754_pow+0xa0a>
 80075ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075b2:	e78a      	b.n	80074ca <__ieee754_pow+0x3a>
 80075b4:	2402      	movs	r4, #2
 80075b6:	e7e8      	b.n	800758a <__ieee754_pow+0xfa>
 80075b8:	f1b9 0f00 	cmp.w	r9, #0
 80075bc:	f04f 0000 	mov.w	r0, #0
 80075c0:	f04f 0100 	mov.w	r1, #0
 80075c4:	da81      	bge.n	80074ca <__ieee754_pow+0x3a>
 80075c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80075ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80075ce:	e77c      	b.n	80074ca <__ieee754_pow+0x3a>
 80075d0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80075d4:	d106      	bne.n	80075e4 <__ieee754_pow+0x154>
 80075d6:	4632      	mov	r2, r6
 80075d8:	463b      	mov	r3, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	f7f9 f82b 	bl	8000638 <__aeabi_dmul>
 80075e2:	e772      	b.n	80074ca <__ieee754_pow+0x3a>
 80075e4:	4a51      	ldr	r2, [pc, #324]	@ (800772c <__ieee754_pow+0x29c>)
 80075e6:	4591      	cmp	r9, r2
 80075e8:	d109      	bne.n	80075fe <__ieee754_pow+0x16e>
 80075ea:	2d00      	cmp	r5, #0
 80075ec:	db07      	blt.n	80075fe <__ieee754_pow+0x16e>
 80075ee:	ec47 6b10 	vmov	d0, r6, r7
 80075f2:	b011      	add	sp, #68	@ 0x44
 80075f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	f000 beea 	b.w	80083d0 <__ieee754_sqrt>
 80075fc:	2400      	movs	r4, #0
 80075fe:	ec47 6b10 	vmov	d0, r6, r7
 8007602:	9302      	str	r3, [sp, #8]
 8007604:	f000 fe20 	bl	8008248 <fabs>
 8007608:	9b02      	ldr	r3, [sp, #8]
 800760a:	ec51 0b10 	vmov	r0, r1, d0
 800760e:	bb53      	cbnz	r3, 8007666 <__ieee754_pow+0x1d6>
 8007610:	4b44      	ldr	r3, [pc, #272]	@ (8007724 <__ieee754_pow+0x294>)
 8007612:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8007616:	429a      	cmp	r2, r3
 8007618:	d002      	beq.n	8007620 <__ieee754_pow+0x190>
 800761a:	f1b8 0f00 	cmp.w	r8, #0
 800761e:	d122      	bne.n	8007666 <__ieee754_pow+0x1d6>
 8007620:	f1b9 0f00 	cmp.w	r9, #0
 8007624:	da05      	bge.n	8007632 <__ieee754_pow+0x1a2>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	2000      	movs	r0, #0
 800762c:	493d      	ldr	r1, [pc, #244]	@ (8007724 <__ieee754_pow+0x294>)
 800762e:	f7f9 f92d 	bl	800088c <__aeabi_ddiv>
 8007632:	2d00      	cmp	r5, #0
 8007634:	f6bf af49 	bge.w	80074ca <__ieee754_pow+0x3a>
 8007638:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800763c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007640:	ea58 0804 	orrs.w	r8, r8, r4
 8007644:	d108      	bne.n	8007658 <__ieee754_pow+0x1c8>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	f7f8 fe3b 	bl	80002c8 <__aeabi_dsub>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	e794      	b.n	8007582 <__ieee754_pow+0xf2>
 8007658:	2c01      	cmp	r4, #1
 800765a:	f47f af36 	bne.w	80074ca <__ieee754_pow+0x3a>
 800765e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007662:	4619      	mov	r1, r3
 8007664:	e731      	b.n	80074ca <__ieee754_pow+0x3a>
 8007666:	0feb      	lsrs	r3, r5, #31
 8007668:	3b01      	subs	r3, #1
 800766a:	ea53 0204 	orrs.w	r2, r3, r4
 800766e:	d102      	bne.n	8007676 <__ieee754_pow+0x1e6>
 8007670:	4632      	mov	r2, r6
 8007672:	463b      	mov	r3, r7
 8007674:	e7e9      	b.n	800764a <__ieee754_pow+0x1ba>
 8007676:	3c01      	subs	r4, #1
 8007678:	431c      	orrs	r4, r3
 800767a:	d016      	beq.n	80076aa <__ieee754_pow+0x21a>
 800767c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007708 <__ieee754_pow+0x278>
 8007680:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8007684:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007688:	f240 8112 	bls.w	80078b0 <__ieee754_pow+0x420>
 800768c:	4b28      	ldr	r3, [pc, #160]	@ (8007730 <__ieee754_pow+0x2a0>)
 800768e:	459a      	cmp	sl, r3
 8007690:	4b25      	ldr	r3, [pc, #148]	@ (8007728 <__ieee754_pow+0x298>)
 8007692:	d916      	bls.n	80076c2 <__ieee754_pow+0x232>
 8007694:	4598      	cmp	r8, r3
 8007696:	d80b      	bhi.n	80076b0 <__ieee754_pow+0x220>
 8007698:	f1b9 0f00 	cmp.w	r9, #0
 800769c:	da0b      	bge.n	80076b6 <__ieee754_pow+0x226>
 800769e:	2000      	movs	r0, #0
 80076a0:	b011      	add	sp, #68	@ 0x44
 80076a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a6:	f000 be8b 	b.w	80083c0 <__math_oflow>
 80076aa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007710 <__ieee754_pow+0x280>
 80076ae:	e7e7      	b.n	8007680 <__ieee754_pow+0x1f0>
 80076b0:	f1b9 0f00 	cmp.w	r9, #0
 80076b4:	dcf3      	bgt.n	800769e <__ieee754_pow+0x20e>
 80076b6:	2000      	movs	r0, #0
 80076b8:	b011      	add	sp, #68	@ 0x44
 80076ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076be:	f000 be77 	b.w	80083b0 <__math_uflow>
 80076c2:	4598      	cmp	r8, r3
 80076c4:	d20c      	bcs.n	80076e0 <__ieee754_pow+0x250>
 80076c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ca:	2200      	movs	r2, #0
 80076cc:	2300      	movs	r3, #0
 80076ce:	f7f9 fa25 	bl	8000b1c <__aeabi_dcmplt>
 80076d2:	3800      	subs	r0, #0
 80076d4:	bf18      	it	ne
 80076d6:	2001      	movne	r0, #1
 80076d8:	f1b9 0f00 	cmp.w	r9, #0
 80076dc:	daec      	bge.n	80076b8 <__ieee754_pow+0x228>
 80076de:	e7df      	b.n	80076a0 <__ieee754_pow+0x210>
 80076e0:	4b10      	ldr	r3, [pc, #64]	@ (8007724 <__ieee754_pow+0x294>)
 80076e2:	4598      	cmp	r8, r3
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	d924      	bls.n	8007734 <__ieee754_pow+0x2a4>
 80076ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ee:	2300      	movs	r3, #0
 80076f0:	f7f9 fa14 	bl	8000b1c <__aeabi_dcmplt>
 80076f4:	3800      	subs	r0, #0
 80076f6:	bf18      	it	ne
 80076f8:	2001      	movne	r0, #1
 80076fa:	f1b9 0f00 	cmp.w	r9, #0
 80076fe:	dccf      	bgt.n	80076a0 <__ieee754_pow+0x210>
 8007700:	e7da      	b.n	80076b8 <__ieee754_pow+0x228>
 8007702:	bf00      	nop
 8007704:	f3af 8000 	nop.w
 8007708:	00000000 	.word	0x00000000
 800770c:	3ff00000 	.word	0x3ff00000
 8007710:	00000000 	.word	0x00000000
 8007714:	bff00000 	.word	0xbff00000
 8007718:	fff00000 	.word	0xfff00000
 800771c:	7ff00000 	.word	0x7ff00000
 8007720:	433fffff 	.word	0x433fffff
 8007724:	3ff00000 	.word	0x3ff00000
 8007728:	3fefffff 	.word	0x3fefffff
 800772c:	3fe00000 	.word	0x3fe00000
 8007730:	43f00000 	.word	0x43f00000
 8007734:	4b5a      	ldr	r3, [pc, #360]	@ (80078a0 <__ieee754_pow+0x410>)
 8007736:	f7f8 fdc7 	bl	80002c8 <__aeabi_dsub>
 800773a:	a351      	add	r3, pc, #324	@ (adr r3, 8007880 <__ieee754_pow+0x3f0>)
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	4604      	mov	r4, r0
 8007742:	460d      	mov	r5, r1
 8007744:	f7f8 ff78 	bl	8000638 <__aeabi_dmul>
 8007748:	a34f      	add	r3, pc, #316	@ (adr r3, 8007888 <__ieee754_pow+0x3f8>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	f7f8 ff6f 	bl	8000638 <__aeabi_dmul>
 800775a:	4b52      	ldr	r3, [pc, #328]	@ (80078a4 <__ieee754_pow+0x414>)
 800775c:	4682      	mov	sl, r0
 800775e:	468b      	mov	fp, r1
 8007760:	2200      	movs	r2, #0
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f7f8 ff67 	bl	8000638 <__aeabi_dmul>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	a148      	add	r1, pc, #288	@ (adr r1, 8007890 <__ieee754_pow+0x400>)
 8007770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007774:	f7f8 fda8 	bl	80002c8 <__aeabi_dsub>
 8007778:	4622      	mov	r2, r4
 800777a:	462b      	mov	r3, r5
 800777c:	f7f8 ff5c 	bl	8000638 <__aeabi_dmul>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	2000      	movs	r0, #0
 8007786:	4948      	ldr	r1, [pc, #288]	@ (80078a8 <__ieee754_pow+0x418>)
 8007788:	f7f8 fd9e 	bl	80002c8 <__aeabi_dsub>
 800778c:	4622      	mov	r2, r4
 800778e:	4680      	mov	r8, r0
 8007790:	4689      	mov	r9, r1
 8007792:	462b      	mov	r3, r5
 8007794:	4620      	mov	r0, r4
 8007796:	4629      	mov	r1, r5
 8007798:	f7f8 ff4e 	bl	8000638 <__aeabi_dmul>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4640      	mov	r0, r8
 80077a2:	4649      	mov	r1, r9
 80077a4:	f7f8 ff48 	bl	8000638 <__aeabi_dmul>
 80077a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8007898 <__ieee754_pow+0x408>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f8 ff43 	bl	8000638 <__aeabi_dmul>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4650      	mov	r0, sl
 80077b8:	4659      	mov	r1, fp
 80077ba:	f7f8 fd85 	bl	80002c8 <__aeabi_dsub>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4680      	mov	r8, r0
 80077c4:	4689      	mov	r9, r1
 80077c6:	4630      	mov	r0, r6
 80077c8:	4639      	mov	r1, r7
 80077ca:	f7f8 fd7f 	bl	80002cc <__adddf3>
 80077ce:	2400      	movs	r4, #0
 80077d0:	4632      	mov	r2, r6
 80077d2:	463b      	mov	r3, r7
 80077d4:	4620      	mov	r0, r4
 80077d6:	460d      	mov	r5, r1
 80077d8:	f7f8 fd76 	bl	80002c8 <__aeabi_dsub>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4640      	mov	r0, r8
 80077e2:	4649      	mov	r1, r9
 80077e4:	f7f8 fd70 	bl	80002c8 <__aeabi_dsub>
 80077e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077f0:	2300      	movs	r3, #0
 80077f2:	9304      	str	r3, [sp, #16]
 80077f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80077f8:	4606      	mov	r6, r0
 80077fa:	460f      	mov	r7, r1
 80077fc:	4652      	mov	r2, sl
 80077fe:	465b      	mov	r3, fp
 8007800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007804:	f7f8 fd60 	bl	80002c8 <__aeabi_dsub>
 8007808:	4622      	mov	r2, r4
 800780a:	462b      	mov	r3, r5
 800780c:	f7f8 ff14 	bl	8000638 <__aeabi_dmul>
 8007810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007814:	4680      	mov	r8, r0
 8007816:	4689      	mov	r9, r1
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f8 ff0c 	bl	8000638 <__aeabi_dmul>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4640      	mov	r0, r8
 8007826:	4649      	mov	r1, r9
 8007828:	f7f8 fd50 	bl	80002cc <__adddf3>
 800782c:	4652      	mov	r2, sl
 800782e:	465b      	mov	r3, fp
 8007830:	4606      	mov	r6, r0
 8007832:	460f      	mov	r7, r1
 8007834:	4620      	mov	r0, r4
 8007836:	4629      	mov	r1, r5
 8007838:	f7f8 fefe 	bl	8000638 <__aeabi_dmul>
 800783c:	460b      	mov	r3, r1
 800783e:	4602      	mov	r2, r0
 8007840:	4680      	mov	r8, r0
 8007842:	4689      	mov	r9, r1
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	f7f8 fd40 	bl	80002cc <__adddf3>
 800784c:	4b17      	ldr	r3, [pc, #92]	@ (80078ac <__ieee754_pow+0x41c>)
 800784e:	4299      	cmp	r1, r3
 8007850:	4604      	mov	r4, r0
 8007852:	460d      	mov	r5, r1
 8007854:	468a      	mov	sl, r1
 8007856:	468b      	mov	fp, r1
 8007858:	f340 82ef 	ble.w	8007e3a <__ieee754_pow+0x9aa>
 800785c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007860:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007864:	4303      	orrs	r3, r0
 8007866:	f000 81e8 	beq.w	8007c3a <__ieee754_pow+0x7aa>
 800786a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	2300      	movs	r3, #0
 8007872:	f7f9 f953 	bl	8000b1c <__aeabi_dcmplt>
 8007876:	3800      	subs	r0, #0
 8007878:	bf18      	it	ne
 800787a:	2001      	movne	r0, #1
 800787c:	e710      	b.n	80076a0 <__ieee754_pow+0x210>
 800787e:	bf00      	nop
 8007880:	60000000 	.word	0x60000000
 8007884:	3ff71547 	.word	0x3ff71547
 8007888:	f85ddf44 	.word	0xf85ddf44
 800788c:	3e54ae0b 	.word	0x3e54ae0b
 8007890:	55555555 	.word	0x55555555
 8007894:	3fd55555 	.word	0x3fd55555
 8007898:	652b82fe 	.word	0x652b82fe
 800789c:	3ff71547 	.word	0x3ff71547
 80078a0:	3ff00000 	.word	0x3ff00000
 80078a4:	3fd00000 	.word	0x3fd00000
 80078a8:	3fe00000 	.word	0x3fe00000
 80078ac:	408fffff 	.word	0x408fffff
 80078b0:	4bd5      	ldr	r3, [pc, #852]	@ (8007c08 <__ieee754_pow+0x778>)
 80078b2:	402b      	ands	r3, r5
 80078b4:	2200      	movs	r2, #0
 80078b6:	b92b      	cbnz	r3, 80078c4 <__ieee754_pow+0x434>
 80078b8:	4bd4      	ldr	r3, [pc, #848]	@ (8007c0c <__ieee754_pow+0x77c>)
 80078ba:	f7f8 febd 	bl	8000638 <__aeabi_dmul>
 80078be:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80078c2:	468b      	mov	fp, r1
 80078c4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80078c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80078cc:	4413      	add	r3, r2
 80078ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d0:	4bcf      	ldr	r3, [pc, #828]	@ (8007c10 <__ieee754_pow+0x780>)
 80078d2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80078d6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80078da:	459b      	cmp	fp, r3
 80078dc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80078e0:	dd08      	ble.n	80078f4 <__ieee754_pow+0x464>
 80078e2:	4bcc      	ldr	r3, [pc, #816]	@ (8007c14 <__ieee754_pow+0x784>)
 80078e4:	459b      	cmp	fp, r3
 80078e6:	f340 81a5 	ble.w	8007c34 <__ieee754_pow+0x7a4>
 80078ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ec:	3301      	adds	r3, #1
 80078ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80078f4:	f04f 0a00 	mov.w	sl, #0
 80078f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80078fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078fe:	4bc6      	ldr	r3, [pc, #792]	@ (8007c18 <__ieee754_pow+0x788>)
 8007900:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007904:	ed93 7b00 	vldr	d7, [r3]
 8007908:	4629      	mov	r1, r5
 800790a:	ec53 2b17 	vmov	r2, r3, d7
 800790e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007912:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007916:	f7f8 fcd7 	bl	80002c8 <__aeabi_dsub>
 800791a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800791e:	4606      	mov	r6, r0
 8007920:	460f      	mov	r7, r1
 8007922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007926:	f7f8 fcd1 	bl	80002cc <__adddf3>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	2000      	movs	r0, #0
 8007930:	49ba      	ldr	r1, [pc, #744]	@ (8007c1c <__ieee754_pow+0x78c>)
 8007932:	f7f8 ffab 	bl	800088c <__aeabi_ddiv>
 8007936:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4630      	mov	r0, r6
 8007940:	4639      	mov	r1, r7
 8007942:	f7f8 fe79 	bl	8000638 <__aeabi_dmul>
 8007946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800794a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800794e:	106d      	asrs	r5, r5, #1
 8007950:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007954:	f04f 0b00 	mov.w	fp, #0
 8007958:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800795c:	4661      	mov	r1, ip
 800795e:	2200      	movs	r2, #0
 8007960:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007964:	4658      	mov	r0, fp
 8007966:	46e1      	mov	r9, ip
 8007968:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800796c:	4614      	mov	r4, r2
 800796e:	461d      	mov	r5, r3
 8007970:	f7f8 fe62 	bl	8000638 <__aeabi_dmul>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4630      	mov	r0, r6
 800797a:	4639      	mov	r1, r7
 800797c:	f7f8 fca4 	bl	80002c8 <__aeabi_dsub>
 8007980:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007984:	4606      	mov	r6, r0
 8007986:	460f      	mov	r7, r1
 8007988:	4620      	mov	r0, r4
 800798a:	4629      	mov	r1, r5
 800798c:	f7f8 fc9c 	bl	80002c8 <__aeabi_dsub>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007998:	f7f8 fc96 	bl	80002c8 <__aeabi_dsub>
 800799c:	465a      	mov	r2, fp
 800799e:	464b      	mov	r3, r9
 80079a0:	f7f8 fe4a 	bl	8000638 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fc8c 	bl	80002c8 <__aeabi_dsub>
 80079b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80079b4:	f7f8 fe40 	bl	8000638 <__aeabi_dmul>
 80079b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079c0:	4610      	mov	r0, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	f7f8 fe38 	bl	8000638 <__aeabi_dmul>
 80079c8:	a37d      	add	r3, pc, #500	@ (adr r3, 8007bc0 <__ieee754_pow+0x730>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	4604      	mov	r4, r0
 80079d0:	460d      	mov	r5, r1
 80079d2:	f7f8 fe31 	bl	8000638 <__aeabi_dmul>
 80079d6:	a37c      	add	r3, pc, #496	@ (adr r3, 8007bc8 <__ieee754_pow+0x738>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 fc76 	bl	80002cc <__adddf3>
 80079e0:	4622      	mov	r2, r4
 80079e2:	462b      	mov	r3, r5
 80079e4:	f7f8 fe28 	bl	8000638 <__aeabi_dmul>
 80079e8:	a379      	add	r3, pc, #484	@ (adr r3, 8007bd0 <__ieee754_pow+0x740>)
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fc6d 	bl	80002cc <__adddf3>
 80079f2:	4622      	mov	r2, r4
 80079f4:	462b      	mov	r3, r5
 80079f6:	f7f8 fe1f 	bl	8000638 <__aeabi_dmul>
 80079fa:	a377      	add	r3, pc, #476	@ (adr r3, 8007bd8 <__ieee754_pow+0x748>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 fc64 	bl	80002cc <__adddf3>
 8007a04:	4622      	mov	r2, r4
 8007a06:	462b      	mov	r3, r5
 8007a08:	f7f8 fe16 	bl	8000638 <__aeabi_dmul>
 8007a0c:	a374      	add	r3, pc, #464	@ (adr r3, 8007be0 <__ieee754_pow+0x750>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f7f8 fc5b 	bl	80002cc <__adddf3>
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	f7f8 fe0d 	bl	8000638 <__aeabi_dmul>
 8007a1e:	a372      	add	r3, pc, #456	@ (adr r3, 8007be8 <__ieee754_pow+0x758>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fc52 	bl	80002cc <__adddf3>
 8007a28:	4622      	mov	r2, r4
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460f      	mov	r7, r1
 8007a2e:	462b      	mov	r3, r5
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7f8 fe00 	bl	8000638 <__aeabi_dmul>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	4639      	mov	r1, r7
 8007a40:	f7f8 fdfa 	bl	8000638 <__aeabi_dmul>
 8007a44:	465a      	mov	r2, fp
 8007a46:	4604      	mov	r4, r0
 8007a48:	460d      	mov	r5, r1
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a50:	f7f8 fc3c 	bl	80002cc <__adddf3>
 8007a54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a58:	f7f8 fdee 	bl	8000638 <__aeabi_dmul>
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	462b      	mov	r3, r5
 8007a60:	f7f8 fc34 	bl	80002cc <__adddf3>
 8007a64:	465a      	mov	r2, fp
 8007a66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	4658      	mov	r0, fp
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f8 fde2 	bl	8000638 <__aeabi_dmul>
 8007a74:	4b6a      	ldr	r3, [pc, #424]	@ (8007c20 <__ieee754_pow+0x790>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	4606      	mov	r6, r0
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	f7f8 fc26 	bl	80002cc <__adddf3>
 8007a80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a84:	f7f8 fc22 	bl	80002cc <__adddf3>
 8007a88:	46d8      	mov	r8, fp
 8007a8a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007a8e:	460d      	mov	r5, r1
 8007a90:	465a      	mov	r2, fp
 8007a92:	460b      	mov	r3, r1
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007a9c:	f7f8 fdcc 	bl	8000638 <__aeabi_dmul>
 8007aa0:	465c      	mov	r4, fp
 8007aa2:	4680      	mov	r8, r0
 8007aa4:	4689      	mov	r9, r1
 8007aa6:	4b5e      	ldr	r3, [pc, #376]	@ (8007c20 <__ieee754_pow+0x790>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4620      	mov	r0, r4
 8007aac:	4629      	mov	r1, r5
 8007aae:	f7f8 fc0b 	bl	80002c8 <__aeabi_dsub>
 8007ab2:	4632      	mov	r2, r6
 8007ab4:	463b      	mov	r3, r7
 8007ab6:	f7f8 fc07 	bl	80002c8 <__aeabi_dsub>
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ac2:	f7f8 fc01 	bl	80002c8 <__aeabi_dsub>
 8007ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aca:	f7f8 fdb5 	bl	8000638 <__aeabi_dmul>
 8007ace:	4622      	mov	r2, r4
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	460f      	mov	r7, r1
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ada:	f7f8 fdad 	bl	8000638 <__aeabi_dmul>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	f7f8 fbf1 	bl	80002cc <__adddf3>
 8007aea:	4606      	mov	r6, r0
 8007aec:	460f      	mov	r7, r1
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4640      	mov	r0, r8
 8007af4:	4649      	mov	r1, r9
 8007af6:	f7f8 fbe9 	bl	80002cc <__adddf3>
 8007afa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007afe:	a33c      	add	r3, pc, #240	@ (adr r3, 8007bf0 <__ieee754_pow+0x760>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	4658      	mov	r0, fp
 8007b06:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	f7f8 fd94 	bl	8000638 <__aeabi_dmul>
 8007b10:	465c      	mov	r4, fp
 8007b12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b16:	4642      	mov	r2, r8
 8007b18:	464b      	mov	r3, r9
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f8 fbd3 	bl	80002c8 <__aeabi_dsub>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4630      	mov	r0, r6
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f8 fbcd 	bl	80002c8 <__aeabi_dsub>
 8007b2e:	a332      	add	r3, pc, #200	@ (adr r3, 8007bf8 <__ieee754_pow+0x768>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f7f8 fd80 	bl	8000638 <__aeabi_dmul>
 8007b38:	a331      	add	r3, pc, #196	@ (adr r3, 8007c00 <__ieee754_pow+0x770>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460f      	mov	r7, r1
 8007b42:	4620      	mov	r0, r4
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7f8 fd77 	bl	8000638 <__aeabi_dmul>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4630      	mov	r0, r6
 8007b50:	4639      	mov	r1, r7
 8007b52:	f7f8 fbbb 	bl	80002cc <__adddf3>
 8007b56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b58:	4b32      	ldr	r3, [pc, #200]	@ (8007c24 <__ieee754_pow+0x794>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fbb4 	bl	80002cc <__adddf3>
 8007b64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b6a:	f7f8 fcfb 	bl	8000564 <__aeabi_i2d>
 8007b6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b70:	4b2d      	ldr	r3, [pc, #180]	@ (8007c28 <__ieee754_pow+0x798>)
 8007b72:	4413      	add	r3, r2
 8007b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b78:	4606      	mov	r6, r0
 8007b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b7e:	460f      	mov	r7, r1
 8007b80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b84:	f7f8 fba2 	bl	80002cc <__adddf3>
 8007b88:	4642      	mov	r2, r8
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	f7f8 fb9e 	bl	80002cc <__adddf3>
 8007b90:	4632      	mov	r2, r6
 8007b92:	463b      	mov	r3, r7
 8007b94:	f7f8 fb9a 	bl	80002cc <__adddf3>
 8007b98:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	4658      	mov	r0, fp
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	f7f8 fb90 	bl	80002c8 <__aeabi_dsub>
 8007ba8:	4642      	mov	r2, r8
 8007baa:	464b      	mov	r3, r9
 8007bac:	f7f8 fb8c 	bl	80002c8 <__aeabi_dsub>
 8007bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb4:	f7f8 fb88 	bl	80002c8 <__aeabi_dsub>
 8007bb8:	465c      	mov	r4, fp
 8007bba:	4602      	mov	r2, r0
 8007bbc:	e036      	b.n	8007c2c <__ieee754_pow+0x79c>
 8007bbe:	bf00      	nop
 8007bc0:	4a454eef 	.word	0x4a454eef
 8007bc4:	3fca7e28 	.word	0x3fca7e28
 8007bc8:	93c9db65 	.word	0x93c9db65
 8007bcc:	3fcd864a 	.word	0x3fcd864a
 8007bd0:	a91d4101 	.word	0xa91d4101
 8007bd4:	3fd17460 	.word	0x3fd17460
 8007bd8:	518f264d 	.word	0x518f264d
 8007bdc:	3fd55555 	.word	0x3fd55555
 8007be0:	db6fabff 	.word	0xdb6fabff
 8007be4:	3fdb6db6 	.word	0x3fdb6db6
 8007be8:	33333303 	.word	0x33333303
 8007bec:	3fe33333 	.word	0x3fe33333
 8007bf0:	e0000000 	.word	0xe0000000
 8007bf4:	3feec709 	.word	0x3feec709
 8007bf8:	dc3a03fd 	.word	0xdc3a03fd
 8007bfc:	3feec709 	.word	0x3feec709
 8007c00:	145b01f5 	.word	0x145b01f5
 8007c04:	be3e2fe0 	.word	0xbe3e2fe0
 8007c08:	7ff00000 	.word	0x7ff00000
 8007c0c:	43400000 	.word	0x43400000
 8007c10:	0003988e 	.word	0x0003988e
 8007c14:	000bb679 	.word	0x000bb679
 8007c18:	080087d8 	.word	0x080087d8
 8007c1c:	3ff00000 	.word	0x3ff00000
 8007c20:	40080000 	.word	0x40080000
 8007c24:	080087b8 	.word	0x080087b8
 8007c28:	080087c8 	.word	0x080087c8
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c32:	e5d7      	b.n	80077e4 <__ieee754_pow+0x354>
 8007c34:	f04f 0a01 	mov.w	sl, #1
 8007c38:	e65e      	b.n	80078f8 <__ieee754_pow+0x468>
 8007c3a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8007f0c <__ieee754_pow+0xa7c>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 fb42 	bl	80002cc <__adddf3>
 8007c48:	4642      	mov	r2, r8
 8007c4a:	e9cd 0100 	strd	r0, r1, [sp]
 8007c4e:	464b      	mov	r3, r9
 8007c50:	4620      	mov	r0, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	f7f8 fb38 	bl	80002c8 <__aeabi_dsub>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c60:	f7f8 ff7a 	bl	8000b58 <__aeabi_dcmpgt>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	f47f ae00 	bne.w	800786a <__ieee754_pow+0x3da>
 8007c6a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007c6e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007c72:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007c76:	fa43 fa0a 	asr.w	sl, r3, sl
 8007c7a:	44da      	add	sl, fp
 8007c7c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007c80:	489d      	ldr	r0, [pc, #628]	@ (8007ef8 <__ieee754_pow+0xa68>)
 8007c82:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007c86:	4108      	asrs	r0, r1
 8007c88:	ea00 030a 	and.w	r3, r0, sl
 8007c8c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007c90:	f1c1 0114 	rsb	r1, r1, #20
 8007c94:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007c98:	fa4a fa01 	asr.w	sl, sl, r1
 8007c9c:	f1bb 0f00 	cmp.w	fp, #0
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	bfb8      	it	lt
 8007caa:	f1ca 0a00 	rsblt	sl, sl, #0
 8007cae:	f7f8 fb0b 	bl	80002c8 <__aeabi_dsub>
 8007cb2:	4680      	mov	r8, r0
 8007cb4:	4689      	mov	r9, r1
 8007cb6:	4632      	mov	r2, r6
 8007cb8:	463b      	mov	r3, r7
 8007cba:	4640      	mov	r0, r8
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	f7f8 fb05 	bl	80002cc <__adddf3>
 8007cc2:	2400      	movs	r4, #0
 8007cc4:	a37c      	add	r3, pc, #496	@ (adr r3, 8007eb8 <__ieee754_pow+0xa28>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	4620      	mov	r0, r4
 8007ccc:	460d      	mov	r5, r1
 8007cce:	f7f8 fcb3 	bl	8000638 <__aeabi_dmul>
 8007cd2:	4642      	mov	r2, r8
 8007cd4:	e9cd 0100 	strd	r0, r1, [sp]
 8007cd8:	464b      	mov	r3, r9
 8007cda:	4620      	mov	r0, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	f7f8 faf3 	bl	80002c8 <__aeabi_dsub>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 faed 	bl	80002c8 <__aeabi_dsub>
 8007cee:	a374      	add	r3, pc, #464	@ (adr r3, 8007ec0 <__ieee754_pow+0xa30>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f7f8 fca0 	bl	8000638 <__aeabi_dmul>
 8007cf8:	a373      	add	r3, pc, #460	@ (adr r3, 8007ec8 <__ieee754_pow+0xa38>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	4680      	mov	r8, r0
 8007d00:	4689      	mov	r9, r1
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7f8 fc97 	bl	8000638 <__aeabi_dmul>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4640      	mov	r0, r8
 8007d10:	4649      	mov	r1, r9
 8007d12:	f7f8 fadb 	bl	80002cc <__adddf3>
 8007d16:	4604      	mov	r4, r0
 8007d18:	460d      	mov	r5, r1
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d22:	f7f8 fad3 	bl	80002cc <__adddf3>
 8007d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	f7f8 facb 	bl	80002c8 <__aeabi_dsub>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4620      	mov	r0, r4
 8007d38:	4629      	mov	r1, r5
 8007d3a:	f7f8 fac5 	bl	80002c8 <__aeabi_dsub>
 8007d3e:	4642      	mov	r2, r8
 8007d40:	4606      	mov	r6, r0
 8007d42:	460f      	mov	r7, r1
 8007d44:	464b      	mov	r3, r9
 8007d46:	4640      	mov	r0, r8
 8007d48:	4649      	mov	r1, r9
 8007d4a:	f7f8 fc75 	bl	8000638 <__aeabi_dmul>
 8007d4e:	a360      	add	r3, pc, #384	@ (adr r3, 8007ed0 <__ieee754_pow+0xa40>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	4604      	mov	r4, r0
 8007d56:	460d      	mov	r5, r1
 8007d58:	f7f8 fc6e 	bl	8000638 <__aeabi_dmul>
 8007d5c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007ed8 <__ieee754_pow+0xa48>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f7f8 fab1 	bl	80002c8 <__aeabi_dsub>
 8007d66:	4622      	mov	r2, r4
 8007d68:	462b      	mov	r3, r5
 8007d6a:	f7f8 fc65 	bl	8000638 <__aeabi_dmul>
 8007d6e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007ee0 <__ieee754_pow+0xa50>)
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	f7f8 faaa 	bl	80002cc <__adddf3>
 8007d78:	4622      	mov	r2, r4
 8007d7a:	462b      	mov	r3, r5
 8007d7c:	f7f8 fc5c 	bl	8000638 <__aeabi_dmul>
 8007d80:	a359      	add	r3, pc, #356	@ (adr r3, 8007ee8 <__ieee754_pow+0xa58>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fa9f 	bl	80002c8 <__aeabi_dsub>
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	f7f8 fc53 	bl	8000638 <__aeabi_dmul>
 8007d92:	a357      	add	r3, pc, #348	@ (adr r3, 8007ef0 <__ieee754_pow+0xa60>)
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f7f8 fa98 	bl	80002cc <__adddf3>
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	462b      	mov	r3, r5
 8007da0:	f7f8 fc4a 	bl	8000638 <__aeabi_dmul>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4640      	mov	r0, r8
 8007daa:	4649      	mov	r1, r9
 8007dac:	f7f8 fa8c 	bl	80002c8 <__aeabi_dsub>
 8007db0:	4604      	mov	r4, r0
 8007db2:	460d      	mov	r5, r1
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4640      	mov	r0, r8
 8007dba:	4649      	mov	r1, r9
 8007dbc:	f7f8 fc3c 	bl	8000638 <__aeabi_dmul>
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	e9cd 0100 	strd	r0, r1, [sp]
 8007dc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4629      	mov	r1, r5
 8007dce:	f7f8 fa7b 	bl	80002c8 <__aeabi_dsub>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dda:	f7f8 fd57 	bl	800088c <__aeabi_ddiv>
 8007dde:	4632      	mov	r2, r6
 8007de0:	4604      	mov	r4, r0
 8007de2:	460d      	mov	r5, r1
 8007de4:	463b      	mov	r3, r7
 8007de6:	4640      	mov	r0, r8
 8007de8:	4649      	mov	r1, r9
 8007dea:	f7f8 fc25 	bl	8000638 <__aeabi_dmul>
 8007dee:	4632      	mov	r2, r6
 8007df0:	463b      	mov	r3, r7
 8007df2:	f7f8 fa6b 	bl	80002cc <__adddf3>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	f7f8 fa63 	bl	80002c8 <__aeabi_dsub>
 8007e02:	4642      	mov	r2, r8
 8007e04:	464b      	mov	r3, r9
 8007e06:	f7f8 fa5f 	bl	80002c8 <__aeabi_dsub>
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	493b      	ldr	r1, [pc, #236]	@ (8007efc <__ieee754_pow+0xa6c>)
 8007e10:	2000      	movs	r0, #0
 8007e12:	f7f8 fa59 	bl	80002c8 <__aeabi_dsub>
 8007e16:	ec41 0b10 	vmov	d0, r0, r1
 8007e1a:	ee10 3a90 	vmov	r3, s1
 8007e1e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e26:	da30      	bge.n	8007e8a <__ieee754_pow+0x9fa>
 8007e28:	4650      	mov	r0, sl
 8007e2a:	f000 fa15 	bl	8008258 <scalbn>
 8007e2e:	ec51 0b10 	vmov	r0, r1, d0
 8007e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e36:	f7ff bbd2 	b.w	80075de <__ieee754_pow+0x14e>
 8007e3a:	4c31      	ldr	r4, [pc, #196]	@ (8007f00 <__ieee754_pow+0xa70>)
 8007e3c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d91a      	bls.n	8007e7a <__ieee754_pow+0x9ea>
 8007e44:	4b2f      	ldr	r3, [pc, #188]	@ (8007f04 <__ieee754_pow+0xa74>)
 8007e46:	440b      	add	r3, r1
 8007e48:	4303      	orrs	r3, r0
 8007e4a:	d009      	beq.n	8007e60 <__ieee754_pow+0x9d0>
 8007e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	2300      	movs	r3, #0
 8007e54:	f7f8 fe62 	bl	8000b1c <__aeabi_dcmplt>
 8007e58:	3800      	subs	r0, #0
 8007e5a:	bf18      	it	ne
 8007e5c:	2001      	movne	r0, #1
 8007e5e:	e42b      	b.n	80076b8 <__ieee754_pow+0x228>
 8007e60:	4642      	mov	r2, r8
 8007e62:	464b      	mov	r3, r9
 8007e64:	f7f8 fa30 	bl	80002c8 <__aeabi_dsub>
 8007e68:	4632      	mov	r2, r6
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	f7f8 fe6a 	bl	8000b44 <__aeabi_dcmpge>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d1eb      	bne.n	8007e4c <__ieee754_pow+0x9bc>
 8007e74:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8007f14 <__ieee754_pow+0xa84>
 8007e78:	e6f7      	b.n	8007c6a <__ieee754_pow+0x7da>
 8007e7a:	469a      	mov	sl, r3
 8007e7c:	4b22      	ldr	r3, [pc, #136]	@ (8007f08 <__ieee754_pow+0xa78>)
 8007e7e:	459a      	cmp	sl, r3
 8007e80:	f63f aef3 	bhi.w	8007c6a <__ieee754_pow+0x7da>
 8007e84:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007e88:	e715      	b.n	8007cb6 <__ieee754_pow+0x826>
 8007e8a:	ec51 0b10 	vmov	r0, r1, d0
 8007e8e:	4619      	mov	r1, r3
 8007e90:	e7cf      	b.n	8007e32 <__ieee754_pow+0x9a2>
 8007e92:	491a      	ldr	r1, [pc, #104]	@ (8007efc <__ieee754_pow+0xa6c>)
 8007e94:	2000      	movs	r0, #0
 8007e96:	f7ff bb18 	b.w	80074ca <__ieee754_pow+0x3a>
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	f7ff bb14 	b.w	80074ca <__ieee754_pow+0x3a>
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	f7ff bb10 	b.w	80074ca <__ieee754_pow+0x3a>
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f7ff bb5e 	b.w	800756c <__ieee754_pow+0xdc>
 8007eb0:	2400      	movs	r4, #0
 8007eb2:	f7ff bb49 	b.w	8007548 <__ieee754_pow+0xb8>
 8007eb6:	bf00      	nop
 8007eb8:	00000000 	.word	0x00000000
 8007ebc:	3fe62e43 	.word	0x3fe62e43
 8007ec0:	fefa39ef 	.word	0xfefa39ef
 8007ec4:	3fe62e42 	.word	0x3fe62e42
 8007ec8:	0ca86c39 	.word	0x0ca86c39
 8007ecc:	be205c61 	.word	0xbe205c61
 8007ed0:	72bea4d0 	.word	0x72bea4d0
 8007ed4:	3e663769 	.word	0x3e663769
 8007ed8:	c5d26bf1 	.word	0xc5d26bf1
 8007edc:	3ebbbd41 	.word	0x3ebbbd41
 8007ee0:	af25de2c 	.word	0xaf25de2c
 8007ee4:	3f11566a 	.word	0x3f11566a
 8007ee8:	16bebd93 	.word	0x16bebd93
 8007eec:	3f66c16c 	.word	0x3f66c16c
 8007ef0:	5555553e 	.word	0x5555553e
 8007ef4:	3fc55555 	.word	0x3fc55555
 8007ef8:	fff00000 	.word	0xfff00000
 8007efc:	3ff00000 	.word	0x3ff00000
 8007f00:	4090cbff 	.word	0x4090cbff
 8007f04:	3f6f3400 	.word	0x3f6f3400
 8007f08:	3fe00000 	.word	0x3fe00000
 8007f0c:	652b82fe 	.word	0x652b82fe
 8007f10:	3c971547 	.word	0x3c971547
 8007f14:	4090cc00 	.word	0x4090cc00

08007f18 <atan>:
 8007f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	ec55 4b10 	vmov	r4, r5, d0
 8007f20:	4bbf      	ldr	r3, [pc, #764]	@ (8008220 <atan+0x308>)
 8007f22:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007f26:	429e      	cmp	r6, r3
 8007f28:	46ab      	mov	fp, r5
 8007f2a:	d918      	bls.n	8007f5e <atan+0x46>
 8007f2c:	4bbd      	ldr	r3, [pc, #756]	@ (8008224 <atan+0x30c>)
 8007f2e:	429e      	cmp	r6, r3
 8007f30:	d801      	bhi.n	8007f36 <atan+0x1e>
 8007f32:	d109      	bne.n	8007f48 <atan+0x30>
 8007f34:	b144      	cbz	r4, 8007f48 <atan+0x30>
 8007f36:	4622      	mov	r2, r4
 8007f38:	462b      	mov	r3, r5
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	f7f8 f9c5 	bl	80002cc <__adddf3>
 8007f42:	4604      	mov	r4, r0
 8007f44:	460d      	mov	r5, r1
 8007f46:	e006      	b.n	8007f56 <atan+0x3e>
 8007f48:	f1bb 0f00 	cmp.w	fp, #0
 8007f4c:	f340 812b 	ble.w	80081a6 <atan+0x28e>
 8007f50:	a597      	add	r5, pc, #604	@ (adr r5, 80081b0 <atan+0x298>)
 8007f52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007f56:	ec45 4b10 	vmov	d0, r4, r5
 8007f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5e:	4bb2      	ldr	r3, [pc, #712]	@ (8008228 <atan+0x310>)
 8007f60:	429e      	cmp	r6, r3
 8007f62:	d813      	bhi.n	8007f8c <atan+0x74>
 8007f64:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007f68:	429e      	cmp	r6, r3
 8007f6a:	d80c      	bhi.n	8007f86 <atan+0x6e>
 8007f6c:	a392      	add	r3, pc, #584	@ (adr r3, 80081b8 <atan+0x2a0>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 f9a9 	bl	80002cc <__adddf3>
 8007f7a:	4bac      	ldr	r3, [pc, #688]	@ (800822c <atan+0x314>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f7f8 fdeb 	bl	8000b58 <__aeabi_dcmpgt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d1e7      	bne.n	8007f56 <atan+0x3e>
 8007f86:	f04f 3aff 	mov.w	sl, #4294967295
 8007f8a:	e029      	b.n	8007fe0 <atan+0xc8>
 8007f8c:	f000 f95c 	bl	8008248 <fabs>
 8007f90:	4ba7      	ldr	r3, [pc, #668]	@ (8008230 <atan+0x318>)
 8007f92:	429e      	cmp	r6, r3
 8007f94:	ec55 4b10 	vmov	r4, r5, d0
 8007f98:	f200 80bc 	bhi.w	8008114 <atan+0x1fc>
 8007f9c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007fa0:	429e      	cmp	r6, r3
 8007fa2:	f200 809e 	bhi.w	80080e2 <atan+0x1ca>
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	462b      	mov	r3, r5
 8007faa:	4620      	mov	r0, r4
 8007fac:	4629      	mov	r1, r5
 8007fae:	f7f8 f98d 	bl	80002cc <__adddf3>
 8007fb2:	4b9e      	ldr	r3, [pc, #632]	@ (800822c <atan+0x314>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f7f8 f987 	bl	80002c8 <__aeabi_dsub>
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	460f      	mov	r7, r1
 8007fc0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 f980 	bl	80002cc <__adddf3>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 fc5a 	bl	800088c <__aeabi_ddiv>
 8007fd8:	f04f 0a00 	mov.w	sl, #0
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460d      	mov	r5, r1
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	462b      	mov	r3, r5
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f7f8 fb26 	bl	8000638 <__aeabi_dmul>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4680      	mov	r8, r0
 8007ff2:	4689      	mov	r9, r1
 8007ff4:	f7f8 fb20 	bl	8000638 <__aeabi_dmul>
 8007ff8:	a371      	add	r3, pc, #452	@ (adr r3, 80081c0 <atan+0x2a8>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	4606      	mov	r6, r0
 8008000:	460f      	mov	r7, r1
 8008002:	f7f8 fb19 	bl	8000638 <__aeabi_dmul>
 8008006:	a370      	add	r3, pc, #448	@ (adr r3, 80081c8 <atan+0x2b0>)
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f7f8 f95e 	bl	80002cc <__adddf3>
 8008010:	4632      	mov	r2, r6
 8008012:	463b      	mov	r3, r7
 8008014:	f7f8 fb10 	bl	8000638 <__aeabi_dmul>
 8008018:	a36d      	add	r3, pc, #436	@ (adr r3, 80081d0 <atan+0x2b8>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 f955 	bl	80002cc <__adddf3>
 8008022:	4632      	mov	r2, r6
 8008024:	463b      	mov	r3, r7
 8008026:	f7f8 fb07 	bl	8000638 <__aeabi_dmul>
 800802a:	a36b      	add	r3, pc, #428	@ (adr r3, 80081d8 <atan+0x2c0>)
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	f7f8 f94c 	bl	80002cc <__adddf3>
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	f7f8 fafe 	bl	8000638 <__aeabi_dmul>
 800803c:	a368      	add	r3, pc, #416	@ (adr r3, 80081e0 <atan+0x2c8>)
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	f7f8 f943 	bl	80002cc <__adddf3>
 8008046:	4632      	mov	r2, r6
 8008048:	463b      	mov	r3, r7
 800804a:	f7f8 faf5 	bl	8000638 <__aeabi_dmul>
 800804e:	a366      	add	r3, pc, #408	@ (adr r3, 80081e8 <atan+0x2d0>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f7f8 f93a 	bl	80002cc <__adddf3>
 8008058:	4642      	mov	r2, r8
 800805a:	464b      	mov	r3, r9
 800805c:	f7f8 faec 	bl	8000638 <__aeabi_dmul>
 8008060:	a363      	add	r3, pc, #396	@ (adr r3, 80081f0 <atan+0x2d8>)
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	4680      	mov	r8, r0
 8008068:	4689      	mov	r9, r1
 800806a:	4630      	mov	r0, r6
 800806c:	4639      	mov	r1, r7
 800806e:	f7f8 fae3 	bl	8000638 <__aeabi_dmul>
 8008072:	a361      	add	r3, pc, #388	@ (adr r3, 80081f8 <atan+0x2e0>)
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	f7f8 f926 	bl	80002c8 <__aeabi_dsub>
 800807c:	4632      	mov	r2, r6
 800807e:	463b      	mov	r3, r7
 8008080:	f7f8 fada 	bl	8000638 <__aeabi_dmul>
 8008084:	a35e      	add	r3, pc, #376	@ (adr r3, 8008200 <atan+0x2e8>)
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	f7f8 f91d 	bl	80002c8 <__aeabi_dsub>
 800808e:	4632      	mov	r2, r6
 8008090:	463b      	mov	r3, r7
 8008092:	f7f8 fad1 	bl	8000638 <__aeabi_dmul>
 8008096:	a35c      	add	r3, pc, #368	@ (adr r3, 8008208 <atan+0x2f0>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	f7f8 f914 	bl	80002c8 <__aeabi_dsub>
 80080a0:	4632      	mov	r2, r6
 80080a2:	463b      	mov	r3, r7
 80080a4:	f7f8 fac8 	bl	8000638 <__aeabi_dmul>
 80080a8:	a359      	add	r3, pc, #356	@ (adr r3, 8008210 <atan+0x2f8>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 f90b 	bl	80002c8 <__aeabi_dsub>
 80080b2:	4632      	mov	r2, r6
 80080b4:	463b      	mov	r3, r7
 80080b6:	f7f8 fabf 	bl	8000638 <__aeabi_dmul>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4640      	mov	r0, r8
 80080c0:	4649      	mov	r1, r9
 80080c2:	f7f8 f903 	bl	80002cc <__adddf3>
 80080c6:	4622      	mov	r2, r4
 80080c8:	462b      	mov	r3, r5
 80080ca:	f7f8 fab5 	bl	8000638 <__aeabi_dmul>
 80080ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	d148      	bne.n	800816a <atan+0x252>
 80080d8:	4620      	mov	r0, r4
 80080da:	4629      	mov	r1, r5
 80080dc:	f7f8 f8f4 	bl	80002c8 <__aeabi_dsub>
 80080e0:	e72f      	b.n	8007f42 <atan+0x2a>
 80080e2:	4b52      	ldr	r3, [pc, #328]	@ (800822c <atan+0x314>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	4620      	mov	r0, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7f8 f8ed 	bl	80002c8 <__aeabi_dsub>
 80080ee:	4b4f      	ldr	r3, [pc, #316]	@ (800822c <atan+0x314>)
 80080f0:	4606      	mov	r6, r0
 80080f2:	460f      	mov	r7, r1
 80080f4:	2200      	movs	r2, #0
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 f8e7 	bl	80002cc <__adddf3>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4630      	mov	r0, r6
 8008104:	4639      	mov	r1, r7
 8008106:	f7f8 fbc1 	bl	800088c <__aeabi_ddiv>
 800810a:	f04f 0a01 	mov.w	sl, #1
 800810e:	4604      	mov	r4, r0
 8008110:	460d      	mov	r5, r1
 8008112:	e765      	b.n	8007fe0 <atan+0xc8>
 8008114:	4b47      	ldr	r3, [pc, #284]	@ (8008234 <atan+0x31c>)
 8008116:	429e      	cmp	r6, r3
 8008118:	d21c      	bcs.n	8008154 <atan+0x23c>
 800811a:	4b47      	ldr	r3, [pc, #284]	@ (8008238 <atan+0x320>)
 800811c:	2200      	movs	r2, #0
 800811e:	4620      	mov	r0, r4
 8008120:	4629      	mov	r1, r5
 8008122:	f7f8 f8d1 	bl	80002c8 <__aeabi_dsub>
 8008126:	4b44      	ldr	r3, [pc, #272]	@ (8008238 <atan+0x320>)
 8008128:	4606      	mov	r6, r0
 800812a:	460f      	mov	r7, r1
 800812c:	2200      	movs	r2, #0
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 fa81 	bl	8000638 <__aeabi_dmul>
 8008136:	4b3d      	ldr	r3, [pc, #244]	@ (800822c <atan+0x314>)
 8008138:	2200      	movs	r2, #0
 800813a:	f7f8 f8c7 	bl	80002cc <__adddf3>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4630      	mov	r0, r6
 8008144:	4639      	mov	r1, r7
 8008146:	f7f8 fba1 	bl	800088c <__aeabi_ddiv>
 800814a:	f04f 0a02 	mov.w	sl, #2
 800814e:	4604      	mov	r4, r0
 8008150:	460d      	mov	r5, r1
 8008152:	e745      	b.n	8007fe0 <atan+0xc8>
 8008154:	4622      	mov	r2, r4
 8008156:	462b      	mov	r3, r5
 8008158:	4938      	ldr	r1, [pc, #224]	@ (800823c <atan+0x324>)
 800815a:	2000      	movs	r0, #0
 800815c:	f7f8 fb96 	bl	800088c <__aeabi_ddiv>
 8008160:	f04f 0a03 	mov.w	sl, #3
 8008164:	4604      	mov	r4, r0
 8008166:	460d      	mov	r5, r1
 8008168:	e73a      	b.n	8007fe0 <atan+0xc8>
 800816a:	4b35      	ldr	r3, [pc, #212]	@ (8008240 <atan+0x328>)
 800816c:	4e35      	ldr	r6, [pc, #212]	@ (8008244 <atan+0x32c>)
 800816e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 f8a7 	bl	80002c8 <__aeabi_dsub>
 800817a:	4622      	mov	r2, r4
 800817c:	462b      	mov	r3, r5
 800817e:	f7f8 f8a3 	bl	80002c8 <__aeabi_dsub>
 8008182:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800818e:	f7f8 f89b 	bl	80002c8 <__aeabi_dsub>
 8008192:	f1bb 0f00 	cmp.w	fp, #0
 8008196:	4604      	mov	r4, r0
 8008198:	460d      	mov	r5, r1
 800819a:	f6bf aedc 	bge.w	8007f56 <atan+0x3e>
 800819e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081a2:	461d      	mov	r5, r3
 80081a4:	e6d7      	b.n	8007f56 <atan+0x3e>
 80081a6:	a51c      	add	r5, pc, #112	@ (adr r5, 8008218 <atan+0x300>)
 80081a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80081ac:	e6d3      	b.n	8007f56 <atan+0x3e>
 80081ae:	bf00      	nop
 80081b0:	54442d18 	.word	0x54442d18
 80081b4:	3ff921fb 	.word	0x3ff921fb
 80081b8:	8800759c 	.word	0x8800759c
 80081bc:	7e37e43c 	.word	0x7e37e43c
 80081c0:	e322da11 	.word	0xe322da11
 80081c4:	3f90ad3a 	.word	0x3f90ad3a
 80081c8:	24760deb 	.word	0x24760deb
 80081cc:	3fa97b4b 	.word	0x3fa97b4b
 80081d0:	a0d03d51 	.word	0xa0d03d51
 80081d4:	3fb10d66 	.word	0x3fb10d66
 80081d8:	c54c206e 	.word	0xc54c206e
 80081dc:	3fb745cd 	.word	0x3fb745cd
 80081e0:	920083ff 	.word	0x920083ff
 80081e4:	3fc24924 	.word	0x3fc24924
 80081e8:	5555550d 	.word	0x5555550d
 80081ec:	3fd55555 	.word	0x3fd55555
 80081f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80081f4:	bfa2b444 	.word	0xbfa2b444
 80081f8:	52defd9a 	.word	0x52defd9a
 80081fc:	3fadde2d 	.word	0x3fadde2d
 8008200:	af749a6d 	.word	0xaf749a6d
 8008204:	3fb3b0f2 	.word	0x3fb3b0f2
 8008208:	fe231671 	.word	0xfe231671
 800820c:	3fbc71c6 	.word	0x3fbc71c6
 8008210:	9998ebc4 	.word	0x9998ebc4
 8008214:	3fc99999 	.word	0x3fc99999
 8008218:	54442d18 	.word	0x54442d18
 800821c:	bff921fb 	.word	0xbff921fb
 8008220:	440fffff 	.word	0x440fffff
 8008224:	7ff00000 	.word	0x7ff00000
 8008228:	3fdbffff 	.word	0x3fdbffff
 800822c:	3ff00000 	.word	0x3ff00000
 8008230:	3ff2ffff 	.word	0x3ff2ffff
 8008234:	40038000 	.word	0x40038000
 8008238:	3ff80000 	.word	0x3ff80000
 800823c:	bff00000 	.word	0xbff00000
 8008240:	080087e8 	.word	0x080087e8
 8008244:	08008808 	.word	0x08008808

08008248 <fabs>:
 8008248:	ec51 0b10 	vmov	r0, r1, d0
 800824c:	4602      	mov	r2, r0
 800824e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008252:	ec43 2b10 	vmov	d0, r2, r3
 8008256:	4770      	bx	lr

08008258 <scalbn>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	ec55 4b10 	vmov	r4, r5, d0
 800825e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008262:	4606      	mov	r6, r0
 8008264:	462b      	mov	r3, r5
 8008266:	b991      	cbnz	r1, 800828e <scalbn+0x36>
 8008268:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800826c:	4323      	orrs	r3, r4
 800826e:	d03d      	beq.n	80082ec <scalbn+0x94>
 8008270:	4b35      	ldr	r3, [pc, #212]	@ (8008348 <scalbn+0xf0>)
 8008272:	4620      	mov	r0, r4
 8008274:	4629      	mov	r1, r5
 8008276:	2200      	movs	r2, #0
 8008278:	f7f8 f9de 	bl	8000638 <__aeabi_dmul>
 800827c:	4b33      	ldr	r3, [pc, #204]	@ (800834c <scalbn+0xf4>)
 800827e:	429e      	cmp	r6, r3
 8008280:	4604      	mov	r4, r0
 8008282:	460d      	mov	r5, r1
 8008284:	da0f      	bge.n	80082a6 <scalbn+0x4e>
 8008286:	a328      	add	r3, pc, #160	@ (adr r3, 8008328 <scalbn+0xd0>)
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	e01e      	b.n	80082cc <scalbn+0x74>
 800828e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008292:	4291      	cmp	r1, r2
 8008294:	d10b      	bne.n	80082ae <scalbn+0x56>
 8008296:	4622      	mov	r2, r4
 8008298:	4620      	mov	r0, r4
 800829a:	4629      	mov	r1, r5
 800829c:	f7f8 f816 	bl	80002cc <__adddf3>
 80082a0:	4604      	mov	r4, r0
 80082a2:	460d      	mov	r5, r1
 80082a4:	e022      	b.n	80082ec <scalbn+0x94>
 80082a6:	460b      	mov	r3, r1
 80082a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80082ac:	3936      	subs	r1, #54	@ 0x36
 80082ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80082b2:	4296      	cmp	r6, r2
 80082b4:	dd0d      	ble.n	80082d2 <scalbn+0x7a>
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008330 <scalbn+0xd8>)
 80082ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082be:	da02      	bge.n	80082c6 <scalbn+0x6e>
 80082c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008338 <scalbn+0xe0>)
 80082c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008330 <scalbn+0xd8>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f7f8 f9b4 	bl	8000638 <__aeabi_dmul>
 80082d0:	e7e6      	b.n	80082a0 <scalbn+0x48>
 80082d2:	1872      	adds	r2, r6, r1
 80082d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80082d8:	428a      	cmp	r2, r1
 80082da:	dcec      	bgt.n	80082b6 <scalbn+0x5e>
 80082dc:	2a00      	cmp	r2, #0
 80082de:	dd08      	ble.n	80082f2 <scalbn+0x9a>
 80082e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80082e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80082e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082ec:	ec45 4b10 	vmov	d0, r4, r5
 80082f0:	bd70      	pop	{r4, r5, r6, pc}
 80082f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80082f6:	da08      	bge.n	800830a <scalbn+0xb2>
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8008328 <scalbn+0xd0>)
 80082fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008300:	dac1      	bge.n	8008286 <scalbn+0x2e>
 8008302:	a10f      	add	r1, pc, #60	@ (adr r1, 8008340 <scalbn+0xe8>)
 8008304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008308:	e7bd      	b.n	8008286 <scalbn+0x2e>
 800830a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800830e:	3236      	adds	r2, #54	@ 0x36
 8008310:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008314:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008318:	4620      	mov	r0, r4
 800831a:	4b0d      	ldr	r3, [pc, #52]	@ (8008350 <scalbn+0xf8>)
 800831c:	4629      	mov	r1, r5
 800831e:	2200      	movs	r2, #0
 8008320:	e7d4      	b.n	80082cc <scalbn+0x74>
 8008322:	bf00      	nop
 8008324:	f3af 8000 	nop.w
 8008328:	c2f8f359 	.word	0xc2f8f359
 800832c:	01a56e1f 	.word	0x01a56e1f
 8008330:	8800759c 	.word	0x8800759c
 8008334:	7e37e43c 	.word	0x7e37e43c
 8008338:	8800759c 	.word	0x8800759c
 800833c:	fe37e43c 	.word	0xfe37e43c
 8008340:	c2f8f359 	.word	0xc2f8f359
 8008344:	81a56e1f 	.word	0x81a56e1f
 8008348:	43500000 	.word	0x43500000
 800834c:	ffff3cb0 	.word	0xffff3cb0
 8008350:	3c900000 	.word	0x3c900000

08008354 <with_errno>:
 8008354:	b510      	push	{r4, lr}
 8008356:	ed2d 8b02 	vpush	{d8}
 800835a:	eeb0 8a40 	vmov.f32	s16, s0
 800835e:	eef0 8a60 	vmov.f32	s17, s1
 8008362:	4604      	mov	r4, r0
 8008364:	f7fe fb4c 	bl	8006a00 <__errno>
 8008368:	eeb0 0a48 	vmov.f32	s0, s16
 800836c:	eef0 0a68 	vmov.f32	s1, s17
 8008370:	ecbd 8b02 	vpop	{d8}
 8008374:	6004      	str	r4, [r0, #0]
 8008376:	bd10      	pop	{r4, pc}

08008378 <xflow>:
 8008378:	4603      	mov	r3, r0
 800837a:	b507      	push	{r0, r1, r2, lr}
 800837c:	ec51 0b10 	vmov	r0, r1, d0
 8008380:	b183      	cbz	r3, 80083a4 <xflow+0x2c>
 8008382:	4602      	mov	r2, r0
 8008384:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008388:	e9cd 2300 	strd	r2, r3, [sp]
 800838c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008390:	f7f8 f952 	bl	8000638 <__aeabi_dmul>
 8008394:	ec41 0b10 	vmov	d0, r0, r1
 8008398:	2022      	movs	r0, #34	@ 0x22
 800839a:	b003      	add	sp, #12
 800839c:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a0:	f7ff bfd8 	b.w	8008354 <with_errno>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	e7ee      	b.n	8008388 <xflow+0x10>
 80083aa:	0000      	movs	r0, r0
 80083ac:	0000      	movs	r0, r0
	...

080083b0 <__math_uflow>:
 80083b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80083b8 <__math_uflow+0x8>
 80083b4:	f7ff bfe0 	b.w	8008378 <xflow>
 80083b8:	00000000 	.word	0x00000000
 80083bc:	10000000 	.word	0x10000000

080083c0 <__math_oflow>:
 80083c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80083c8 <__math_oflow+0x8>
 80083c4:	f7ff bfd8 	b.w	8008378 <xflow>
 80083c8:	00000000 	.word	0x00000000
 80083cc:	70000000 	.word	0x70000000

080083d0 <__ieee754_sqrt>:
 80083d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	4a68      	ldr	r2, [pc, #416]	@ (8008578 <__ieee754_sqrt+0x1a8>)
 80083d6:	ec55 4b10 	vmov	r4, r5, d0
 80083da:	43aa      	bics	r2, r5
 80083dc:	462b      	mov	r3, r5
 80083de:	4621      	mov	r1, r4
 80083e0:	d110      	bne.n	8008404 <__ieee754_sqrt+0x34>
 80083e2:	4622      	mov	r2, r4
 80083e4:	4620      	mov	r0, r4
 80083e6:	4629      	mov	r1, r5
 80083e8:	f7f8 f926 	bl	8000638 <__aeabi_dmul>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4620      	mov	r0, r4
 80083f2:	4629      	mov	r1, r5
 80083f4:	f7f7 ff6a 	bl	80002cc <__adddf3>
 80083f8:	4604      	mov	r4, r0
 80083fa:	460d      	mov	r5, r1
 80083fc:	ec45 4b10 	vmov	d0, r4, r5
 8008400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008404:	2d00      	cmp	r5, #0
 8008406:	dc0e      	bgt.n	8008426 <__ieee754_sqrt+0x56>
 8008408:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800840c:	4322      	orrs	r2, r4
 800840e:	d0f5      	beq.n	80083fc <__ieee754_sqrt+0x2c>
 8008410:	b19d      	cbz	r5, 800843a <__ieee754_sqrt+0x6a>
 8008412:	4622      	mov	r2, r4
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	f7f7 ff56 	bl	80002c8 <__aeabi_dsub>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	f7f8 fa34 	bl	800088c <__aeabi_ddiv>
 8008424:	e7e8      	b.n	80083f8 <__ieee754_sqrt+0x28>
 8008426:	152a      	asrs	r2, r5, #20
 8008428:	d115      	bne.n	8008456 <__ieee754_sqrt+0x86>
 800842a:	2000      	movs	r0, #0
 800842c:	e009      	b.n	8008442 <__ieee754_sqrt+0x72>
 800842e:	0acb      	lsrs	r3, r1, #11
 8008430:	3a15      	subs	r2, #21
 8008432:	0549      	lsls	r1, r1, #21
 8008434:	2b00      	cmp	r3, #0
 8008436:	d0fa      	beq.n	800842e <__ieee754_sqrt+0x5e>
 8008438:	e7f7      	b.n	800842a <__ieee754_sqrt+0x5a>
 800843a:	462a      	mov	r2, r5
 800843c:	e7fa      	b.n	8008434 <__ieee754_sqrt+0x64>
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	3001      	adds	r0, #1
 8008442:	02dc      	lsls	r4, r3, #11
 8008444:	d5fb      	bpl.n	800843e <__ieee754_sqrt+0x6e>
 8008446:	1e44      	subs	r4, r0, #1
 8008448:	1b12      	subs	r2, r2, r4
 800844a:	f1c0 0420 	rsb	r4, r0, #32
 800844e:	fa21 f404 	lsr.w	r4, r1, r4
 8008452:	4323      	orrs	r3, r4
 8008454:	4081      	lsls	r1, r0
 8008456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800845a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800845e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008462:	07d2      	lsls	r2, r2, #31
 8008464:	bf5c      	itt	pl
 8008466:	005b      	lslpl	r3, r3, #1
 8008468:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800846c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008470:	bf58      	it	pl
 8008472:	0049      	lslpl	r1, r1, #1
 8008474:	2600      	movs	r6, #0
 8008476:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800847a:	106d      	asrs	r5, r5, #1
 800847c:	0049      	lsls	r1, r1, #1
 800847e:	2016      	movs	r0, #22
 8008480:	4632      	mov	r2, r6
 8008482:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008486:	1917      	adds	r7, r2, r4
 8008488:	429f      	cmp	r7, r3
 800848a:	bfde      	ittt	le
 800848c:	193a      	addle	r2, r7, r4
 800848e:	1bdb      	suble	r3, r3, r7
 8008490:	1936      	addle	r6, r6, r4
 8008492:	0fcf      	lsrs	r7, r1, #31
 8008494:	3801      	subs	r0, #1
 8008496:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800849a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800849e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80084a2:	d1f0      	bne.n	8008486 <__ieee754_sqrt+0xb6>
 80084a4:	4604      	mov	r4, r0
 80084a6:	2720      	movs	r7, #32
 80084a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80084ac:	429a      	cmp	r2, r3
 80084ae:	eb00 0e0c 	add.w	lr, r0, ip
 80084b2:	db02      	blt.n	80084ba <__ieee754_sqrt+0xea>
 80084b4:	d113      	bne.n	80084de <__ieee754_sqrt+0x10e>
 80084b6:	458e      	cmp	lr, r1
 80084b8:	d811      	bhi.n	80084de <__ieee754_sqrt+0x10e>
 80084ba:	f1be 0f00 	cmp.w	lr, #0
 80084be:	eb0e 000c 	add.w	r0, lr, ip
 80084c2:	da42      	bge.n	800854a <__ieee754_sqrt+0x17a>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	db40      	blt.n	800854a <__ieee754_sqrt+0x17a>
 80084c8:	f102 0801 	add.w	r8, r2, #1
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	458e      	cmp	lr, r1
 80084d0:	bf88      	it	hi
 80084d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80084d6:	eba1 010e 	sub.w	r1, r1, lr
 80084da:	4464      	add	r4, ip
 80084dc:	4642      	mov	r2, r8
 80084de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80084e2:	3f01      	subs	r7, #1
 80084e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80084e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80084ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80084f0:	d1dc      	bne.n	80084ac <__ieee754_sqrt+0xdc>
 80084f2:	4319      	orrs	r1, r3
 80084f4:	d01b      	beq.n	800852e <__ieee754_sqrt+0x15e>
 80084f6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800857c <__ieee754_sqrt+0x1ac>
 80084fa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008580 <__ieee754_sqrt+0x1b0>
 80084fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8008502:	e9db 2300 	ldrd	r2, r3, [fp]
 8008506:	f7f7 fedf 	bl	80002c8 <__aeabi_dsub>
 800850a:	e9da 8900 	ldrd	r8, r9, [sl]
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4640      	mov	r0, r8
 8008514:	4649      	mov	r1, r9
 8008516:	f7f8 fb0b 	bl	8000b30 <__aeabi_dcmple>
 800851a:	b140      	cbz	r0, 800852e <__ieee754_sqrt+0x15e>
 800851c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008520:	e9da 0100 	ldrd	r0, r1, [sl]
 8008524:	e9db 2300 	ldrd	r2, r3, [fp]
 8008528:	d111      	bne.n	800854e <__ieee754_sqrt+0x17e>
 800852a:	3601      	adds	r6, #1
 800852c:	463c      	mov	r4, r7
 800852e:	1072      	asrs	r2, r6, #1
 8008530:	0863      	lsrs	r3, r4, #1
 8008532:	07f1      	lsls	r1, r6, #31
 8008534:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008538:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800853c:	bf48      	it	mi
 800853e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008542:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008546:	4618      	mov	r0, r3
 8008548:	e756      	b.n	80083f8 <__ieee754_sqrt+0x28>
 800854a:	4690      	mov	r8, r2
 800854c:	e7be      	b.n	80084cc <__ieee754_sqrt+0xfc>
 800854e:	f7f7 febd 	bl	80002cc <__adddf3>
 8008552:	e9da 8900 	ldrd	r8, r9, [sl]
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4640      	mov	r0, r8
 800855c:	4649      	mov	r1, r9
 800855e:	f7f8 fadd 	bl	8000b1c <__aeabi_dcmplt>
 8008562:	b120      	cbz	r0, 800856e <__ieee754_sqrt+0x19e>
 8008564:	1ca0      	adds	r0, r4, #2
 8008566:	bf08      	it	eq
 8008568:	3601      	addeq	r6, #1
 800856a:	3402      	adds	r4, #2
 800856c:	e7df      	b.n	800852e <__ieee754_sqrt+0x15e>
 800856e:	1c63      	adds	r3, r4, #1
 8008570:	f023 0401 	bic.w	r4, r3, #1
 8008574:	e7db      	b.n	800852e <__ieee754_sqrt+0x15e>
 8008576:	bf00      	nop
 8008578:	7ff00000 	.word	0x7ff00000
 800857c:	200000c0 	.word	0x200000c0
 8008580:	200000b8 	.word	0x200000b8

08008584 <_init>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr

08008590 <_fini>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr
